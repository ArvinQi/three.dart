// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
(function($) {
var A = {};
delete A.x;
var B = {};
delete B.x;
var C = {};
delete C.x;
var D = {};
delete D.x;
var E = {};
delete E.x;
var F = {};
delete F.x;
var G = {};
delete G.x;
var H = {};
delete H.x;
var J = {};
delete J.x;
var K = {};
delete K.x;
var L = {};
delete L.x;
var M = {};
delete M.x;
var N = {};
delete N.x;
var O = {};
delete O.x;
var P = {};
delete P.x;
var Q = {};
delete Q.x;
var R = {};
delete R.x;
var S = {};
delete S.x;
var T = {};
delete T.x;
var U = {};
delete U.x;
var V = {};
delete V.x;
var W = {};
delete W.x;
var X = {};
delete X.x;
var Y = {};
delete Y.x;
var Z = {};
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
// Method closures
$$.BoundClosure$i0 = [H, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$0: function() {
    return this.__js_helper$_target.call(this._self, this._receiver);
  }
}];

$$.BoundClosure$1 = [H, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$1: function(p0) {
    return this.__js_helper$_target.call(this._self, p0);
  },
  $is_args1: true
}];

$$.BoundClosure$2 = [P, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$2: function(p0, p1) {
    return this.__js_helper$_target.call(this._self, p0, p1);
  },
  call$1: function(p0) {
    return this.call$2(p0, null);
  },
  $is_args2: true,
  $is_args1: true
}];

$$.BoundClosure$0 = [P, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$0: function() {
    return this.__js_helper$_target.call(this._self);
  }
}];

$$.BoundClosure$20 = [S, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$2: function(p0, p1) {
    return this.__js_helper$_target.call(this._self, p0, p1);
  },
  $is_args2: true
}];

$$.Closure$2 = [H, {"": "Closure;call$2,$name", $is_args2: true}];

$$.Closure$0 = [H, {"": "Closure;call$0,$name"}];

$$.Closure$7 = [H, {"": "Closure;call$7,$name"}];

$$.Closure$1 = [Z, {"": "Closure;call$1,$name", $is_args1: true}];

$$.Closure$20 = [P, {"": "Closure;call$2,$name",
  call$1: function(p0) {
    return this.call$2(p0, null);
  },
  $is_args2: true,
  $is_args1: true
}];

(function (reflectionData) {
  function map(x){x={x:x};delete x.x;return x}
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = map();
  if (!init.mangledGlobalNames) init.mangledGlobalNames = map();
  if (!init.statics) init.statics = map();
  if (!init.typeInformation) init.typeInformation = map();
  if (!init.globalFunctions) init.globalFunctions = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor[""];
    var classes = [];
    var functions = [];
    function processStatics(descriptor) {
      for (var property in descriptor) {
        if (!hasOwnProperty.call(descriptor, property)) continue;
        if (property === "") continue;
        var element = descriptor[property];
        var firstChar = property.substring(0, 1);
        var previousProperty;
        if (firstChar === "+") {
          mangledGlobalNames[previousProperty] = property.substring(1);
          if (descriptor[property] == 1) descriptor[previousProperty].$reflectable = 1;
          if (element && element.length) init.typeInformation[previousProperty] = element;
        } else if (firstChar === "@") {
          property = property.substring(1);
          $[property]["@"] = element;
        } else if (firstChar === "*") {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods) {
            descriptor.$methodsWithOptionalArguments = optionalMethods = {}
          }
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else {
          previousProperty = property;
          var newDesc = {};
          var previousProp;
          for (var prop in element) {
            if (!hasOwnProperty.call(element, prop)) continue;
            firstChar = prop.substring(0, 1);
            if (prop === "static") {
              processStatics(init.statics[property] = element[prop]);
            } else if (firstChar === "+") {
              mangledNames[previousProp] = prop.substring(1);
              if (element[prop] == 1) element[previousProp].$reflectable = 1;
            } else if (firstChar === "@" && prop !== "@") {
              newDesc[prop.substring(1)]["@"] = element[prop];
            } else if (firstChar === "*") {
              newDesc[previousProp].$defaultValues = element[prop];
              var optionalMethods = newDesc.$methodsWithOptionalArguments;
              if (!optionalMethods) {
                newDesc.$methodsWithOptionalArguments = optionalMethods={}
              }
              optionalMethods[prop] = previousProp;
            } else {
              newDesc[previousProp = prop] = element[prop];
            }
          }
          $$[property] = [globalObject, newDesc];
          classes.push(property);
        }
      }
    }
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot,
                    globalObject]);
  }
})([
["_foreign_helper", "dart:_foreign_helper", , H, {
JS_CONST: {"": "Object;code"}}],
["_interceptors", "dart:_interceptors", , J, {
getInterceptor: function(object) {
  return void 0;
},

makeDispatchRecord: function(interceptor, proto, extension, indexability) {
  return {i: interceptor, p: proto, e: extension, x: indexability};
},

getNativeInterceptor: function(object) {
  var record, proto, objectProto, interceptor;
  record = object[init.dispatchPropertyName];
  if (record == null)
    if ($.initNativeDispatchFlag == null) {
      H.initNativeDispatch();
      record = object[init.dispatchPropertyName];
    }
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
  }
  interceptor = H.lookupAndCacheInterceptor(object);
  if (interceptor == null)
    return C.UnknownJavaScriptObject_methods;
  return interceptor;
},

Interceptor: {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return H.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return H.Primitives_objectToString(receiver);
  },
  "%": "ArrayBuffer|Blob|CanvasGradient|CanvasPattern|DOMError|File|FileError|MediaError|MediaKeyError|Navigator|NavigatorUserMediaError|PositionError|SQLError|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedString|SVGAnimatedTransformList"
},

JSBool: {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true
},

JSNull: {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  }
},

JavaScriptObject: {"": "Interceptor;",
  get$hashCode: function(_) {
    return 0;
  }
},

PlainJavaScriptObject: {"": "JavaScriptObject;"},

UnknownJavaScriptObject: {"": "JavaScriptObject;"},

JSArray: {"": "List/Interceptor;",
  removeAt$1: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index < 0 || index >= receiver.length)
      throw H.wrapException(P.RangeError$value(index));
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("removeAt"));
    return receiver.splice(index, 1)[0];
  },
  forEach$1: function(receiver, f) {
    return H.IterableMixinWorkaround_forEach(receiver, f);
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  toString$0: function(receiver) {
    return H.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
  },
  get$iterator: function(receiver) {
    return new H.ListIterator(receiver, receiver.length, 0, null);
  },
  get$hashCode: function(receiver) {
    return H.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    if (!!receiver.immutable$list)
      H.throwExpression(P.UnsupportedError$("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    receiver[index] = value;
  },
  $isList: true,
  $asList: null,
  $isList: true,
  $isEfficientLength: true
},

JSMutableArray: {"": "JSArray;", $isJSMutableArray: true,
  $asJSArray: function() {
    return [null];
  },
  $asList: function() {
    return [null];
  }
},

JSFixedArray: {"": "JSMutableArray;"},

JSExtendableArray: {"": "JSMutableArray;", $isJSExtendableArray: true},

JSNumber: {"": "num/Interceptor;",
  compareTo$1: function(receiver, b) {
    var bIsNegative;
    if (typeof b !== "number")
      throw H.wrapException(new P.ArgumentError(b));
    if (receiver < b)
      return -1;
    else if (receiver > b)
      return 1;
    else if (receiver === b) {
      if (receiver === 0) {
        bIsNegative = this.get$isNegative(b);
        if (this.get$isNegative(receiver) === bIsNegative)
          return 0;
        if (this.get$isNegative(receiver))
          return -1;
        return 1;
      }
      return 0;
    } else if (isNaN(receiver)) {
      if (this.get$isNaN(b))
        return 0;
      return 1;
    } else
      return -1;
  },
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  remainder$1: function(receiver, b) {
    return receiver % b;
  },
  toInt$0: function(receiver) {
    var t1;
    if (receiver >= -2147483648 && receiver <= 2147483647)
      return receiver | 0;
    if (isFinite(receiver)) {
      t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
      return t1 + 0;
    }
    throw H.wrapException(P.UnsupportedError$('' + receiver));
  },
  toDouble$0: function(receiver) {
    return receiver;
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $negate: function(receiver) {
    return -receiver;
  },
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver + other;
  },
  $mod: function(receiver, other) {
    var result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  $tdiv: function(receiver, other) {
    if ((receiver | 0) === receiver && (other | 0) === other && 0 !== other && -1 !== other)
      return receiver / other | 0;
    else
      return this._slowTdiv$1(receiver, other);
  },
  _slowTdiv$1: function(receiver, other) {
    return this.toInt$0(receiver / other);
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw H.wrapException(P.ArgumentError$(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return receiver >> other >>> 0;
  },
  $lt: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(P.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver > other;
  },
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(P.ArgumentError$(other));
    return receiver >= other;
  },
  $isnum: true,
  static: {
"": "JSNumber__MIN_INT32,JSNumber__MAX_INT32",
}

},

JSInt: {"": "int/JSNumber;", $isdouble: true, $isnum: true, $isint: true},

JSDouble: {"": "double/JSNumber;", $isdouble: true, $isnum: true},

JSString: {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(P.ArgumentError$(index));
    if (index < 0)
      throw H.wrapException(P.RangeError$value(index));
    if (index >= receiver.length)
      throw H.wrapException(P.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    if (endIndex == null)
      endIndex = receiver.length;
    if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
      H.throwExpression(P.ArgumentError$(endIndex));
    if (startIndex < 0)
      throw H.wrapException(P.RangeError$value(startIndex));
    if (typeof endIndex !== "number")
      throw H.iae(endIndex);
    if (startIndex > endIndex)
      throw H.wrapException(P.RangeError$value(startIndex));
    if (endIndex > receiver.length)
      throw H.wrapException(P.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  compareTo$1: function(receiver, other) {
    var t1;
    if (typeof other !== "string")
      throw H.wrapException(new P.ArgumentError(other));
    if (receiver === other)
      t1 = 0;
    else
      t1 = receiver < other ? -1 : 1;
    return t1;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var t1, hash, i;
    for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    return receiver[index];
  },
  $isString: true
}}],
["_isolate_helper", "dart:_isolate_helper", , H, {
_callInIsolate: function(isolate, $function) {
  var result = isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
  return result;
},

startRootIsolate: function(entry) {
  var rootContext;
  $globalState = H._Manager$(entry);
  if ($globalState.isWorker === true)
    return;
  rootContext = H._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  if (!!entry.$is_args1)
    rootContext.eval$1(new H.startRootIsolate_closure(entry));
  else if (!!entry.$is_args2)
    rootContext.eval$1(new H.startRootIsolate_closure0(entry));
  else
    rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
},

IsolateNatives_computeThisScript: function() {
  var currentScript = init.currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  if (typeof version == "function" && typeof os == "object" && "system" in os)
    return H.IsolateNatives_computeThisScriptD8();
  if (typeof version == "function" && typeof system == "function")
    return thisFilename();
  return;
},

IsolateNatives_computeThisScriptD8: function() {
  var stack, matches;
  stack = new Error().stack;
  if (stack == null) {
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
    if (stack == null)
      throw H.wrapException(P.UnsupportedError$("No stack trace"));
  }
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw H.wrapException(P.UnsupportedError$("Cannot extract URI from \"" + stack + "\""));
},

IsolateNatives__processWorkerMessage: function(sender, e) {
  var msg, t1, functionName, entryPoint, args, message, isSpawnUri, replyTo, context, t2;
  msg = H._deserializeMessage(e.data);
  t1 = J.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $globalState.currentManagerId = t1.$index(msg, "id");
      functionName = t1.$index(msg, "functionName");
      entryPoint = functionName == null ? $globalState.entry : init.globalFunctions[functionName];
      args = t1.$index(msg, "args");
      message = H._deserializeMessage(t1.$index(msg, "msg"));
      isSpawnUri = t1.$index(msg, "isSpawnUri");
      replyTo = H._deserializeMessage(t1.$index(msg, "replyTo"));
      context = H._IsolateContext$();
      $globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, replyTo), "worker-start"));
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      H.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "args"), t1.$index(msg, "msg"), t1.$index(msg, "isSpawnUri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        t1.$index(msg, "port").send$1(t1.$index(msg, "msg"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      t1 = $globalState.managers;
      t2 = $.get$IsolateNatives_workerIds();
      t1.remove$1(t1, t2.$index(t2, sender));
      sender.terminate();
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      H.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        t1 = $globalState.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "print", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      } else
        P.print(t1.$index(msg, "msg"));
      break;
    case "error":
      throw H.wrapException(t1.$index(msg, "msg"));
    default:
  }
},

IsolateNatives__log: function(msg) {
  var trace, t1, t2, exception;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t2 = H._serializeMessage(H.fillLiteralMap(["command", "log", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    t1.toString;
    self.postMessage(t2);
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      H.unwrapException(exception);
      trace = new H._StackTrace(exception, null);
      throw H.wrapException(P.Exception_Exception(trace));
    }

},

IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, replyTo) {
  var t1;
  H.Primitives_initializeStatics($globalState.currentContext.id);
  $.lazyPort = H.ReceivePortImpl$();
  t1 = $.lazyPort;
  t1.toString;
  replyTo.send$1(["spawned", new H._NativeJsSendPort(t1, $globalState.currentContext.id)]);
  if (isSpawnUri !== true)
    topLevel.call$1(message);
  else {
    t1 = J.getInterceptor(topLevel);
    if (!!t1.$is_args2)
      topLevel.call$2(args, message);
    else if (!!t1.$is_args1)
      topLevel.call$1(args);
    else
      topLevel.call$0();
  }
},

IsolateNatives__spawnWorker: function(functionName, uri, args, message, isSpawnUri, replyPort) {
  var worker, t1, workerId;
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.onmessage = function(e) { H.IsolateNatives__processWorkerMessage$closure.call$2(worker, e); };
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  t1 = $.get$IsolateNatives_workerIds();
  t1.$indexSet(t1, worker, workerId);
  t1 = $globalState.managers;
  t1.$indexSet(t1, workerId, worker);
  worker.postMessage(H._serializeMessage(H.fillLiteralMap(["command", "start", "id", workerId, "replyTo", H._serializeMessage(replyPort), "args", args, "msg", H._serializeMessage(message), "isSpawnUri", isSpawnUri, "functionName", functionName], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))));
},

_waitForPendingPorts: function(message, callback) {
  var finder = H._PendingSendPortFinder$();
  finder.traverse$1(message);
  P.Future_wait(finder.ports).then$1(new H._waitForPendingPorts_closure(callback));
},

_serializeMessage: function(message) {
  var t1;
  if ($globalState.supportsWorkers === true) {
    t1 = new H._JsSerializer(0, new H._MessageTraverserVisitedMap());
    t1._visited = new H._JsVisitedMap(null);
    return t1.traverse$1(message);
  } else {
    t1 = new H._JsCopier(new H._MessageTraverserVisitedMap());
    t1._visited = new H._JsVisitedMap(null);
    return t1.traverse$1(message);
  }
},

_deserializeMessage: function(message) {
  if ($globalState.supportsWorkers === true)
    return new H._JsDeserializer(null).deserialize$1(message);
  else
    return message;
},

_MessageTraverser_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

_Deserializer_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

startRootIsolate_closure: {"": "Closure;entry_0",
  call$0: function() {
    this.entry_0.call$1([]);
  }
},

startRootIsolate_closure0: {"": "Closure;entry_1",
  call$0: function() {
    this.entry_1.call$2([], null);
  }
},

_Manager: {"": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    t2 = $.get$globalWorker();
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { H.IsolateNatives__processWorkerMessage$closure.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  _Manager$1: function(entry) {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = new H._EventLoop(P.ListQueue$(null, H._IsolateEvent), 0);
    this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H._IsolateContext);
    this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, null);
    if (this.isWorker === true) {
      this.mainManager = new H._MainManagerStub();
      this._nativeInitWorkerMessageHandler$0();
    }
  },
  static: {
_Manager$: function(entry) {
  var t1 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
  t1._Manager$1(entry);
  return t1;
}}

},

_IsolateContext: {"": "Object;id,ports,isolateStatics<",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null)
        $ = old.get$isolateStatics();
    }
    return result;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(_, portId, port) {
    var t1;
    if (this.ports.containsKey$1(portId))
      throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    if (this.ports._collection$_length === 0) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $globalState;
    t2 = t1.nextIsolateId;
    t1.nextIsolateId = t2 + 1;
    this.id = t2;
    this.ports = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, P.ReceivePort);
    this.isolateStatics = new Isolate();
  },
  static: {
_IsolateContext$: function() {
  var t1 = new H._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
}}

},

_EventLoop: {"": "Object;events,activeTimerCount",
  dequeue$0: function() {
    var t1 = this.events;
    if (t1._head === t1._tail)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null && $globalState.isolates.containsKey$1($globalState.rootContext.id) && $globalState.fromCommandLine === true && $globalState.rootContext.ports._collection$_length === 0)
      throw H.wrapException(P.Exception_Exception("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event, t1, t2;
    $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      t1 = $globalState;
      if (t1.isWorker === true && t1.isolates._collection$_length === 0 && t1.topEventLoop.activeTimerCount === 0) {
        t1 = t1.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "close"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      }
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new H._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1, t2;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        trace = new H._StackTrace(exception, null);
        t1 = $globalState.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      }

  }
},

_EventLoop__runHelper_next: {"": "Closure;this_0",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    P.Timer_Timer(C.Duration_0, this);
  }
},

_IsolateEvent: {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
},

_MainManagerStub: {"": "Object;"},

IsolateNatives__processWorkerMessage_closure: {"": "Closure;entryPoint_0,args_1,message_2,isSpawnUri_3,replyTo_4",
  call$0: function() {
    H.IsolateNatives__startIsolate(this.entryPoint_0, this.args_1, this.message_2, this.isSpawnUri_3, this.replyTo_4);
  }
},

_BaseSendPort: {"": "Object;", $isSendPort: true},

_NativeJsSendPort: {"": "_BaseSendPort;_receivePort,_isolateId",
  send$1: function(message) {
    H._waitForPendingPorts(message, new H._NativeJsSendPort_send_closure(this, message));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$is_NativeJsSendPort && J.$eq(this._receivePort, other._receivePort);
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
},

_NativeJsSendPort_send_closure: {"": "Closure;this_1,message_2",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = $globalState.isolates;
    t3 = this.this_1;
    t4 = t3._isolateId;
    isolate = t2.$index(t2, t4);
    if (isolate == null)
      return;
    if ((t3._receivePort.get$_controller()._state & 4) !== 0)
      return;
    shouldSerialize = $globalState.currentContext != null && $globalState.currentContext.id !== t4;
    msg = this.message_2;
    t1.msg_0 = msg;
    if (shouldSerialize)
      t1.msg_0 = H._serializeMessage(t1.msg_0);
    t2 = $globalState.topEventLoop;
    t4 = "receive " + H.S(msg);
    t2.events._add$1(new H._IsolateEvent(isolate, new H._NativeJsSendPort_send__closure(t1, t3, shouldSerialize), t4));
  }
},

_NativeJsSendPort_send__closure: {"": "Closure;box_0,this_3,shouldSerialize_4",
  call$0: function() {
    var t1, t2;
    t1 = this.this_3._receivePort;
    if ((t1.get$_controller()._state & 4) === 0) {
      if (this.shouldSerialize_4) {
        t2 = this.box_0;
        t2.msg_0 = H._deserializeMessage(t2.msg_0);
      }
      t1 = t1._controller;
      t2 = this.box_0.msg_0;
      if (t1._state >= 4)
        H.throwExpression(t1._badEventState$0());
      t1._async$_add$1(t2);
    }
  }
},

_WorkerSendPort: {"": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
  send$1: function(message) {
    H._waitForPendingPorts(message, new H._WorkerSendPort_send_closure(this, message));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$is_WorkerSendPort && J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = this._workerId;
    if (typeof t1 !== "number")
      throw t1.$shl();
    t2 = this._isolateId;
    if (typeof t2 !== "number")
      throw t2.$shl();
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw H.iae(t3);
    return (t1 << 16 ^ t2 << 8 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
},

_WorkerSendPort_send_closure: {"": "Closure;this_0,message_1",
  call$0: function() {
    var t1, workerMessage, t2, manager;
    t1 = this.this_0;
    workerMessage = H._serializeMessage(H.fillLiteralMap(["command", "message", "port", t1, "msg", this.message_1], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    if ($globalState.isWorker === true) {
      $globalState.mainManager.toString;
      self.postMessage(workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1._workerId);
      if (manager != null)
        manager.postMessage(workerMessage);
    }
  }
},

ReceivePortImpl: {"": "Stream;_id<,_controller<",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1 = this._controller;
    t1.toString;
    t1 = new P._ControllerStream(t1);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
  },
  close$0: function(_) {
    var t1 = this._controller;
    if ((t1._state & 4) !== 0)
      return;
    t1.close$0(t1);
    $globalState.currentContext.unregister$1(this._id);
  },
  get$close: function(_receiver) {
    return new H.BoundClosure$i0(this, H.ReceivePortImpl.prototype.close$0, _receiver, "close$0");
  },
  ReceivePortImpl$0: function() {
    this._controller = P.StreamController_StreamController(this.get$close(this), null, null, null, true, null);
    var t1 = $globalState.currentContext;
    t1.register$2(t1, this._id, this);
  },
  static: {
"": "ReceivePortImpl__nextFreeId",
ReceivePortImpl$: function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = t1 + 1;
  t1 = new H.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
}}

},

_waitForPendingPorts_closure: {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  $is_args1: true
},

_PendingSendPortFinder: {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, list, true);
    J.forEach$1$ax(list, this.get$_dispatch());
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, map, true);
    t1 = map.get$values(map);
    t1.forEach$1(t1, this.get$_dispatch());
  },
  visitSendPort$1: function(port) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = new H._JsVisitedMap(null);
  },
  static: {
_PendingSendPortFinder$: function() {
  var t1 = new H._PendingSendPortFinder([], new H._MessageTraverserVisitedMap());
  t1._PendingSendPortFinder$0();
  return t1;
}}

},

_JsSerializer: {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (!!x.$is_NativeJsSendPort)
      return ["sendport", $globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
    if (!!x.$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    throw H.wrapException("Illegal underlying port " + H.S(x));
  }
},

_JsCopier: {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (!!x.$is_NativeJsSendPort)
      return new H._NativeJsSendPort(x._receivePort, x._isolateId);
    if (!!x.$is_WorkerSendPort)
      return new H._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
    throw H.wrapException("Illegal underlying port " + H.S(x));
  }
},

_JsDeserializer: {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = J.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if (J.$eq(managerId, $globalState.currentManagerId)) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return new H._NativeJsSendPort(receivePort, isolateId);
    } else
      return new H._WorkerSendPort(managerId, receivePortId, isolateId);
  }
},

_JsVisitedMap: {"": "Object;tagged",
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  $indexSet: function(_, object, info) {
    this.tagged.push(object);
    object.__MessageTraverser__attached_info__ = info;
  },
  reset$0: function(_) {
    this.tagged = P.List_List(null, null);
  },
  cleanup$0: function() {
    var $length, i, t1;
    for ($length = this.tagged.length, i = 0; i < $length; ++i) {
      t1 = this.tagged;
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t1[i].__MessageTraverser__attached_info__ = null;
    }
    this.tagged = null;
  }
},

_MessageTraverserVisitedMap: {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
},

_MessageTraverser: {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    if (H._MessageTraverser_isPrimitive(x))
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    var t1;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    t1 = J.getInterceptor(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!t1.$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isSendPort)
      return this.visitSendPort$1(x);
    return this.visitObject$1(x);
  },
  get$_dispatch: function() {
    return new H.BoundClosure$1(this, H._MessageTraverser.prototype._dispatch$1, null, "_dispatch$1");
  },
  visitObject$1: function(x) {
    throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
  }
},

_Copier: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, t2, i;
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    t1 = J.getInterceptor$asx(list);
    len = t1.get$length(list);
    copy = P.List_List(len, null);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    for (i = 0; i < len; ++i) {
      t2 = this._dispatch$1(t1.$index(list, i));
      if (i >= len)
        throw H.ioore(copy, i);
      copy[i] = t2;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    map.forEach$1(map, new H._Copier_visitMap_closure(t1, this));
    return t1.copy_0;
  }
},

_Copier_visitMap_closure: {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1 = this.this_1;
    J.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
  },
  $is_args2: true
},

_Serializer: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id, keys;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    t1 = map.get$keys();
    keys = this._serializeList$1(P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0)));
    t1 = map.get$values(map);
    return ["map", id, keys, this._serializeList$1(P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0)))];
  },
  _serializeList$1: function(list) {
    var t1, len, result, i, t2;
    t1 = J.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = P.List_List(len, null);
    for (i = 0; i < len; ++i) {
      t2 = this._dispatch$1(t1.$index(list, i));
      if (i >= len)
        throw H.ioore(result, i);
      result[i] = t2;
    }
    return result;
  }
},

_Deserializer: {"": "Object;",
  deserialize$1: function(x) {
    if (H._Deserializer_isPrimitive(x))
      return x;
    this._deserialized = P.HashMap_HashMap(null, null, null, null, null);
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    var t1, id;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    t1 = J.getInterceptor$asx(x);
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = J.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = J.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    if (typeof len !== "number")
      throw H.iae(len);
    i = 0;
    for (; i < len; ++i)
      t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t1 = J.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    values = t1.$index(x, 3);
    t1 = J.getInterceptor$asx(keys);
    len = t1.get$length(keys);
    if (typeof len !== "number")
      throw H.iae(len);
    t2 = J.getInterceptor$asx(values);
    i = 0;
    for (; i < len; ++i)
      result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
    return result;
  },
  deserializeObject$1: function(x) {
    throw H.wrapException("Unexpected serialized object");
  }
},

TimerImpl: {"": "Object;_once,_inEventLoop,_handle",
  TimerImpl$2: function(milliseconds, callback) {
    var t1, t2;
    if (milliseconds === 0)
      t1 = $.get$globalThis().setTimeout == null || $globalState.isWorker === true;
    else
      t1 = false;
    if (t1) {
      this._handle = 1;
      t1 = $globalState.topEventLoop;
      t2 = $globalState.currentContext;
      t1.events._add$1(new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
      this._inEventLoop = true;
    } else if ($.get$globalThis().setTimeout != null) {
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
    } else
      throw H.wrapException(P.UnsupportedError$("Timer greater than 0."));
  },
  static: {
TimerImpl$: function(milliseconds, callback) {
  var t1 = new H.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
}}

},

TimerImpl_internalCallback: {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.this_0._handle = null;
    this.callback_1.call$0();
  }
},

TimerImpl_internalCallback0: {"": "Closure;this_2,callback_3",
  call$0: function() {
    this.this_2._handle = null;
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
    this.callback_3.call$0();
  }
}}],
["_js_helper", "dart:_js_helper", , H, {
isJsIndexable: function(object, record) {
  var result, t1;
  if (record != null) {
    result = record.x;
    if (result != null)
      return result;
  }
  t1 = J.getInterceptor(object);
  return typeof object === "object" && object !== null && !!t1.$isJavaScriptIndexingBehavior;
},

S: function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = J.toString$0(value);
  if (typeof res !== "string")
    throw H.wrapException(P.ArgumentError$(value));
  return res;
},

Primitives_initializeStatics: function(id) {
  $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + H.S(id));
  $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + H.S(id));
},

Primitives_objectHashCode: function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = Math.random() * 0x3fffffff | 0;
    object.$identityHash = hash;
  }
  return hash;
},

Primitives_objectTypeName: function(object) {
  var $name, decompiled;
  $name = C.JS_CONST_86y(J.getInterceptor(object));
  if ($name === "Object") {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  if (J.getInterceptor$s($name).codeUnitAt$1($name, 0) === 36)
    $name = C.JSString_methods.substring$1($name, 1);
  return $name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null);
},

Primitives_objectToString: function(object) {
  return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
},

Primitives_newFixedList: function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
},

Primitives__fromCharCodeApply: function(array) {
  var end, t1, result, i, subarray, t2;
  end = array.length;
  for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result += String.fromCharCode.apply(null, subarray);
  }
  return result;
},

Primitives_stringFromCodePoints: function(codePoints) {
  var a, t1, i;
  a = [];
  a.$builtinTypeInfo = [J.JSInt];
  for (t1 = new H.ListIterator(codePoints, codePoints.length, 0, null); t1.moveNext$0();) {
    i = t1._current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw H.wrapException(P.ArgumentError$(i));
    if (i <= 65535)
      a.push(i);
    else if (i <= 1114111) {
      a.push(55296 + (C.JSInt_methods.$shr(i - 65536, 10) & 1023));
      a.push(56320 + (i & 1023));
    } else
      throw H.wrapException(P.ArgumentError$(i));
  }
  return H.Primitives__fromCharCodeApply(a);
},

Primitives_stringFromCharCodes: function(charCodes) {
  var t1, i;
  for (t1 = new H.ListIterator(charCodes, charCodes.length, 0, null); t1.moveNext$0();) {
    i = t1._current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw H.wrapException(P.ArgumentError$(i));
    if (i < 0)
      throw H.wrapException(P.ArgumentError$(i));
    if (i > 65535)
      return H.Primitives_stringFromCodePoints(charCodes);
  }
  return H.Primitives__fromCharCodeApply(charCodes);
},

Primitives_getProperty: function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw H.wrapException(new P.ArgumentError(object));
  return object[key];
},

Primitives_setProperty: function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw H.wrapException(new P.ArgumentError(object));
  object[key] = value;
},

iae: function(argument) {
  throw H.wrapException(P.ArgumentError$(argument));
},

ioore: function(receiver, index) {
  if (receiver == null)
    J.get$length$asx(receiver);
  if (typeof index !== "number" || Math.floor(index) !== index)
    H.iae(index);
  throw H.wrapException(P.RangeError$value(index));
},

wrapException: function(ex) {
  var wrapper;
  if (ex == null)
    ex = new P.NullThrownError();
  wrapper = new Error();
  wrapper.dartException = ex;
  if ("defineProperty" in Object) {
    Object.defineProperty(wrapper, "message", { get: H.toStringWrapper$closure.call$0 });
    wrapper.name = "";
  } else
    wrapper.toString = H.toStringWrapper$closure.call$0;
  return wrapper;
},

toStringWrapper: function() {
  return J.toString$0(this.dartException);
},

throwExpression: function(ex) {
  throw H.wrapException(ex);
},

unwrapException: function(ex) {
  var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
  t1 = new H.unwrapException_saveStackTrace(ex);
  if (ex == null)
    return;
  if (typeof ex !== "object")
    return ex;
  if ("dartException" in ex)
    return t1.call$1(ex.dartException);
  else if (!("message" in ex))
    return ex;
  message = ex.message;
  if ("number" in ex && typeof ex.number == "number") {
    number = ex.number;
    ieErrorCode = number & 65535;
    if ((C.JSInt_methods.$shr(number, 16) & 8191) === 10)
      switch (ieErrorCode) {
        case 438:
          return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
        case 445:
        case 5007:
          t2 = H.S(message) + " (Error " + ieErrorCode + ")";
          return t1.call$1(new H.NullError(t2, null));
        default:
      }
  }
  if (ex instanceof TypeError) {
    t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
    t3 = $.get$TypeErrorDecoder_notClosurePattern();
    t4 = $.get$TypeErrorDecoder_nullCallPattern();
    nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
    t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
    t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
    t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
    $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
    t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
    t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
    match = t2.matchTypeError$1(message);
    if (match != null)
      return t1.call$1(H.JsNoSuchMethodError$(message, match));
    else {
      match = t3.matchTypeError$1(message);
      if (match != null) {
        match.method = "call";
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      } else {
        match = t4.matchTypeError$1(message);
        if (match == null) {
          match = nullLiteralCall.matchTypeError$1(message);
          if (match == null) {
            match = t5.matchTypeError$1(message);
            if (match == null) {
              match = t6.matchTypeError$1(message);
              if (match == null) {
                match = t7.matchTypeError$1(message);
                if (match == null) {
                  match = nullLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = t8.matchTypeError$1(message);
                    if (match == null) {
                      match = t9.matchTypeError$1(message);
                      t2 = match != null;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
        } else
          t2 = true;
        if (t2) {
          t2 = match == null ? null : match.method;
          return t1.call$1(new H.NullError(message, t2));
        }
      }
    }
    t2 = typeof message === "string" ? message : "";
    return t1.call$1(new H.UnknownJsTypeError(t2));
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return new P.StackOverflowError();
    return t1.call$1(new P.ArgumentError(null));
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return new P.StackOverflowError();
  return ex;
},

objectHashCode: function(object) {
  if (object == null || typeof object != 'object')
    return J.get$hashCode$(object);
  else
    return H.Primitives_objectHashCode(object);
},

fillLiteralMap: function(keyValuePairs, result) {
  var $length, index, index0, index1;
  $length = keyValuePairs.length;
  for (index = 0; index < $length; index = index1) {
    index0 = index + 1;
    index1 = index0 + 1;
    result.$indexSet(result, keyValuePairs[index], keyValuePairs[index0]);
  }
  return result;
},

invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
  var t1 = J.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0))
    return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
  else if (t1.$eq(numberOfArguments, 1))
    return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2))
    return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
  else if (t1.$eq(numberOfArguments, 3))
    return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
  else if (t1.$eq(numberOfArguments, 4))
    return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
  else
    throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
},

convertDartClosureToJS: function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function(closure, arity, context, invoke) {  return function(a1, a2, a3, a4) {     return invoke(closure, context, arity, a1, a2, a3, a4);  };})(closure,arity,$globalState.currentContext,H.invokeClosure$closure.call$7);
  closure.$identity = $function;
  return $function;
},

throwCyclicInit: function(staticName) {
  throw H.wrapException(P.CyclicInitializationError$("Cyclic initialization for static " + H.S(staticName)));
},

createRuntimeType: function($name) {
  return new H.TypeImpl($name, null);
},

setRuntimeTypeInfo: function(target, typeInfo) {
  if (target != null)
    target.$builtinTypeInfo = typeInfo;
  return target;
},

getRuntimeTypeInfo: function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
},

getRuntimeTypeArguments: function(target, substitutionName) {
  return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
},

getRuntimeTypeArgument: function(target, substitutionName, index) {
  var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
  return $arguments == null ? null : $arguments[index];
},

getRuntimeTypeAsString: function(runtimeType, onTypeVariable) {
  return runtimeType[0].builtin$cls + H.joinArguments(runtimeType, 1, onTypeVariable);
},

runtimeTypeToString: function(type, onTypeVariable) {
  if (type == null)
    return "dynamic";
  else if (typeof type === "object" && type !== null && type.constructor === Array)
    return H.getRuntimeTypeAsString(type, onTypeVariable);
  else if (typeof type == "function")
    return type.builtin$cls;
  else if (typeof type === "number" && Math.floor(type) === type)
    return C.JSInt_methods.toString$0(type);
  else
    return;
},

joinArguments: function(types, startIndex, onTypeVariable) {
  var buffer, index, firstArgument, allDynamic, argument, str;
  if (types == null)
    return "";
  buffer = P.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    str = H.runtimeTypeToString(argument, onTypeVariable);
    str = typeof str === "string" ? str : H.S(str);
    buffer._contents = buffer._contents + str;
  }
  return allDynamic ? "" : "<" + H.S(buffer) + ">";
},

substitute: function(substitution, $arguments) {
  if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
    $arguments = substitution;
  else if (typeof substitution == "function") {
    substitution = H.invokeOn(substitution, null, $arguments);
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function")
      $arguments = H.invokeOn(substitution, null, $arguments);
  }
  return $arguments;
},

computeSignature: function(signature, context, contextName) {
  return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
},

invokeOn: function($function, receiver, $arguments) {
  return $function.apply(receiver, $arguments);
},

toStringForNativeObject: function(obj) {
  var t1 = $.getTagFunction;
  return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
},

hashCodeForNativeObject: function(object) {
  return H.Primitives_objectHashCode(object);
},

defineProperty: function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
},

lookupAndCacheInterceptor: function(obj) {
  var tag, record, interceptor, interceptorClass, mark, t1;
  tag = $.getTagFunction.call$1(obj);
  record = $.dispatchRecordsForInstanceTags[tag];
  if (record != null) {
    Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return record.i;
  }
  interceptor = $.interceptorsForUncacheableTags[tag];
  if (interceptor != null)
    return interceptor;
  interceptorClass = init.interceptorsByTag[tag];
  if (interceptorClass == null) {
    tag = $.alternateTagFunction.call$2(obj, tag);
    if (tag != null) {
      record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
    }
  }
  if (interceptorClass == null)
    return;
  interceptor = interceptorClass.prototype;
  mark = tag[0];
  if (mark === "!") {
    record = H.makeLeafDispatchRecord(interceptor);
    $.dispatchRecordsForInstanceTags[tag] = record;
    Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return record.i;
  }
  if (mark === "~") {
    $.interceptorsForUncacheableTags[tag] = interceptor;
    return interceptor;
  }
  if (mark === "-") {
    t1 = H.makeLeafDispatchRecord(interceptor);
    Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
    return t1.i;
  }
  if (mark === "+")
    return H.patchInteriorProto(obj, interceptor);
  if (mark === "*")
    throw H.wrapException(P.UnimplementedError$(tag));
  if (init.leafTags[tag] === true) {
    t1 = H.makeLeafDispatchRecord(interceptor);
    Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
    return t1.i;
  } else
    return H.patchInteriorProto(obj, interceptor);
},

patchInteriorProto: function(obj, interceptor) {
  var proto, record;
  proto = Object.getPrototypeOf(obj);
  record = J.makeDispatchRecord(interceptor, proto, null, null);
  Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
  return interceptor;
},

makeLeafDispatchRecord: function(interceptor) {
  return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
},

makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
  var interceptor = interceptorClass.prototype;
  if (init.leafTags[tag] === true)
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  else
    return J.makeDispatchRecord(interceptor, proto, null, null);
},

initNativeDispatch: function() {
  if (true === $.initNativeDispatchFlag)
    return;
  $.initNativeDispatchFlag = true;
  H.initNativeDispatchContinue();
},

initNativeDispatchContinue: function() {
  var map, tags, i, tag, proto, record, interceptorClass;
  $.dispatchRecordsForInstanceTags = Object.create(null);
  $.interceptorsForUncacheableTags = Object.create(null);
  H.initHooks();
  map = init.interceptorsByTag;
  tags = Object.getOwnPropertyNames(map);
  if (typeof window != "undefined") {
    window;
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      proto = $.prototypeForTagFunction.call$1(tag);
      if (proto != null) {
        record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
        if (record != null)
          Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      }
    }
  }
  for (i = 0; i < tags.length; ++i) {
    tag = tags[i];
    if (/^[A-Za-z_]/.test(tag)) {
      interceptorClass = map[tag];
      map["!" + tag] = interceptorClass;
      map["~" + tag] = interceptorClass;
      map["-" + tag] = interceptorClass;
      map["+" + tag] = interceptorClass;
      map["*" + tag] = interceptorClass;
    }
  }
},

initHooks: function() {
  var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
  hooks = C.JS_CONST_TtD();
  hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_rD3, H.applyHooksTransformer(C.JS_CONST_6qb, H.applyHooksTransformer(C.JS_CONST_Cbr(C.JS_CONST_86y), hooks))))));
  if (typeof dartNativeDispatchHooksTransformer != "undefined") {
    transformers = dartNativeDispatchHooksTransformer;
    if (typeof transformers == "function")
      transformers = [transformers];
    if (transformers.constructor == Array)
      for (i = 0; i < transformers.length; ++i) {
        transformer = transformers[i];
        if (typeof transformer == "function")
          hooks = transformer(hooks) || hooks;
      }
  }
  getTag = hooks.getTag;
  getUnknownTag = hooks.getUnknownTag;
  prototypeForTag = hooks.prototypeForTag;
  $.getTagFunction = new H.initHooks_closure(getTag);
  $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
  $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
},

applyHooksTransformer: function(transformer, hooks) {
  return transformer(hooks) || hooks;
},

TypeErrorDecoder: {"": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
  matchTypeError$1: function(message) {
    var match, result, t1;
    match = new RegExp(this._pattern).exec(message);
    if (match == null)
      return;
    result = {};
    t1 = this._arguments;
    if (t1 !== -1)
      result.arguments = match[t1 + 1];
    t1 = this._argumentsExpr;
    if (t1 !== -1)
      result.argumentsExpr = match[t1 + 1];
    t1 = this._expr;
    if (t1 !== -1)
      result.expr = match[t1 + 1];
    t1 = this._method;
    if (t1 !== -1)
      result.method = match[t1 + 1];
    t1 = this._receiver;
    if (t1 !== -1)
      result.receiver = match[t1 + 1];
    return result;
  },
  static: {
"": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern",
TypeErrorDecoder_extractPattern: function(message) {
  var match, $arguments, argumentsExpr, expr, method, receiver;
  message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
  match = message.match(/\\\$[a-zA-Z]+\\\$/g);
  if (match == null)
    match = [];
  $arguments = match.indexOf("\\$arguments\\$");
  argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
  expr = match.indexOf("\\$expr\\$");
  method = match.indexOf("\\$method\\$");
  receiver = match.indexOf("\\$receiver\\$");
  return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
},

TypeErrorDecoder_provokeCallErrorOn: function(expression) {
  return function($expr$) {
  var $argumentsExpr$ = '$arguments$'
  try {
    $expr$.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokeCallErrorOnNull: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    null.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokeCallErrorOnUndefined: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    (void 0).$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
  return function($expr$) {
  try {
    $expr$.$method$;
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokePropertyErrorOnNull: function() {
  return function() {
  try {
    null.$method$;
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOnUndefined: function() {
  return function() {
  try {
    (void 0).$method$;
  } catch (e) {
    return e.message;
  }
}();
}}

},

NullError: {"": "Error;_message,_method",
  toString$0: function(_) {
    var t1 = this._method;
    if (t1 == null)
      return "NullError: " + H.S(this._message);
    return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
  },
  $isError: true
},

JsNoSuchMethodError: {"": "Error;_message,_method,_receiver",
  toString$0: function(_) {
    var t1, t2;
    t1 = this._method;
    if (t1 == null)
      return "NoSuchMethodError: " + H.S(this._message);
    t2 = this._receiver;
    if (t2 == null)
      return "NoSuchMethodError: Cannot call \"" + t1 + "\" (" + H.S(this._message) + ")";
    return "NoSuchMethodError: Cannot call \"" + t1 + "\" on \"" + t2 + "\" (" + H.S(this._message) + ")";
  },
  $isError: true,
  static: {
JsNoSuchMethodError$: function(_message, match) {
  var t1, t2;
  t1 = match == null;
  t2 = t1 ? null : match.method;
  t1 = t1 ? null : match.receiver;
  return new H.JsNoSuchMethodError(_message, t2, t1);
}}

},

UnknownJsTypeError: {"": "Error;_message",
  toString$0: function(_) {
    var t1 = this._message;
    return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
  }
},

unwrapException_saveStackTrace: {"": "Closure;ex_0",
  call$1: function(error) {
    var t1 = J.getInterceptor(error);
    if (typeof error === "object" && error !== null && !!t1.$isError)
      if (error.$thrownJsError == null)
        error.$thrownJsError = this.ex_0;
    return error;
  },
  $is_args1: true
},

_StackTrace: {"": "Object;_exception,_trace",
  toString$0: function(_) {
    var t1, trace;
    t1 = this._trace;
    if (t1 != null)
      return t1;
    t1 = this._exception;
    trace = typeof t1 === "object" ? t1.stack : null;
    t1 = trace == null ? "" : trace;
    this._trace = t1;
    return t1;
  }
},

invokeClosure_closure: {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  }
},

invokeClosure_closure0: {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
},

invokeClosure_closure1: {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
},

invokeClosure_closure2: {"": "Closure;closure_6,arg1_7,arg2_8,arg3_9",
  call$0: function() {
    return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
  }
},

invokeClosure_closure3: {"": "Closure;closure_10,arg1_11,arg2_12,arg3_13,arg4_14",
  call$0: function() {
    return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
  }
},

Closure: {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  }
},

BoundClosure: {"": "Closure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      return true;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isBoundClosure)
      return false;
    return this._self === other._self && this.__js_helper$_target === other.__js_helper$_target && this._receiver === other._receiver;
  },
  get$hashCode: function(_) {
    var t1, receiverHashCode;
    t1 = this._receiver;
    if (t1 == null)
      receiverHashCode = H.Primitives_objectHashCode(this._self);
    else
      receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
    return (receiverHashCode ^ H.Primitives_objectHashCode(this.__js_helper$_target)) >>> 0;
  },
  $isBoundClosure: true
},

TypeImpl: {"": "Object;_typeName,_unmangledName",
  toString$0: function(_) {
    var t1, unmangledName, unmangledName0;
    t1 = this._unmangledName;
    if (t1 != null)
      return t1;
    unmangledName = this._typeName;
    unmangledName0 = H.unmangleGlobalNameIfPreservedAnyways(unmangledName);
    unmangledName = unmangledName0 == null ? unmangledName : unmangledName0;
    this._unmangledName = unmangledName;
    return unmangledName;
  },
  get$hashCode: function(_) {
    return J.get$hashCode$(this._typeName);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$isTypeImpl && J.$eq(this._typeName, other._typeName);
  },
  $isTypeImpl: true
},

initHooks_closure: {"": "Closure;getTag_0",
  call$1: function(o) {
    return this.getTag_0(o);
  },
  $is_args1: true
},

initHooks_closure0: {"": "Closure;getUnknownTag_1",
  call$2: function(o, tag) {
    return this.getUnknownTag_1(o, tag);
  },
  $is_args2: true
},

initHooks_closure1: {"": "Closure;prototypeForTag_2",
  call$1: function(tag) {
    return this.prototypeForTag_2(tag);
  },
  $is_args1: true
}}],
["", "canvas_lines.dart", , Z, {
init: function() {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, i, particle, line;
  t1 = window.innerWidth;
  if (typeof t1 !== "number")
    throw t1.$tdiv();
  $.windowHalfX = C.JSInt_methods.$tdiv(t1, 2);
  t1 = window.innerHeight;
  if (typeof t1 !== "number")
    throw t1.$tdiv();
  $.windowHalfY = C.JSInt_methods.$tdiv(t1, 2);
  $.container = W._ElementFactoryProvider_createElement_tag("div", null);
  t1 = document.body;
  t1.toString;
  new W._ChildNodeListLazy(t1)._this.appendChild($.container);
  t1 = window.innerWidth;
  t2 = window.innerHeight;
  if (typeof t1 !== "number")
    throw t1.$div();
  if (typeof t2 !== "number")
    throw H.iae(t2);
  t3 = new Float32Array(16);
  t3.$dartCachedLength = t3.length;
  t3 = new T.Matrix4(t3);
  t3.setIdentity$0();
  t4 = new Float32Array(16);
  t4.$dartCachedLength = t4.length;
  t4 = new T.Matrix4(t4);
  t4.setIdentity$0();
  t5 = new Float32Array(16);
  t5.$dartCachedLength = t5.length;
  t5 = new T.Matrix4(t5);
  t5.setIdentity$0();
  t6 = $.Object3DCount;
  $.Object3DCount = t6 + 1;
  t7 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  t8 = new Float32Array(3);
  t8.$dartCachedLength = t8.length;
  t8 = new T.Vector3(t8);
  t8.setValues$3(0, 1, 0);
  t9 = new Float32Array(3);
  t9.$dartCachedLength = t9.length;
  t9 = new T.Vector3(t9);
  t9.setValues$3(0, 0, 0);
  t10 = new Float32Array(3);
  t10.$dartCachedLength = t10.length;
  t10 = new T.Vector3(t10);
  t10.setValues$3(0, 0, 0);
  t11 = new Float32Array(3);
  t11.$dartCachedLength = t11.length;
  t11 = new T.Vector3(t11);
  t11.setValues$3(1, 1, 1);
  t12 = new Float32Array(16);
  t12.$dartCachedLength = t12.length;
  t12 = new T.Matrix4(t12);
  t12.setIdentity$0();
  t13 = new Float32Array(16);
  t13.$dartCachedLength = t13.length;
  t13 = new T.Matrix4(t13);
  t13.setIdentity$0();
  t14 = new Float32Array(16);
  t14.$dartCachedLength = t14.length;
  t14 = new T.Matrix4(t14);
  t14.setIdentity$0();
  t15 = T.Quaternion$identity();
  t16 = new Float32Array(3);
  t16.$dartCachedLength = t16.length;
  t16 = new S.PerspectiveCamera(75, t1 / t2, null, null, null, null, null, null, t3, t4, t5, 1, 10000, t6, "", t7, null, [], t8, t9, t10, t11, "XYZ", null, null, null, true, null, t12, t13, t14, true, true, t15, false, 0, 1, true, false, false, true, new T.Vector3(t16), null, null);
  t16.updateProjectionMatrix$0();
  $.camera = t16;
  $.camera.position.storage[2] = 100;
  $.scene = S.Scene$();
  t16 = $.scene;
  t16.add$1(t16, $.camera);
  $.renderer = S.CanvasRenderer$(null);
  $.renderer.setSize$2(window.innerWidth, window.innerHeight);
  J.get$nodes$x($.container)._this.appendChild($.renderer.domElement);
  $.material = S.ParticleCanvasMaterial$(0, 205, 100, 204, 1, 16777215, true, true, "", 1, false, false, 0, 0, new Z.init_closure(6.283185307179586), 0, false, true);
  $.geometry = S.Geometry$();
  for (i = 0; i < 100; ++i) {
    t1 = $.material;
    t2 = $.Object3DCount;
    $.Object3DCount = t2 + 1;
    t3 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t4 = new Float32Array(3);
    t4.$dartCachedLength = t4.length;
    t4 = new T.Vector3(t4);
    t5 = t4.storage;
    t5[0] = 0;
    t5[1] = 1;
    t5[2] = 0;
    t5 = new Float32Array(3);
    t5.$dartCachedLength = t5.length;
    t5 = new T.Vector3(t5);
    t6 = t5.storage;
    t6[0] = 0;
    t6[1] = 0;
    t6[2] = 0;
    t6 = new Float32Array(3);
    t6.$dartCachedLength = t6.length;
    t6 = new T.Vector3(t6);
    t7 = t6.storage;
    t7[0] = 0;
    t7[1] = 0;
    t7[2] = 0;
    t7 = new Float32Array(3);
    t7.$dartCachedLength = t7.length;
    t7 = new T.Vector3(t7);
    t8 = t7.storage;
    t8[0] = 1;
    t8[1] = 1;
    t8[2] = 1;
    t8 = new Float32Array(16);
    t8.$dartCachedLength = t8.length;
    t8 = new T.Matrix4(t8);
    t8.setIdentity$0();
    t9 = new Float32Array(16);
    t9.$dartCachedLength = t9.length;
    t9 = new T.Matrix4(t9);
    t9.setIdentity$0();
    t10 = new Float32Array(16);
    t10.$dartCachedLength = t10.length;
    t10 = new T.Matrix4(t10);
    t10.setIdentity$0();
    t11 = new Float32Array(4);
    t11.$dartCachedLength = t11.length;
    t11 = new T.Quaternion(t11);
    t11.storage[3] = 1;
    t12 = new Float32Array(3);
    t12.$dartCachedLength = t12.length;
    particle = new S.Particle(t1, t2, "", t3, null, [], t4, t5, t6, t7, "XYZ", null, null, null, true, null, t8, t9, t10, true, true, t11, false, 0, 1, true, false, false, true, new T.Vector3(t12), null, null);
    t12 = particle.position;
    t11 = t12.storage;
    t11[0] = Math.random() * 2 - 1;
    t11[1] = Math.random() * 2 - 1;
    t11[2] = Math.random() * 2 - 1;
    t12.normalize$0();
    t12.scale$1(t12, Math.random() * 10 + 450);
    t11 = particle.scale.storage;
    t11[0] = 5;
    t11[1] = 5;
    t11 = $.scene;
    t11.add$1(t11, particle);
    $.geometry.vertices.push(t12);
  }
  t1 = $.geometry;
  t2 = S.Color$(16777215);
  t3 = $.MaterialCount;
  $.MaterialCount = t3 + 1;
  line = S.Line$(t1, new S.LineBasicMaterial(t2, 1, "round", "round", true, false, "", t3, 0, 0.5, 1, 204, 205, 100, 0, false, 0, 0, false, true, true, false, true, true, null), 0);
  t3 = $.scene;
  t3.add$1(t3, line);
  t3 = new W._EventStream(document, C.EventStreamProvider_mousemove._eventType, false);
  H.setRuntimeTypeInfo(t3, [null]);
  t2 = new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(Z.onDocumentMouseMove$closure), t3._useCapture);
  H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t3, "_EventStream", 0)]);
  t2._tryResume$0();
  t2 = new W._EventStream(document, C.EventStreamProvider_touchstart._eventType, false);
  H.setRuntimeTypeInfo(t2, [null]);
  t3 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(Z.onDocumentTouchStart$closure), t2._useCapture);
  H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
  t3._tryResume$0();
  t3 = new W._EventStream(document, C.EventStreamProvider_touchmove._eventType, false);
  H.setRuntimeTypeInfo(t3, [null]);
  t2 = new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(Z.onDocumentTouchMove$closure), t3._useCapture);
  H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t3, "_EventStream", 0)]);
  t2._tryResume$0();
},

onDocumentMouseMove: function($event) {
  var t1, t2, t3;
  t1 = J.getInterceptor$x($event);
  t2 = t1.get$client($event);
  t2 = t2.get$x(t2);
  t3 = $.windowHalfX;
  if (typeof t2 !== "number")
    throw t2.$sub();
  $.mouseX = t2 - t3;
  t1 = t1.get$client($event);
  t1 = t1.get$y(t1);
  t3 = $.windowHalfY;
  if (typeof t1 !== "number")
    throw t1.$sub();
  $.mouseY = t1 - t3;
},

onDocumentTouchStart: function($event) {
  var t1, t2;
  if (J.get$touches$x($event).length > 1) {
    $event.preventDefault();
    t1 = $event.touches;
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1 = t1[0];
    t1 = new P.Point(t1.pageX, t1.pageY);
    H.setRuntimeTypeInfo(t1, [null]);
    t1 = t1.x;
    t2 = $.windowHalfX;
    if (typeof t1 !== "number")
      throw t1.$sub();
    $.mouseX = t1 - t2;
    t2 = $event.touches;
    if (0 >= t2.length)
      throw H.ioore(t2, 0);
    t2 = t2[0];
    t2 = new P.Point(t2.pageX, t2.pageY);
    H.setRuntimeTypeInfo(t2, [null]);
    t2 = t2.y;
    t1 = $.windowHalfY;
    if (typeof t2 !== "number")
      throw t2.$sub();
    $.mouseY = t2 - t1;
  }
},

onDocumentTouchMove: function($event) {
  var t1, t2;
  if (J.get$touches$x($event).length === 1) {
    $event.preventDefault();
    t1 = $event.touches;
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1 = t1[0];
    t1 = new P.Point(t1.pageX, t1.pageY);
    H.setRuntimeTypeInfo(t1, [null]);
    t1 = t1.x;
    t2 = $.windowHalfX;
    if (typeof t1 !== "number")
      throw t1.$sub();
    $.mouseX = t1 - t2;
    t2 = $event.touches;
    if (0 >= t2.length)
      throw H.ioore(t2, 0);
    t2 = t2[0];
    t2 = new P.Point(t2.pageX, t2.pageY);
    H.setRuntimeTypeInfo(t2, [null]);
    t2 = t2.y;
    t1 = $.windowHalfY;
    if (typeof t2 !== "number")
      throw t2.$sub();
    $.mouseY = t2 - t1;
  }
},

animate: function(time) {
  var t1 = window;
  C.Window_methods._ensureRequestAnimationFrame$0(t1);
  C.Window_methods._requestAnimationFrame$1(t1, W._wrapZone(Z.animate$closure));
  Z.render();
},

render: function() {
  var t1, t2, t3;
  t1 = $.camera;
  t2 = t1.position.storage;
  t3 = t2[0];
  t2[0] = t3 + ($.mouseX - t3) * 0.05;
  t3 = t2[1];
  t2[1] = t3 + (-$.mouseY + 200 - t3) * 0.05;
  t1.lookAt$1($.scene.position);
  $.renderer.render$2($.scene, $.camera);
},

main: function() {
  Z.init();
  var t1 = window;
  C.Window_methods._ensureRequestAnimationFrame$0(t1);
  C.Window_methods._requestAnimationFrame$1(t1, W._wrapZone(Z.animate$closure));
  Z.render();
},

init_closure: {"": "Closure;Tau_0",
  call$1: function(context) {
    J.beginPath$0$x(context);
    context.arc(0, 0, 1, 0, this.Tau_0, false);
    context.closePath();
    context.fill();
  },
  $is_args1: true
}},
1],
["dart._collection.dev", "dart:_collection-dev", , H, {
Arrays_copy: function(src, srcStart, dst, dstStart, count) {
  var i, j, t1;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j) {
      if (i < 0 || i >= src.length)
        throw H.ioore(src, i);
      C.JSArray_methods.$indexSet(dst, j, src[i]);
    }
  else
    for (t1 = srcStart + count, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
      if (i < 0 || i >= src.length)
        throw H.ioore(src, i);
      C.JSArray_methods.$indexSet(dst, j, src[i]);
    }
},

Arrays_indexOf: function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw H.ioore(a, i);
    if (J.$eq(a[i], element))
      return i;
  }
  return -1;
},

IterableMixinWorkaround_forEach: function(iterable, f) {
  var t1;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
    f.call$1(t1._current);
},

IterableMixinWorkaround_fold: function(iterable, initialValue, combine) {
  var t1;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
    initialValue = combine.call$2(initialValue, t1._current);
  return initialValue;
},

IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
  var result, i, t1;
  for (i = 0; i < $.get$IterableMixinWorkaround__toStringList().length; ++i) {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (i >= t1.length)
      throw H.ioore(t1, i);
    if (t1[i] === iterable)
      return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
  }
  result = P.StringBuffer$("");
  try {
    $.get$IterableMixinWorkaround__toStringList().push(iterable);
    result.write$1(leftDelimiter);
    result.writeAll$2(iterable, ", ");
    result.write$1(rightDelimiter);
  } finally {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1.pop();
  }
  return result.get$_contents();
},

IterableMixinWorkaround_sortList: function(list, compare) {
  H.Sort__doSort(list, 0, list.length - 1, compare);
},

IterableMixinWorkaround__rangeCheck: function(list, start, end) {
  if (start < 0 || start > list.length)
    throw H.wrapException(P.RangeError$range(start, 0, list.length));
  if (end < start || end > list.length)
    throw H.wrapException(P.RangeError$range(end, start, list.length));
},

IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
  var $length;
  H.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = end - start;
  if ($length === 0)
    return;
  if (skipCount < 0)
    throw H.wrapException(new P.ArgumentError(skipCount));
  if (skipCount + $length > from.length)
    throw H.wrapException(P.StateError$("Not enough elements"));
  H.Arrays_copy(from, skipCount, list, start, $length);
},

printToConsole: function(line) {
  if (typeof dartPrint == "function") {
    dartPrint(line);
    return;
  }
  if (typeof console == "object" && typeof console.log == "function") {
    console.log(line);
    return;
  }
  if (typeof window == "object")
    return;
  if (typeof print == "function") {
    print(line);
    return;
  }
  throw "Unable to print message: " + String(line);
},

Sort__doSort: function(a, left, right, compare) {
  if (right - left <= 32)
    H.Sort__insertionSort(a, left, right, compare);
  else
    H.Sort__dualPivotQuicksort(a, left, right, compare);
},

Sort__insertionSort: function(a, left, right, compare) {
  var i, t1, el, j, j0;
  for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
    el = t1.$index(a, i);
    j = i;
    while (true) {
      if (!(j > left && J.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
        break;
      j0 = j - 1;
      t1.$indexSet(a, j, t1.$index(a, j0));
      j = j0;
    }
    t1.$indexSet(a, j, el);
  }
},

Sort__dualPivotQuicksort: function(a, left, right, compare) {
  var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t2, great0, less0, pivots_are_equal;
  sixth = C.JSInt_methods.$tdiv(right - left + 1, 6);
  index1 = left + sixth;
  index5 = right - sixth;
  index3 = C.JSInt_methods.$tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  t1 = J.getInterceptor$asx(a);
  el1 = t1.$index(a, index1);
  el2 = t1.$index(a, index2);
  el3 = t1.$index(a, index3);
  el4 = t1.$index(a, index4);
  el5 = t1.$index(a, index5);
  if (J.$gt$n(compare.call$2(el1, el2), 0)) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if (J.$gt$n(compare.call$2(el1, el3), 0)) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el1, el4), 0)) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el3, el4), 0)) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el5), 0)) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1.$indexSet(a, index1, el1);
  t1.$indexSet(a, index3, el3);
  t1.$indexSet(a, index5, el5);
  t1.$indexSet(a, index2, t1.$index(a, left));
  t1.$indexSet(a, index4, t1.$index(a, right));
  less = left + 1;
  great = right - 1;
  if (J.$eq(compare.call$2(el2, el4), 0)) {
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      comp = compare.call$2(ak, el2);
      t2 = J.getInterceptor(comp);
      if (t2.$eq(comp, 0))
        continue;
      if (t2.$lt(comp, 0)) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else
        for (; true;) {
          comp = compare.call$2(t1.$index(a, great), el2);
          t2 = J.getInterceptor$n(comp);
          if (t2.$gt(comp, 0)) {
            --great;
            continue;
          } else {
            great0 = great - 1;
            if (t2.$lt(comp, 0)) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
              break;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              break;
            }
          }
        }
    }
    pivots_are_equal = true;
  } else {
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      if (J.$lt$n(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else if (J.$gt$n(compare.call$2(ak, el4), 0))
        for (; true;)
          if (J.$gt$n(compare.call$2(t1.$index(a, great), el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            great0 = great - 1;
            if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
    }
    pivots_are_equal = false;
  }
  t2 = less - 1;
  t1.$indexSet(a, left, t1.$index(a, t2));
  t1.$indexSet(a, t2, el2);
  t2 = great + 1;
  t1.$indexSet(a, right, t1.$index(a, t2));
  t1.$indexSet(a, t2, el4);
  H.Sort__doSort(a, left, less - 2, compare);
  H.Sort__doSort(a, great + 2, right, compare);
  if (pivots_are_equal)
    return;
  if (less < index1 && great > index5) {
    for (; J.$eq(compare.call$2(t1.$index(a, less), el2), 0);)
      ++less;
    for (; J.$eq(compare.call$2(t1.$index(a, great), el4), 0);)
      --great;
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      if (J.$eq(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else if (J.$eq(compare.call$2(ak, el4), 0))
        for (; true;)
          if (J.$eq(compare.call$2(t1.$index(a, great), el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            great0 = great - 1;
            if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
    }
    H.Sort__doSort(a, less, great, compare);
  } else
    H.Sort__doSort(a, less, great, compare);
},

Symbol_getName: function(symbol) {
  return symbol.get$_name();
},

ListIterator: {"": "Object;_iterable,_length,_index,_current",
  get$current: function() {
    return this._current;
  },
  moveNext$0: function() {
    var t1, t2, $length, t3;
    t1 = this._iterable;
    t2 = J.getInterceptor$asx(t1);
    $length = t2.get$length(t1);
    if (this._length !== $length)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    t3 = this._index;
    if (t3 >= $length) {
      this._current = null;
      return false;
    }
    this._current = t2.elementAt$1(t1, t3);
    this._index = this._index + 1;
    return true;
  }
},

MappedIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    var t1 = this._iterable;
    t1 = t1.get$iterator(t1);
    t1 = new H.MappedIterator(null, t1, this._f);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "MappedIterable", 0), H.getRuntimeTypeArgument(this, "MappedIterable", 1)]);
    return t1;
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  $asIterableBase: function($S, $T) {
    return [$T];
  },
  static: {
MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
  var t1;
  if (!!iterable.$isEfficientLength) {
    t1 = new H.EfficientLengthMappedIterable(iterable, $function);
    H.setRuntimeTypeInfo(t1, [$S, $T]);
    return t1;
  }
  t1 = new H.MappedIterable(iterable, $function);
  H.setRuntimeTypeInfo(t1, [$S, $T]);
  return t1;
}}

},

EfficientLengthMappedIterable: {"": "MappedIterable;_iterable,_f", $asMappedIterable: null, $isEfficientLength: true},

MappedIterator: {"": "Iterator;_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0()) {
      this._current = this._f$1(t1.get$current());
      return true;
    }
    this._current = null;
    return false;
  },
  get$current: function() {
    return this._current;
  },
  $asIterator: function($S, $T) {
    return [$T];
  }
},

FixedLengthListMixin: {"": "Object;"}}],
["dart._js_names", "dart:_js_names", , H, {
unmangleGlobalNameIfPreservedAnyways: function($name) {
  return init.mangledGlobalNames[$name];
}}],
["dart.async", "dart:async", , P, {
_invokeErrorHandler: function(errorHandler, error, stackTrace) {
  var t1 = J.getInterceptor(errorHandler);
  if (!!t1.$is_args2)
    return errorHandler.call$2(error, stackTrace);
  else
    return errorHandler.call$1(error);
},

_registerErrorHandler: function(errorHandler, zone) {
  var t1 = J.getInterceptor(errorHandler);
  zone.toString;
  if (!!t1.$is_args2)
    return errorHandler;
  else
    return errorHandler;
},

Future_wait: function(futures) {
  var t1, t2, t3, future, pos, t4, t5, result, completer;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new P.Future_wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = new H.ListIterator(futures, futures.length, 0, null); t3.moveNext$0();) {
    future = t3._current;
    pos = t1.remaining_2;
    t1.remaining_2 = pos + 1;
    t4 = future.catchError$1(t2);
    t5 = $.Zone__current;
    t5.toString;
    result = new P._Future(0, t5, null, null, new P.Future_wait_closure(t1, pos), null, P._registerErrorHandler(null, t5), null);
    result.$builtinTypeInfo = [null];
    t4._addListener$1(result);
  }
  t2 = t1.remaining_2;
  if (t2 === 0)
    return P._Future$immediate(C.List_empty, null);
  t1.values_1 = P.List_List(t2, null);
  t2 = J.JSArray;
  completer = new P._AsyncCompleter(P._Future$(t2));
  H.setRuntimeTypeInfo(completer, [t2]);
  t1.completer_0 = completer;
  return t1.completer_0.future;
},

_asyncRunCallback: function() {
  var callback, t1, exception, milliseconds;
  for (; t1 = $.get$_asyncCallbacks(), t1._head !== t1._tail;) {
    callback = $.get$_asyncCallbacks().removeFirst$0();
    try {
      callback.call$0();
    } catch (exception) {
      H.unwrapException(exception);
      milliseconds = C.JSNumber_methods.$tdiv(C.Duration_0._duration, 1000);
      H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, P._asyncRunCallback$closure);
      throw exception;
    }

  }
  $._callbacksAreEnqueued = false;
},

_scheduleAsyncCallback: function(callback) {
  $.get$_asyncCallbacks()._add$1(callback);
  if (!$._callbacksAreEnqueued) {
    P._createTimer(C.Duration_0, P._asyncRunCallback$closure);
    $._callbacksAreEnqueued = true;
  }
},

scheduleMicrotask: function(callback) {
  var t1 = $.Zone__current;
  if (t1 === C.C__RootZone) {
    t1.toString;
    P._scheduleAsyncCallback(callback);
    return;
  }
  P._scheduleAsyncCallback(t1.bindCallback$2$runGuarded(callback, true));
},

StreamController_StreamController: function(onCancel, onListen, onPause, onResume, sync, $T) {
  var t1;
  if (sync) {
    t1 = new P._SyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null);
    H.setRuntimeTypeInfo(t1, [$T]);
  } else {
    t1 = new P._AsyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null);
    H.setRuntimeTypeInfo(t1, [$T]);
  }
  return t1;
},

_runGuarded: function(notificationHandler) {
  var result, e, s, t1, t2, exception;
  if (notificationHandler == null)
    return;
  try {
    result = notificationHandler.call$0();
    t1 = result;
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && !!t2.$isFuture)
      return result;
    return;
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    s = new H._StackTrace(exception, null);
    t1 = $.Zone__current;
    t1.toString;
    P._rootHandleUncaughtError(t1, null, t1, e, s);
  }

},

_nullDataHandler: function(value) {
},

_nullErrorHandler: function(error, stackTrace) {
  var t1 = $.Zone__current;
  t1.toString;
  P._rootHandleUncaughtError(t1, null, t1, error, stackTrace);
},

_nullDoneHandler: function() {
},

_runUserCode: function(userCode, onSuccess, onError) {
  var e, s, exception, t1;
  try {
    onSuccess.call$1(userCode.call$0());
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    s = new H._StackTrace(exception, null);
    onError.call$2(e, s);
  }

},

_cancelAndError: function(subscription, future, error, stackTrace) {
  var cancelFuture, t1;
  cancelFuture = subscription.cancel$0();
  t1 = J.getInterceptor(cancelFuture);
  if (typeof cancelFuture === "object" && cancelFuture !== null && !!t1.$isFuture)
    cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
  else
    future._completeError$2(error, stackTrace);
},

_cancelAndErrorClosure: function(subscription, future) {
  return new P._cancelAndErrorClosure_closure(subscription, future);
},

Timer_Timer: function(duration, callback) {
  var t1 = $.Zone__current;
  if (t1 === C.C__RootZone) {
    t1.toString;
    return P._createTimer(duration, callback);
  }
  return P._createTimer(duration, t1.bindCallback$2$runGuarded(callback, true));
},

_createTimer: function(duration, callback) {
  var milliseconds = C.JSNumber_methods.$tdiv(duration._duration, 1000);
  return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
},

_rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
  P._rootRun($self, null, $self, new P._rootHandleUncaughtError_closure(error, stackTrace));
},

_rootRun: function($self, $parent, zone, f) {
  var old, t1, t2;
  t1 = $.Zone__current;
  t2 = zone;
  if (t1 == null ? t2 == null : t1 === t2)
    return f.call$0();
  old = t1;
  try {
    $.Zone__current = zone;
    t1 = f.call$0();
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

_rootRunUnary: function($self, $parent, zone, f, arg) {
  var old, t1, t2;
  t1 = $.Zone__current;
  t2 = zone;
  if (t1 == null ? t2 == null : t1 === t2)
    return f.call$1(arg);
  old = t1;
  try {
    $.Zone__current = zone;
    t1 = f.call$1(arg);
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

_AsyncError: {"": "Object;error>,stackTrace<", $isError: true},

Future: {"": "Object;", $isFuture: true},

Future_wait_handleError: {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1.completer_0.completeError$1(error);
    }
    return;
  },
  $is_args1: true
},

Future_wait_closure: {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    t3 = this.pos_1;
    if (t3 < 0 || t3 >= t2.length)
      throw H.ioore(t2, t3);
    t2[t3] = value;
    t1.remaining_2 = t1.remaining_2 - 1;
    if (t1.remaining_2 === 0) {
      t2 = t1.completer_0;
      t1 = t1.values_1;
      t2 = t2.future;
      if (t2._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t2._asyncComplete$1(t1);
    }
  },
  $is_args1: true
},

_Completer: {"": "Object;"},

_AsyncCompleter: {"": "_Completer;future",
  completeError$2: function(error, stackTrace) {
    var t1;
    if (error == null)
      throw H.wrapException(new P.ArgumentError("Error must not be null"));
    t1 = this.future;
    if (t1._state !== 0)
      throw H.wrapException(P.StateError$("Future already completed"));
    t1._asyncCompleteError$2(error, stackTrace);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  },
  $as_Completer: null
},

_Future: {"": "Object;_state,_zone<,_resultOrListeners,_nextListener<,_onValueCallback,_errorTestCallback,_onErrorCallback,_whenCompleteActionCallback",
  get$_isComplete: function() {
    return this._state >= 4;
  },
  get$_hasError: function() {
    return this._state === 8;
  },
  set$_isChained: function(value) {
    if (value)
      this._state = 2;
    else
      this._state = 0;
  },
  get$_onValue: function() {
    return this._state === 2 ? null : this._onValueCallback;
  },
  _onValue$1: function(arg0) {
    return this.get$_onValue().call$1(arg0);
  },
  get$_whenCompleteAction: function() {
    return this._state === 2 ? null : this._whenCompleteActionCallback;
  },
  _whenCompleteAction$0: function() {
    return this.get$_whenCompleteAction().call$0();
  },
  then$2$onError: function(f, onError) {
    var result = P._Future$_then(f, onError, null);
    this._addListener$1(result);
    return result;
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(onError, test) {
    var result = P._Future$_catchError(onError, test, null);
    this._addListener$1(result);
    return result;
  },
  catchError$1: function(onError) {
    return this.catchError$2$test(onError, null);
  },
  whenComplete$1: function(action) {
    var result = P._Future$_whenComplete(action, H.getRuntimeTypeArgument(this, "_Future", 0));
    this._addListener$1(result);
    return result;
  },
  get$_value: function() {
    return this._resultOrListeners;
  },
  get$_error: function() {
    return this._resultOrListeners;
  },
  _setValue$1: function(value) {
    this._state = 4;
    this._resultOrListeners = value;
  },
  _setError$2: function(error, stackTrace) {
    this._state = 8;
    this._resultOrListeners = new P._AsyncError(error, stackTrace);
  },
  _addListener$1: function(listener) {
    if (this._state >= 4) {
      this._zone.toString;
      P._scheduleAsyncCallback(new P._Future__addListener_closure(this, listener));
    } else {
      listener._nextListener = this._resultOrListeners;
      this._resultOrListeners = listener;
    }
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current._nextListener = prev;
    }
    return prev;
  },
  _complete$1: function(value) {
    var t1, listeners;
    t1 = J.getInterceptor(value);
    if (typeof value === "object" && value !== null && !!t1.$isFuture) {
      P._Future__chainFutures(value, this);
      return;
    }
    listeners = this._removeListeners$0();
    this._setValue$1(value);
    P._Future__propagateToListeners(this, listeners);
  },
  _completeError$2: function(error, stackTrace) {
    var listeners = this._removeListeners$0();
    this._setError$2(error, stackTrace);
    P._Future__propagateToListeners(this, listeners);
  },
  get$_completeError: function() {
    return new P.BoundClosure$2(this, P._Future.prototype._completeError$2, null, "_completeError$2");
  },
  _asyncComplete$1: function(value) {
    if (this._state !== 0)
      H.throwExpression(P.StateError$("Future already completed"));
    this._state = 1;
    this._zone.toString;
    P._scheduleAsyncCallback(new P._Future__asyncComplete_closure(this, value));
  },
  _asyncCompleteError$2: function(error, stackTrace) {
    if (this._state !== 0)
      H.throwExpression(P.StateError$("Future already completed"));
    this._state = 1;
    this._zone.toString;
    P._scheduleAsyncCallback(new P._Future__asyncCompleteError_closure(this, error, stackTrace));
  },
  _async$_Future$immediate$1: function(value, $T) {
    this._asyncComplete$1(value);
  },
  $is_Future: true,
  $isFuture: true,
  static: {
"": "_Future__INCOMPLETE,_Future__PENDING_COMPLETE,_Future__CHAINED,_Future__VALUE,_Future__ERROR",
_Future$: function($T) {
  var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future$immediate: function(value, $T) {
  var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._async$_Future$immediate$1(value, $T);
  return t1;
},

_Future$_then: function(onValueCallback, onErrorCallback, $T) {
  var t1 = $.Zone__current;
  t1.toString;
  t1 = new P._Future(0, t1, null, null, onValueCallback, null, P._registerErrorHandler(onErrorCallback, t1), null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future$_catchError: function(onErrorCallback, errorTestCallback, $T) {
  var t1, t2;
  t1 = $.Zone__current;
  t2 = P._registerErrorHandler(onErrorCallback, t1);
  t1.toString;
  t2 = new P._Future(0, t1, null, null, null, errorTestCallback, t2, null);
  H.setRuntimeTypeInfo(t2, [$T]);
  return t2;
},

_Future$_whenComplete: function(whenCompleteActionCallback, $T) {
  var t1 = $.Zone__current;
  t1.toString;
  t1 = new P._Future(0, t1, null, null, null, null, null, whenCompleteActionCallback);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future__chainFutures: function(source, target) {
  var t1;
  target._state = 2;
  t1 = J.getInterceptor(source);
  if (typeof source === "object" && source !== null && !!t1.$is_Future)
    if (source._state >= 4)
      P._Future__propagateToListeners(source, target);
    else
      source._addListener$1(target);
  else
    source.then$2$onError(new P._Future__chainFutures_closure(target), new P._Future__chainFutures_closure0(target));
},

_Future__propagateMultipleListeners: function(source, listeners) {
  var listeners0;
  do {
    listeners0 = listeners.get$_nextListener();
    listeners._nextListener = null;
    P._Future__propagateToListeners(source, listeners);
    if (listeners0 != null) {
      listeners = listeners0;
      continue;
    } else
      break;
  } while (true);
},

_Future__propagateToListeners: function(source, listeners) {
  var t1, t2, hasError, asyncError, t3, t4, t5, chainSource, listeners0;
  t1 = {};
  t1.source_4 = source;
  for (; true;) {
    t2 = {};
    if (!t1.source_4.get$_isComplete())
      return;
    hasError = t1.source_4.get$_hasError();
    if (hasError && listeners == null) {
      t2 = t1.source_4;
      asyncError = t2.get$_error();
      t2 = t2._zone;
      t3 = J.get$error$x(asyncError);
      t4 = asyncError.get$stackTrace();
      t2.toString;
      P._rootHandleUncaughtError(t2, null, t2, t3, t4);
      return;
    }
    if (listeners == null)
      return;
    if (listeners._nextListener != null) {
      P._Future__propagateMultipleListeners(t1.source_4, listeners);
      return;
    }
    if (hasError) {
      t3 = t1.source_4.get$_zone();
      t4 = listeners._zone;
      t3.toString;
      t4.toString;
      t3 = t4 == null ? t3 != null : t4 !== t3;
    } else
      t3 = false;
    if (t3) {
      t2 = t1.source_4;
      asyncError = t2.get$_error();
      t2 = t2._zone;
      t3 = J.get$error$x(asyncError);
      t4 = asyncError.get$stackTrace();
      t2.toString;
      P._rootHandleUncaughtError(t2, null, t2, t3, t4);
      return;
    }
    t3 = $.Zone__current;
    t4 = listeners._zone;
    if (t3 == null ? t4 != null : t3 !== t4) {
      t4.toString;
      P._rootRun(t4, null, t4, new P._Future__propagateToListeners_closure(t1, listeners));
      return;
    }
    t2.listenerHasValue_1 = null;
    t2.listenerValueOrError_2 = null;
    t2.isPropagationAborted_3 = false;
    t4.toString;
    P._rootRun(t4, null, t4, new P._Future__propagateToListeners_closure0(t1, t2, hasError, listeners));
    if (t2.isPropagationAborted_3)
      return;
    t3 = t2.listenerHasValue_1 === true;
    if (t3) {
      t4 = t2.listenerValueOrError_2;
      t5 = J.getInterceptor(t4);
      t5 = typeof t4 === "object" && t4 !== null && !!t5.$isFuture;
      t4 = t5;
    } else
      t4 = false;
    if (t4) {
      chainSource = t2.listenerValueOrError_2;
      t2 = J.getInterceptor(chainSource);
      if (typeof chainSource === "object" && chainSource !== null && !!t2.$is_Future && chainSource._state >= 4) {
        listeners._state = 2;
        t1.source_4 = chainSource;
        continue;
      }
      P._Future__chainFutures(chainSource, listeners);
      return;
    }
    if (t3) {
      listeners0 = listeners._removeListeners$0();
      t2 = t2.listenerValueOrError_2;
      listeners._state = 4;
      listeners._resultOrListeners = t2;
    } else {
      listeners0 = listeners._removeListeners$0();
      asyncError = t2.listenerValueOrError_2;
      t2 = J.get$error$x(asyncError);
      t3 = asyncError.get$stackTrace();
      listeners._state = 8;
      listeners._resultOrListeners = new P._AsyncError(t2, t3);
    }
    t1.source_4 = listeners;
    listeners = listeners0;
  }
}}

},

_Future__addListener_closure: {"": "Closure;this_0,listener_1",
  call$0: function() {
    P._Future__propagateToListeners(this.this_0, this.listener_1);
  }
},

_Future__chainFutures_closure: {"": "Closure;target_0",
  call$1: function(value) {
    this.target_0._complete$1(value);
  },
  $is_args1: true
},

_Future__chainFutures_closure0: {"": "Closure;target_1",
  call$2: function(error, stackTrace) {
    this.target_1._completeError$2(error, stackTrace);
  },
  call$1: function(error) {
    return this.call$2(error, null);
  },
  $is_args2: true,
  $is_args1: true
},

_Future__asyncComplete_closure: {"": "Closure;this_0,value_1",
  call$0: function() {
    this.this_0._complete$1(this.value_1);
  }
},

_Future__asyncCompleteError_closure: {"": "Closure;this_0,error_1,stackTrace_2",
  call$0: function() {
    this.this_0._completeError$2(this.error_1, this.stackTrace_2);
  }
},

_Future__propagateToListeners_closure: {"": "Closure;box_2,listener_3",
  call$0: function() {
    P._Future__propagateToListeners(this.box_2.source_4, this.listener_3);
  }
},

_Future__propagateToListeners_closure0: {"": "Closure;box_2,box_1,hasError_4,listener_5",
  call$0: function() {
    var t1, value, asyncError, test, matchesTest, errorCallback, e, s, t2, t3, t4, exception;
    t1 = {};
    try {
      t2 = this.box_2;
      if (!this.hasError_4) {
        value = t2.source_4.get$_value();
        t2 = this.listener_5;
        t3 = t2._state === 2 ? null : t2._onValueCallback;
        t4 = this.box_1;
        if (t3 != null) {
          t4.listenerValueOrError_2 = t2._onValue$1(value);
          t4.listenerHasValue_1 = true;
        } else {
          t4.listenerValueOrError_2 = value;
          t4.listenerHasValue_1 = true;
        }
      } else {
        asyncError = t2.source_4.get$_error();
        t2 = this.listener_5;
        test = t2._state === 2 ? null : t2._errorTestCallback;
        matchesTest = true;
        if (test != null)
          matchesTest = test.call$1(J.get$error$x(asyncError));
        if (matchesTest === true)
          t3 = (t2._state === 2 ? null : t2._onErrorCallback) != null;
        else
          t3 = false;
        if (t3) {
          errorCallback = t2._state === 2 ? null : t2._onErrorCallback;
          t2 = this.box_1;
          t2.listenerValueOrError_2 = P._invokeErrorHandler(errorCallback, J.get$error$x(asyncError), asyncError.get$stackTrace());
          t2.listenerHasValue_1 = true;
        } else {
          t2 = this.box_1;
          t2.listenerValueOrError_2 = asyncError;
          t2.listenerHasValue_1 = false;
        }
      }
      t2 = this.listener_5;
      if ((t2._state === 2 ? null : t2._whenCompleteActionCallback) != null) {
        t1.completeResult_0 = t2._whenCompleteAction$0();
        t3 = t1.completeResult_0;
        t4 = J.getInterceptor(t3);
        if (typeof t3 === "object" && t3 !== null && !!t4.$isFuture) {
          t2.set$_isChained(true);
          t1.completeResult_0.then$2$onError(new P._Future__propagateToListeners__closure(this.box_2, t2), new P._Future__propagateToListeners__closure0(t1, t2));
          this.box_1.isPropagationAborted_3 = true;
        }
      }
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      if (this.hasError_4) {
        t1 = J.get$error$x(this.box_2.source_4.get$_error());
        t2 = e;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
      t2 = this.box_1;
      if (t1)
        t2.listenerValueOrError_2 = this.box_2.source_4.get$_error();
      else
        t2.listenerValueOrError_2 = new P._AsyncError(e, s);
      this.box_1.listenerHasValue_1 = false;
    }

  }
},

_Future__propagateToListeners__closure: {"": "Closure;box_2,listener_6",
  call$1: function(ignored) {
    P._Future__propagateToListeners(this.box_2.source_4, this.listener_6);
  },
  $is_args1: true
},

_Future__propagateToListeners__closure0: {"": "Closure;box_0,listener_7",
  call$2: function(error, stackTrace) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.completeResult_0;
    t3 = J.getInterceptor(t2);
    if (typeof t2 !== "object" || t2 === null || !t3.$is_Future) {
      t1.completeResult_0 = P._Future$(null);
      t1.completeResult_0._setError$2(error, stackTrace);
    }
    P._Future__propagateToListeners(t1.completeResult_0, this.listener_7);
  },
  call$1: function(error) {
    return this.call$2(error, null);
  },
  $is_args2: true,
  $is_args1: true
},

Stream: {"": "Object;",
  forEach$1: function(_, action) {
    var t1, future;
    t1 = {};
    future = P._Future$(null);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
    return future;
  },
  get$length: function(_) {
    var t1, future;
    t1 = {};
    future = P._Future$(J.JSInt);
    t1.count_0 = 0;
    this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
    return future;
  }
},

Stream_forEach_closure: {"": "Closure;box_0,this_1,action_2,future_3",
  call$1: function(element) {
    P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this.box_0.subscription_0, this.future_3));
  },
  $is_args1: true
},

Stream_forEach__closure: {"": "Closure;action_4,element_5",
  call$0: function() {
    return this.action_4.call$1(this.element_5);
  }
},

Stream_forEach__closure0: {"": "Closure;",
  call$1: function(_) {
  },
  $is_args1: true
},

Stream_forEach_closure0: {"": "Closure;future_6",
  call$0: function() {
    this.future_6._complete$1(null);
  }
},

Stream_length_closure: {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = t1.count_0 + 1;
  },
  $is_args1: true
},

Stream_length_closure0: {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._complete$1(this.box_0.count_0);
  }
},

StreamSubscription: {"": "Object;"},

_StreamController: {"": "Object;",
  get$_pendingEvents: function() {
    if ((this._state & 8) === 0)
      return this._varData;
    return this._varData.get$varData();
  },
  _ensurePendingEvents$0: function() {
    if ((this._state & 8) === 0) {
      if (this._varData == null)
        this._varData = new P._StreamImplEvents(null, null, 0);
      return this._varData;
    }
    var t1 = this._varData.get$varData();
    return t1;
  },
  get$_subscription: function() {
    if ((this._state & 8) !== 0)
      return this._varData.get$varData();
    return this._varData;
  },
  _badEventState$0: function() {
    if ((this._state & 4) !== 0)
      return new P.StateError("Cannot add event after closing");
    return new P.StateError("Cannot add event while adding a stream");
  },
  _ensureDoneFuture$0: function() {
    if (this._doneFuture == null) {
      this._doneFuture = P._Future$(null);
      if ((this._state & 2) !== 0)
        this._doneFuture._complete$1(null);
    }
    return this._doneFuture;
  },
  close$0: function(_) {
    var t1 = this._state;
    if ((t1 & 4) !== 0)
      return this._doneFuture;
    if (t1 >= 4)
      throw H.wrapException(this._badEventState$0());
    this._state = (t1 | 4) >>> 0;
    this._ensureDoneFuture$0();
    t1 = this._state;
    if ((t1 & 1) !== 0)
      this._sendDone$0();
    else if ((t1 & 3) === 0) {
      t1 = this._ensurePendingEvents$0();
      t1.add$1(t1, C.C__DelayedDone);
    }
    return this._doneFuture;
  },
  _async$_add$1: function(value) {
    var t1 = this._state;
    if ((t1 & 1) !== 0)
      this._sendData$1(value);
    else if ((t1 & 3) === 0) {
      t1 = this._ensurePendingEvents$0();
      t1.add$1(t1, new P._DelayedData(value, null));
    }
  },
  _subscribe$1: function(cancelOnError) {
    var t1, t2, subscription, pendingEvents, addState;
    if ((this._state & 3) !== 0)
      throw H.wrapException(P.StateError$("Stream has already been listened to."));
    t1 = $.Zone__current;
    t2 = cancelOnError ? 1 : 0;
    subscription = new P._ControllerSubscription(this, null, null, null, t1, t2, null, null);
    H.setRuntimeTypeInfo(subscription, [null]);
    pendingEvents = this.get$_pendingEvents();
    this._state = (this._state | 1) >>> 0;
    if ((this._state & 8) !== 0) {
      addState = this._varData;
      addState.set$varData(subscription);
      addState.resume$0();
    } else
      this._varData = subscription;
    subscription._setPendingEvents$1(pendingEvents);
    subscription._guardCallback$1(new P._StreamController__subscribe_closure(this));
    return subscription;
  },
  _recordCancel$1: function(subscription) {
    var t1, future;
    if ((this._state & 8) !== 0)
      this._varData.cancel$0();
    this._varData = null;
    this._state = (this._state & 4294967286 | 2) >>> 0;
    t1 = new P._StreamController__recordCancel_complete(this);
    future = P._runGuarded(this.get$_onCancel());
    if (future != null)
      future = future.whenComplete$1(t1);
    else
      t1.call$0();
    return future;
  }
},

_StreamController__subscribe_closure: {"": "Closure;this_0",
  call$0: function() {
    P._runGuarded(this.this_0.get$_onListen());
  }
},

_StreamController__recordCancel_complete: {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0._doneFuture;
    if (t1 != null && t1._state === 0)
      t1._asyncComplete$1(null);
  }
},

_SyncStreamControllerDispatch: {"": "Object;",
  _sendData$1: function(data) {
    this.get$_subscription()._async$_add$1(data);
  },
  _sendDone$0: function() {
    this.get$_subscription()._close$0();
  }
},

_AsyncStreamControllerDispatch: {"": "Object;",
  _sendData$1: function(data) {
    this.get$_subscription()._addPending$1(new P._DelayedData(data, null));
  },
  _sendDone$0: function() {
    this.get$_subscription()._addPending$1(C.C__DelayedDone);
  }
},

_AsyncStreamController: {"": "_StreamController__AsyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"},

_StreamController__AsyncStreamControllerDispatch: {"": "_StreamController+_AsyncStreamControllerDispatch;"},

_SyncStreamController: {"": "_StreamController__SyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"},

_StreamController__SyncStreamControllerDispatch: {"": "_StreamController+_SyncStreamControllerDispatch;"},

_ControllerStream: {"": "_StreamImpl;_async$_controller",
  _createSubscription$1: function(cancelOnError) {
    return this._async$_controller._subscribe$1(cancelOnError);
  },
  get$hashCode: function(_) {
    return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      return true;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$is_ControllerStream)
      return false;
    return other._async$_controller === this._async$_controller;
  },
  $is_ControllerStream: true,
  $as_StreamImpl: null
},

_ControllerSubscription: {"": "_BufferingStreamSubscription;_async$_controller,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
  _onCancel$0: function() {
    return this._async$_controller._recordCancel$1(this);
  },
  _onPause$0: function() {
    var t1, addState;
    t1 = this._async$_controller;
    if ((t1._state & 8) !== 0) {
      addState = t1._varData;
      addState.pause$0(addState);
    }
    P._runGuarded(t1.get$_onPause());
  },
  get$_onPause: function() {
    return new P.BoundClosure$0(this, P._ControllerSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
    var t1 = this._async$_controller;
    if ((t1._state & 8) !== 0)
      t1._varData.resume$0();
    P._runGuarded(t1.get$_onResume());
  },
  get$_onResume: function() {
    return new P.BoundClosure$0(this, P._ControllerSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  $as_BufferingStreamSubscription: null
},

_EventSink: {"": "Object;"},

_BufferingStreamSubscription: {"": "Object;_async$_onData,_onError,_onDone,_zone<,_state,_cancelFuture,_pending",
  _setPendingEvents$1: function(pendingEvents) {
    if (pendingEvents == null)
      return;
    this._pending = pendingEvents;
    if (!pendingEvents.get$isEmpty(pendingEvents)) {
      this._state = (this._state | 64) >>> 0;
      this._pending.schedule$1(this);
    }
  },
  onData$1: function(handleData) {
    $.Zone__current.toString;
    this._async$_onData = handleData;
  },
  onError$1: function(_, handleError) {
    this._onError = P._registerErrorHandler(handleError, $.Zone__current);
  },
  onDone$1: function(handleDone) {
    $.Zone__current.toString;
    this._onDone = handleDone;
  },
  pause$1: function(_, resumeSignal) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 + 128 | 4) >>> 0;
    if (t1 < 128 && this._pending != null)
      this._pending.cancelSchedule$0();
    if ((t1 & 4) === 0 && (this._state & 32) === 0)
      this._guardCallback$1(this.get$_onPause());
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  resume$0: function() {
    var t1, t2;
    t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 >= 128) {
      this._state = t1 - 128;
      t1 = this._state;
      if (t1 < 128) {
        if ((t1 & 64) !== 0) {
          t2 = this._pending;
          t2 = !t2.get$isEmpty(t2);
        } else
          t2 = false;
        if (t2)
          this._pending.schedule$1(this);
        else {
          this._state = (t1 & 4294967291) >>> 0;
          if ((this._state & 32) === 0)
            this._guardCallback$1(this.get$_onResume());
        }
      }
    }
  },
  cancel$0: function() {
    this._state = (this._state & 4294967279) >>> 0;
    if ((this._state & 8) !== 0)
      return this._cancelFuture;
    this._cancel$0();
    return this._cancelFuture;
  },
  get$_mayResumeInput: function() {
    if (this._state < 128) {
      var t1 = this._pending;
      t1 = t1 == null || t1.get$isEmpty(t1);
    } else
      t1 = false;
    return t1;
  },
  _cancel$0: function() {
    this._state = (this._state | 8) >>> 0;
    if ((this._state & 64) !== 0)
      this._pending.cancelSchedule$0();
    if ((this._state & 32) === 0)
      this._pending = null;
    this._cancelFuture = this._onCancel$0();
  },
  _async$_add$1: function(data) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 < 32)
      this._sendData$1(data);
    else
      this._addPending$1(new P._DelayedData(data, null));
  },
  _close$0: function() {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 | 2) >>> 0;
    if (this._state < 32)
      this._sendDone$0();
    else
      this._addPending$1(C.C__DelayedDone);
  },
  _onPause$0: function() {
  },
  get$_onPause: function() {
    return new P.BoundClosure$0(this, P._BufferingStreamSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
  },
  get$_onResume: function() {
    return new P.BoundClosure$0(this, P._BufferingStreamSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  _onCancel$0: function() {
  },
  _addPending$1: function($event) {
    var pending, t1;
    pending = this._pending;
    if (pending == null) {
      pending = new P._StreamImplEvents(null, null, 0);
      this._pending = pending;
    }
    pending.add$1(pending, $event);
    t1 = this._state;
    if ((t1 & 64) === 0) {
      this._state = (t1 | 64) >>> 0;
      if (this._state < 128)
        this._pending.schedule$1(this);
    }
  },
  _sendData$1: function(data) {
    var t1 = this._state;
    this._state = (t1 | 32) >>> 0;
    this._zone.runUnaryGuarded$2(this._async$_onData, data);
    this._state = (this._state & 4294967263) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  _sendDone$0: function() {
    var t1, t2, t3;
    t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
    this._cancel$0();
    this._state = (this._state | 16) >>> 0;
    t2 = this._cancelFuture;
    t3 = J.getInterceptor(t2);
    if (typeof t2 === "object" && t2 !== null && !!t3.$isFuture)
      t2.whenComplete$1(t1);
    else
      t1.call$0();
  },
  _guardCallback$1: function(callback) {
    var t1 = this._state;
    this._state = (t1 | 32) >>> 0;
    callback.call$0();
    this._state = (this._state & 4294967263) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  _checkState$1: function(wasInputPaused) {
    var t1, t2, isInputPaused;
    t1 = this._state;
    if ((t1 & 64) !== 0) {
      t2 = this._pending;
      t2 = t2.get$isEmpty(t2);
    } else
      t2 = false;
    if (t2) {
      this._state = (t1 & 4294967231) >>> 0;
      if ((this._state & 4) !== 0 && this.get$_mayResumeInput())
        this._state = (this._state & 4294967291) >>> 0;
    }
    for (; true; wasInputPaused = isInputPaused) {
      t1 = this._state;
      if ((t1 & 8) !== 0) {
        this._pending = null;
        return;
      }
      isInputPaused = (t1 & 4) !== 0;
      if (wasInputPaused === isInputPaused)
        break;
      this._state = (t1 ^ 32) >>> 0;
      if (isInputPaused)
        this._onPause$0();
      else
        this._onResume$0();
      this._state = (this._state & 4294967263) >>> 0;
    }
    t1 = this._state;
    if ((t1 & 64) !== 0 && t1 < 128)
      this._pending.schedule$1(this);
  },
  static: {
"": "_BufferingStreamSubscription__STATE_CANCEL_ON_ERROR,_BufferingStreamSubscription__STATE_CLOSED,_BufferingStreamSubscription__STATE_INPUT_PAUSED,_BufferingStreamSubscription__STATE_CANCELED,_BufferingStreamSubscription__STATE_WAIT_FOR_CANCEL,_BufferingStreamSubscription__STATE_IN_CALLBACK,_BufferingStreamSubscription__STATE_HAS_PENDING,_BufferingStreamSubscription__STATE_PAUSE_COUNT,_BufferingStreamSubscription__STATE_PAUSE_COUNT_SHIFT",
}

},

_BufferingStreamSubscription__sendDone_sendDone: {"": "Closure;this_0",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1._state;
    if ((t2 & 16) === 0)
      return;
    t1._state = (t2 | 42) >>> 0;
    t1._zone.runGuarded$1(t1._onDone);
    t1._state = (t1._state & 4294967263) >>> 0;
  }
},

_StreamImpl: {"": "Stream;",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var subscription = this._createSubscription$1(true === cancelOnError);
    subscription.onData$1(onData);
    subscription.onError$1(subscription, onError);
    subscription.onDone$1(onDone);
    return subscription;
  },
  _createSubscription$1: function(cancelOnError) {
    var t1, t2;
    t1 = $.Zone__current;
    t2 = cancelOnError ? 1 : 0;
    return new P._BufferingStreamSubscription(null, null, null, t1, t2, null, null);
  },
  $asStream: null
},

_DelayedEvent: {"": "Object;next@"},

_DelayedData: {"": "_DelayedEvent;value,next",
  perform$1: function(dispatch) {
    dispatch._sendData$1(this.value);
  }
},

_DelayedDone: {"": "Object;",
  perform$1: function(dispatch) {
    dispatch._sendDone$0();
  },
  get$next: function() {
    return;
  },
  set$next: function(_) {
    throw H.wrapException(P.StateError$("No events after a done."));
  }
},

_PendingEvents: {"": "Object;",
  schedule$1: function(dispatch) {
    var t1 = this._state;
    if (t1 === 1)
      return;
    if (t1 >= 1) {
      this._state = 1;
      return;
    }
    P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
    this._state = 1;
  },
  cancelSchedule$0: function() {
    if (this._state === 1)
      this._state = 3;
  }
},

_PendingEvents_schedule_closure: {"": "Closure;this_0,dispatch_1",
  call$0: function() {
    var t1, oldState;
    t1 = this.this_0;
    oldState = t1._state;
    t1._state = 0;
    if (oldState === 3)
      return;
    t1.handleNext$1(this.dispatch_1);
  }
},

_StreamImplEvents: {"": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
  get$isEmpty: function(_) {
    return this.lastPendingEvent == null;
  },
  add$1: function(_, $event) {
    var t1 = this.lastPendingEvent;
    if (t1 == null) {
      this.lastPendingEvent = $event;
      this.firstPendingEvent = $event;
    } else {
      t1.set$next($event);
      this.lastPendingEvent = $event;
    }
  },
  handleNext$1: function(dispatch) {
    var $event = this.firstPendingEvent;
    this.firstPendingEvent = $event.get$next();
    if (this.firstPendingEvent == null)
      this.lastPendingEvent = null;
    $event.perform$1(dispatch);
  }
},

_cancelAndError_closure: {"": "Closure;future_0,error_1,stackTrace_2",
  call$0: function() {
    return this.future_0._completeError$2(this.error_1, this.stackTrace_2);
  }
},

_cancelAndErrorClosure_closure: {"": "Closure;subscription_0,future_1",
  call$2: function(error, stackTrace) {
    return P._cancelAndError(this.subscription_0, this.future_1, error, stackTrace);
  },
  $is_args2: true
},

_BaseZone: {"": "Object;",
  runGuarded$1: function(f) {
    var e, s, t1, exception;
    try {
      t1 = this.run$1(f);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return this.handleUncaughtError$2(e, s);
    }

  },
  runUnaryGuarded$2: function(f, arg) {
    var e, s, t1, exception;
    try {
      t1 = this.runUnary$2(f, arg);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return this.handleUncaughtError$2(e, s);
    }

  },
  bindCallback$2$runGuarded: function(f, runGuarded) {
    var registered = this.registerCallback$1(f);
    if (runGuarded)
      return new P._BaseZone_bindCallback_closure(this, registered);
    else
      return new P._BaseZone_bindCallback_closure0(this, registered);
  },
  bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
    var registered = this.registerUnaryCallback$1(f);
    if (runGuarded)
      return new P._BaseZone_bindUnaryCallback_closure(this, registered);
    else
      return new P._BaseZone_bindUnaryCallback_closure0(this, registered);
  }
},

_BaseZone_bindCallback_closure: {"": "Closure;this_0,registered_1",
  call$0: function() {
    return this.this_0.runGuarded$1(this.registered_1);
  }
},

_BaseZone_bindCallback_closure0: {"": "Closure;this_2,registered_3",
  call$0: function() {
    return this.this_2.run$1(this.registered_3);
  }
},

_BaseZone_bindUnaryCallback_closure: {"": "Closure;this_0,registered_1",
  call$1: function(arg) {
    return this.this_0.runUnaryGuarded$2(this.registered_1, arg);
  },
  $is_args1: true
},

_BaseZone_bindUnaryCallback_closure0: {"": "Closure;this_2,registered_3",
  call$1: function(arg) {
    return this.this_2.runUnary$2(this.registered_3, arg);
  },
  $is_args1: true
},

_rootHandleUncaughtError_closure: {"": "Closure;error_0,stackTrace_1",
  call$0: function() {
    P._scheduleAsyncCallback(new P._rootHandleUncaughtError__closure(this.error_0, this.stackTrace_1));
  }
},

_rootHandleUncaughtError__closure: {"": "Closure;error_2,stackTrace_3",
  call$0: function() {
    var t1, trace, t2;
    t1 = this.error_2;
    P.print("Uncaught Error: " + H.S(t1));
    trace = this.stackTrace_3;
    if (trace == null) {
      t2 = J.getInterceptor(t1);
      t2 = typeof t1 === "object" && t1 !== null && !!t2.$isError;
    } else
      t2 = false;
    if (t2)
      trace = t1.get$stackTrace();
    if (trace != null)
      P.print("Stack Trace: \n" + H.S(trace) + "\n");
    throw H.wrapException(t1);
  }
},

_RootZone: {"": "_BaseZone;",
  $index: function(_, key) {
    return;
  },
  handleUncaughtError$2: function(error, stackTrace) {
    return P._rootHandleUncaughtError(this, null, this, error, stackTrace);
  },
  run$1: function(f) {
    return P._rootRun(this, null, this, f);
  },
  runUnary$2: function(f, arg) {
    return P._rootRunUnary(this, null, this, f, arg);
  },
  registerCallback$1: function(f) {
    return f;
  },
  registerUnaryCallback$1: function(f) {
    return f;
  }
}}],
["dart.collection", "dart:collection", , P, {
_HashSet__newHashTable: function() {
  var table = Object.create(null);
  table["<non-identifier-key>"] = table;
  delete table["<non-identifier-key>"];
  return table;
},

_defaultEquals: function(a, b) {
  return J.$eq(a, b);
},

_defaultHashCode: function(a) {
  return J.get$hashCode$(a);
},

HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
  var t1 = new P._HashMap(0, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$K, $V]);
  return t1;
},

HashSet_HashSet$identity: function($E) {
  var t1 = new P._IdentityHashSet(0, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$E]);
  return t1;
},

_iterableToString: function(iterable) {
  var parts, t1;
  t1 = $.get$_toStringVisiting();
  if (t1.contains$1(t1, iterable))
    return "(...)";
  t1 = $.get$_toStringVisiting();
  t1.add$1(t1, iterable);
  parts = [];
  try {
    P._iterablePartsToStrings(iterable, parts);
  } finally {
    t1 = $.get$_toStringVisiting();
    t1.remove$1(t1, iterable);
  }
  t1 = P.StringBuffer$("(");
  t1.writeAll$2(parts, ", ");
  t1.write$1(")");
  return t1._contents;
},

_iterablePartsToStrings: function(iterable, parts) {
  var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
  it = iterable.get$iterator(iterable);
  $length = 0;
  count = 0;
  while (true) {
    if (!($length < 80 || count < 3))
      break;
    if (!it.moveNext$0())
      return;
    next = H.S(it.get$current());
    parts.push(next);
    $length += next.length + 2;
    ++count;
  }
  if (!it.moveNext$0()) {
    if (count <= 5)
      return;
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    ultimateString = parts.pop();
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    penultimateString = parts.pop();
  } else {
    penultimate = it.get$current();
    ++count;
    if (!it.moveNext$0()) {
      if (count <= 4) {
        parts.push(H.S(penultimate));
        return;
      }
      ultimateString = H.S(penultimate);
      if (0 >= parts.length)
        throw H.ioore(parts, 0);
      penultimateString = parts.pop();
      $length += ultimateString.length + 2;
    } else {
      ultimate = it.get$current();
      ++count;
      for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
        ultimate0 = it.get$current();
        ++count;
        if (count > 100) {
          while (true) {
            if (!($length > 75 && count > 3))
              break;
            if (0 >= parts.length)
              throw H.ioore(parts, 0);
            $length -= parts.pop().length + 2;
            --count;
          }
          parts.push("...");
          return;
        }
      }
      penultimateString = H.S(penultimate);
      ultimateString = H.S(ultimate);
      $length += ultimateString.length + penultimateString.length + 4;
    }
  }
  if (count > parts.length + 2) {
    $length += 5;
    elision = "...";
  } else
    elision = null;
  while (true) {
    if (!($length > 80 && parts.length > 3))
      break;
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    $length -= parts.pop().length + 2;
    if (elision == null) {
      $length += 5;
      elision = "...";
    }
  }
  if (elision != null)
    parts.push(elision);
  parts.push(penultimateString);
  parts.push(ultimateString);
},

LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
  var t1 = new P._LinkedHashMap(0, null, null, null, null, null, 0);
  H.setRuntimeTypeInfo(t1, [$K, $V]);
  return t1;
},

Maps_mapToString: function(m) {
  var t1, result, i, t2;
  t1 = {};
  for (i = 0; i < $.get$Maps__toStringList().length; ++i) {
    t2 = $.get$Maps__toStringList();
    if (i >= t2.length)
      throw H.ioore(t2, i);
    if (t2[i] === m)
      return "{...}";
  }
  result = P.StringBuffer$("");
  try {
    $.get$Maps__toStringList().push(m);
    result.write$1("{");
    t1.first_0 = true;
    J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
    result.write$1("}");
  } finally {
    t1 = $.get$Maps__toStringList();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1.pop();
  }
  return result.get$_contents();
},

_HashMap: {"": "Object;_collection$_length,_strings,_nums,_rest,_keys",
  get$length: function(_) {
    return this._collection$_length;
  },
  get$keys: function() {
    var t1 = new P.HashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_HashMap", 0)]);
    return t1;
  },
  get$values: function(_) {
    var t1 = new P.HashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_HashMap", 0)]);
    return H.MappedIterable_MappedIterable(t1, new P._HashMap_values_closure(this), H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
  },
  $index: function(_, key) {
    var strings, t1, entry, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      return t1;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      return t1;
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    }
  },
  $indexSet: function(_, key, value) {
    var strings, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        strings = P._HashMap__newHashTable();
        this._strings = strings;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        nums = P._HashMap__newHashTable();
        this._nums = nums;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        rest = P._HashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        P._HashMap__setTableEntry(rest, hash, [key, value]);
        this._collection$_length = this._collection$_length + 1;
        this._keys = null;
      } else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._collection$_length = this._collection$_length + 1;
          this._keys = null;
        }
      }
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    keys = this._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw H.wrapException(P.ConcurrentModificationError$(this));
    }
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = P.List_List(this._collection$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._keys = result;
    return result;
  },
  _addHashTableEntry$3: function(table, key, value) {
    if (table[key] == null) {
      this._collection$_length = this._collection$_length + 1;
      this._keys = null;
    }
    P._HashMap__setTableEntry(table, key, value);
  },
  _computeHashCode$1: function(key) {
    return J.get$hashCode$(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; i += 2)
      if (J.$eq(bucket[i], key))
        return i;
    return -1;
  },
  $isMap: true,
  static: {
_HashMap__setTableEntry: function(table, key, value) {
  if (value == null)
    table[key] = table;
  else
    table[key] = value;
},

_HashMap__newHashTable: function() {
  var table = Object.create(null);
  P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
  delete table["<non-identifier-key>"];
  return table;
}}

},

_HashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    var t1 = this.this_0;
    return t1.$index(t1, each);
  },
  $is_args1: true
},

HashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._collection$_length;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
  },
  forEach$1: function(_, f) {
    var t1, keys, $length, i;
    t1 = this._map;
    keys = t1._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      f.call$1(keys[i]);
      if (keys !== t1._keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
    }
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

HashMapKeyIterator: {"": "Object;_map,_keys,_offset,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._offset;
    t1 = this._map;
    if (keys !== t1._keys)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else if (offset >= keys.length) {
      this._collection$_current = null;
      return false;
    } else {
      this._collection$_current = keys[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

_LinkedHashMap: {"": "Object;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
  get$length: function(_) {
    return this._collection$_length;
  },
  get$keys: function() {
    var t1 = new P.LinkedHashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_LinkedHashMap", 0)]);
    return t1;
  },
  get$values: function(_) {
    var t1 = new P.LinkedHashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_LinkedHashMap", 0)]);
    return H.MappedIterable_MappedIterable(t1, new P._LinkedHashMap_values_closure(this), H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
  },
  containsKey$1: function(key) {
    var nums, rest;
    if ((key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    }
  },
  $index: function(_, key) {
    var strings, cell, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return;
      cell = strings[key];
      return cell == null ? null : cell.get$_collection$_value();
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return;
      cell = nums[key];
      return cell == null ? null : cell.get$_collection$_value();
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_collection$_value();
    }
  },
  $indexSet: function(_, key, value) {
    var strings, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        strings = P._LinkedHashMap__newHashTable();
        this._strings = strings;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        nums = P._LinkedHashMap__newHashTable();
        this._nums = nums;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].set$_collection$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index, cell;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_collection$_value();
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$2(cell._key, cell._collection$_value);
      if (modifications !== this._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(this));
      cell = cell._next;
    }
  },
  _addHashTableEntry$3: function(table, key, value) {
    var cell = table[key];
    if (cell == null)
      table[key] = this._newLinkedCell$2(key, value);
    else
      cell.set$_collection$_value(value);
  },
  _removeHashTableEntry$2: function(table, key) {
    var cell;
    if (table == null)
      return;
    cell = table[key];
    if (cell == null)
      return;
    this._unlinkCell$1(cell);
    delete table[key];
    return cell.get$_collection$_value();
  },
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = new P.LinkedHashMapCell(key, value, null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last._next = cell;
      this._last = cell;
    }
    this._collection$_length = this._collection$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_previous();
    next = cell._next;
    if (previous == null)
      this._first = next;
    else
      previous._next = next;
    if (next == null)
      this._last = previous;
    else
      next._previous = previous;
    this._collection$_length = this._collection$_length - 1;
    this._modifications = this._modifications + 1 & 67108863;
  },
  _computeHashCode$1: function(key) {
    return J.get$hashCode$(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i].get$_key(), key))
        return i;
    return -1;
  },
  toString$0: function(_) {
    return P.Maps_mapToString(this);
  },
  $isMap: true,
  static: {
_LinkedHashMap__newHashTable: function() {
  var table = Object.create(null);
  table["<non-identifier-key>"] = table;
  delete table["<non-identifier-key>"];
  return table;
}}

},

_LinkedHashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    var t1 = this.this_0;
    return t1.$index(t1, each);
  },
  $is_args1: true
},

LinkedHashMapCell: {"": "Object;_key<,_collection$_value@,_next,_previous<"},

LinkedHashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._collection$_length;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    t1 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
    t1._cell = t1._map._first;
    return t1;
  },
  forEach$1: function(_, f) {
    var t1, cell, modifications;
    t1 = this._map;
    cell = t1._first;
    modifications = t1._modifications;
    for (; cell != null;) {
      f.call$1(cell._key);
      if (modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      cell = cell._next;
    }
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

LinkedHashMapKeyIterator: {"": "Object;_map,_modifications,_cell,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var t1 = this._map;
    if (this._modifications !== t1._modifications)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = t1._key;
        this._cell = this._cell._next;
        return true;
      }
    }
  }
},

_HashSet: {"": "_HashSetBase;",
  get$iterator: function(_) {
    return new P.HashSetIterator(this, this._computeElements$0(), 0, null);
  },
  get$length: function(_) {
    return this._collection$_length;
  },
  contains$1: function(_, object) {
    var strings, nums, rest;
    if (typeof object === "string" && object !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[object] != null;
    } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
      nums = this._nums;
      return nums == null ? false : nums[object] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    }
  },
  lookup$1: function(object) {
    var t1, rest, bucket, index;
    if (!(typeof object === "string" && object !== "__proto__"))
      t1 = typeof object === "number" && (object & 0x3ffffff) === object;
    else
      t1 = true;
    if (t1)
      return this.contains$1(this, object) ? object : null;
    rest = this._rest;
    if (rest == null)
      return;
    bucket = rest[this._computeHashCode$1(object)];
    index = this._findBucketIndex$2(bucket, object);
    if (index < 0)
      return;
    return J.$index$asx(bucket, index);
  },
  add$1: function(_, element) {
    var rest, hash, bucket;
    rest = this._rest;
    if (rest == null) {
      rest = P._HashSet__newHashTable();
      this._rest = rest;
    }
    hash = this._computeHashCode$1(element);
    bucket = rest[hash];
    if (bucket == null)
      rest[hash] = [element];
    else {
      if (this._findBucketIndex$2(bucket, element) >= 0)
        return false;
      bucket.push(element);
    }
    this._collection$_length = this._collection$_length + 1;
    this._elements = null;
    return true;
  },
  remove$1: function(_, object) {
    var rest, bucket, index;
    rest = this._rest;
    if (rest == null)
      return false;
    bucket = rest[this._computeHashCode$1(object)];
    index = this._findBucketIndex$2(bucket, object);
    if (index < 0)
      return false;
    this._collection$_length = this._collection$_length - 1;
    this._elements = null;
    bucket.splice(index, 1);
    return true;
  },
  _computeElements$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._elements;
    if (t1 != null)
      return t1;
    result = P.List_List(this._collection$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; ++i0) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._elements = result;
    return result;
  },
  _computeHashCode$1: function(element) {
    return J.get$hashCode$(element) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i], element))
        return i;
    return -1;
  },
  $as_HashSetBase: null,
  $isEfficientLength: true
},

_IdentityHashSet: {"": "_HashSet;_collection$_length,_strings,_nums,_rest,_elements",
  _computeHashCode$1: function(key) {
    return H.objectHashCode(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i, t1;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i) {
      t1 = bucket[i];
      if (t1 == null ? element == null : t1 === element)
        return i;
    }
    return -1;
  },
  $as_HashSet: null
},

HashSetIterator: {"": "Object;_set,_elements,_offset,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var elements, offset, t1;
    elements = this._elements;
    offset = this._offset;
    t1 = this._set;
    if (elements !== t1._elements)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else if (offset >= elements.length) {
      this._collection$_current = null;
      return false;
    } else {
      this._collection$_current = elements[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

_HashSetBase: {"": "IterableBase;",
  toString$0: function(_) {
    return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

IterableBase: {"": "Object;",
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0();)
      ++count;
    return count;
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element;
    if (index < 0)
      throw H.wrapException(P.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
      element = t1.get$current();
      if (remaining === 0)
        return element;
      --remaining;
    }
    throw H.wrapException(P.RangeError$value(index));
  },
  toString$0: function(_) {
    return P._iterableToString(this);
  }
},

ListBase: {"": "Object+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

ListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return new H.ListIterator(receiver, this.get$length(receiver), 0, null);
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  forEach$1: function(receiver, action) {
    var $length, i;
    $length = this.get$length(receiver);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.$index(receiver, i));
      if ($length !== this.get$length(receiver))
        throw H.wrapException(P.ConcurrentModificationError$(receiver));
    }
  },
  toString$0: function(receiver) {
    var result, t1;
    t1 = $.get$_toStringVisiting();
    if (t1.contains$1(t1, receiver))
      return "[...]";
    result = P.StringBuffer$("");
    try {
      t1 = $.get$_toStringVisiting();
      t1.add$1(t1, receiver);
      result.write$1("[");
      result.writeAll$2(receiver, ", ");
      result.write$1("]");
    } finally {
      t1 = $.get$_toStringVisiting();
      t1.remove$1(t1, receiver);
    }
    return result.get$_contents();
  },
  $isList: true,
  $asList: null,
  $isEfficientLength: true
},

Maps_mapToString_closure: {"": "Closure;box_0,result_1",
  call$2: function(k, v) {
    var t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1(", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t1.write$1(k);
    t1.write$1(": ");
    t1.write$1(v);
  },
  $is_args2: true
},

ListQueue: {"": "IterableBase;_table,_head,_tail,_modificationCount",
  get$iterator: function(_) {
    return P._ListQueueIterator$(this);
  },
  forEach$1: function(_, action) {
    var modificationCount, i, t1;
    modificationCount = this._modificationCount;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw H.ioore(t1, i);
      action.call$1(t1[i]);
      if (modificationCount !== this._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(this));
    }
  },
  get$length: function(_) {
    return (this._tail - this._head & this._table.length - 1) >>> 0;
  },
  toString$0: function(_) {
    return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw H.wrapException(P.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t1, t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  _add$1: function(element) {
    var t1, t2, t3;
    t1 = this._table;
    t2 = this._tail;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t1, t2);
    t1[t2] = element;
    this._tail = (t2 + 1 & t3 - 1) >>> 0;
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = P.List_List(this._table.length * 2, H.getRuntimeTypeArgument(this, "ListQueue", 0));
    H.setRuntimeTypeInfo(newTable, [H.getRuntimeTypeArgument(this, "ListQueue", 0)]);
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    H.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
    t1 = this._head;
    t2 = this._table;
    H.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  ListQueue$1: function(initialCapacity, $E) {
    var t1 = P.List_List(8, $E);
    H.setRuntimeTypeInfo(t1, [$E]);
    this._table = t1;
  },
  $asIterableBase: null,
  $isEfficientLength: true,
  static: {
"": "ListQueue__INITIAL_CAPACITY",
ListQueue$: function(initialCapacity, $E) {
  var t1 = new P.ListQueue(null, 0, 0, 0);
  H.setRuntimeTypeInfo(t1, [$E]);
  t1.ListQueue$1(initialCapacity, $E);
  return t1;
}}

},

_ListQueueIterator: {"": "Object;_queue,_end,_modificationCount,_collection$_position,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    if (this._modificationCount !== t1._modificationCount)
      H.throwExpression(P.ConcurrentModificationError$(t1));
    t2 = this._collection$_position;
    if (t2 === this._end) {
      this._collection$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw H.ioore(t3, t2);
    this._collection$_current = t3[t2];
    this._collection$_position = (this._collection$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  },
  static: {
_ListQueueIterator$: function(queue) {
  return new P._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, null);
}}

}}],
["dart.core", "dart:core", , P, {
_symbolToString: function(symbol) {
  return H.Symbol_getName(symbol);
},

Comparable_compare: function(a, b) {
  return J.compareTo$1$ns(a, b);
},

Error_safeToString: function(object) {
  var buffer, t1, i, codeUnit, t2, charCodes;
  if (typeof object === "number" || typeof object === "boolean" || null == object)
    return J.toString$0(object);
  if (typeof object === "string") {
    buffer = new P.StringBuffer("");
    buffer._contents = "\"";
    for (t1 = object.length, i = 0; i < t1; ++i) {
      codeUnit = C.JSString_methods.codeUnitAt$1(object, i);
      if (codeUnit <= 31)
        if (codeUnit === 10)
          buffer._contents = buffer._contents + "\\n";
        else if (codeUnit === 13)
          buffer._contents = buffer._contents + "\\r";
        else if (codeUnit === 9)
          buffer._contents = buffer._contents + "\\t";
        else {
          buffer._contents = buffer._contents + "\\x";
          if (codeUnit < 16)
            buffer._contents = buffer._contents + "0";
          else {
            buffer._contents = buffer._contents + "1";
            codeUnit -= 16;
          }
          t2 = codeUnit < 10 ? 48 + codeUnit : 87 + codeUnit;
          charCodes = P.List_List$filled(1, t2, J.JSInt);
          charCodes.$builtinTypeInfo = [J.JSInt];
          t2 = H.Primitives_stringFromCharCodes(charCodes);
          buffer._contents = buffer._contents + t2;
        }
      else if (codeUnit === 92)
        buffer._contents = buffer._contents + "\\\\";
      else if (codeUnit === 34)
        buffer._contents = buffer._contents + "\\\"";
      else {
        charCodes = P.List_List$filled(1, codeUnit, J.JSInt);
        charCodes.$builtinTypeInfo = [J.JSInt];
        t2 = H.Primitives_stringFromCharCodes(charCodes);
        buffer._contents = buffer._contents + t2;
      }
    }
    buffer._contents = buffer._contents + "\"";
    return buffer._contents;
  }
  return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
},

Exception_Exception: function(message) {
  return new P._ExceptionImplementation(message);
},

identical: function(a, b) {
  return a == null ? b == null : a === b;
},

identityHashCode: function(object) {
  return H.objectHashCode(object);
},

List_List: function($length, $E) {
  if ($length == null)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw H.wrapException(P.ArgumentError$("Length must be a positive integer: " + H.S($length) + "."));
  return H.Primitives_newFixedList($length);
},

List_List$filled: function($length, fill, $E) {
  var result, t1, i;
  if ($length < 0)
    throw H.wrapException(P.ArgumentError$("Length must be a positive integer: " + $length + "."));
  result = H.Primitives_newFixedList($length);
  if ($length !== 0 && true)
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
},

List_List$from: function(other, growable, $E) {
  var list, t1, $length, fixedList, i;
  list = P.List_List(null, $E);
  H.setRuntimeTypeInfo(list, [$E]);
  for (t1 = J.get$iterator$ax(other); t1.moveNext$0();)
    list.push(t1.get$current());
  if (growable)
    return list;
  $length = list.length;
  fixedList = P.List_List($length, $E);
  H.setRuntimeTypeInfo(fixedList, [$E]);
  for (t1 = list.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw H.ioore(list, i);
    fixedList[i] = list[i];
  }
  return fixedList;
},

print: function(object) {
  var line = J.toString$0(object);
  H.printToConsole(line);
},

NoSuchMethodError_toString_closure: {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if (t1.i_1 > 0)
      t1.sb_0.write$1(", ");
    t1.sb_0.write$1(P._symbolToString(key));
  },
  $is_args2: true
},

Comparable: {"": "Object;"},

Duration: {"": "Object;_duration<",
  $lt: function(_, other) {
    return C.JSNumber_methods.$lt(this._duration, other.get$_duration());
  },
  $gt: function(_, other) {
    return C.JSNumber_methods.$gt(this._duration, other.get$_duration());
  },
  $ge: function(_, other) {
    return C.JSNumber_methods.$ge(this._duration, other.get$_duration());
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isDuration)
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return this._duration & 0x1FFFFFFF;
  },
  compareTo$1: function(_, other) {
    return C.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
  },
  toString$0: function(_) {
    var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new P.Duration_toString_twoDigits();
    t2 = this._duration;
    if (t2 < 0)
      return "-" + H.S(P.Duration$(0, 0, -t2, 0, 0, 0));
    twoDigitMinutes = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 60000000), 60));
    twoDigitSeconds = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 1000000), 60));
    sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSNumber_methods.remainder$1(t2, 1000000));
    return H.S(C.JSNumber_methods.$tdiv(t2, 3600000000)) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
  },
  $isDuration: true,
  static: {
"": "Duration_MICROSECONDS_PER_MILLISECOND,Duration_MILLISECONDS_PER_SECOND,Duration_SECONDS_PER_MINUTE,Duration_MINUTES_PER_HOUR,Duration_HOURS_PER_DAY,Duration_MICROSECONDS_PER_SECOND,Duration_MICROSECONDS_PER_MINUTE,Duration_MICROSECONDS_PER_HOUR,Duration_MICROSECONDS_PER_DAY,Duration_MILLISECONDS_PER_MINUTE,Duration_MILLISECONDS_PER_HOUR,Duration_MILLISECONDS_PER_DAY,Duration_SECONDS_PER_HOUR,Duration_SECONDS_PER_DAY,Duration_MINUTES_PER_DAY,Duration_ZERO",
Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
  return new P.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
}}

},

Duration_toString_sixDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor$n(n);
    if (t1.$ge(n, 100000))
      return H.S(n);
    if (t1.$ge(n, 10000))
      return "0" + H.S(n);
    if (t1.$ge(n, 1000))
      return "00" + H.S(n);
    if (t1.$ge(n, 100))
      return "000" + H.S(n);
    if (t1.$gt(n, 10))
      return "0000" + H.S(n);
    return "00000" + H.S(n);
  },
  $is_args1: true
},

Duration_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if (J.$ge$n(n, 10))
      return H.S(n);
    return "0" + H.S(n);
  },
  $is_args1: true
},

Error: {"": "Object;",
  get$stackTrace: function() {
    return new H._StackTrace(this.$thrownJsError, null);
  },
  $isError: true
},

NullThrownError: {"": "Error;",
  toString$0: function(_) {
    return "Throw of null.";
  }
},

ArgumentError: {"": "Error;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + H.S(t1);
    return "Illegal argument(s)";
  },
  static: {
ArgumentError$: function(message) {
  return new P.ArgumentError(message);
}}

},

RangeError: {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + H.S(this.message);
  },
  static: {
RangeError$value: function(value) {
  return new P.RangeError("value " + H.S(value));
},

RangeError$range: function(value, start, end) {
  return new P.RangeError("value " + H.S(value) + " not in range " + start + ".." + H.S(end));
}}

},

UnsupportedError: {"": "Error;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  },
  static: {
UnsupportedError$: function(message) {
  return new P.UnsupportedError(message);
}}

},

UnimplementedError: {"": "Error;message",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
  },
  $isError: true,
  static: {
UnimplementedError$: function(message) {
  return new P.UnimplementedError(message);
}}

},

StateError: {"": "Error;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  },
  static: {
StateError$: function(message) {
  return new P.StateError(message);
}}

},

ConcurrentModificationError: {"": "Error;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
  },
  static: {
ConcurrentModificationError$: function(modifiedObject) {
  return new P.ConcurrentModificationError(modifiedObject);
}}

},

StackOverflowError: {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  },
  get$stackTrace: function() {
    return;
  },
  $isError: true
},

CyclicInitializationError: {"": "Error;variableName",
  toString$0: function(_) {
    return "Reading static variable '" + this.variableName + "' during its initialization";
  },
  static: {
CyclicInitializationError$: function(variableName) {
  return new P.CyclicInitializationError(variableName);
}}

},

_ExceptionImplementation: {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + H.S(t1);
  }
},

Expando: {"": "Object;name",
  toString$0: function(_) {
    return "Expando:" + H.S(this.name);
  },
  $index: function(_, object) {
    var values = H.Primitives_getProperty(object, "expando$values");
    return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
  },
  $indexSet: function(_, object, value) {
    var values = H.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = new P.Object();
      H.Primitives_setProperty(object, "expando$values", values);
    }
    H.Primitives_setProperty(values, this._getKey$0(), value);
  },
  _getKey$0: function() {
    var key, t1;
    key = H.Primitives_getProperty(this, "expando$key");
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = t1 + 1;
      key = "expando$key$" + t1;
      H.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  },
  static: {
"": "Expando__KEY_PROPERTY_NAME,Expando__EXPANDO_PROPERTY_NAME,Expando__keyCount",
}

},

Function: {"": "Object;"},

Iterable: {"": "Object;"},

Iterator: {"": "Object;"},

Null: {"": "Object;",
  toString$0: function(_) {
    return "null";
  }
},

Object: {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return H.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return H.Primitives_objectToString(this);
  }
},

StackTrace: {"": "Object;"},

StringBuffer: {"": "Object;_contents<",
  get$length: function(_) {
    return this._contents.length;
  },
  write$1: function(obj) {
    var str = typeof obj === "string" ? obj : H.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    iterator = J.get$iterator$ax(objects);
    if (!iterator.moveNext$0())
      return;
    if (separator.length === 0)
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0());
    else {
      this.write$1(iterator.get$current());
      for (; iterator.moveNext$0();) {
        this._contents = this._contents + separator;
        str = iterator.get$current();
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  },
  static: {
StringBuffer$: function($content) {
  var t1 = new P.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
}}

},

Symbol: {"": "Object;"}}],
["dart.dom.html", "dart:html", , W, {
_ElementFactoryProvider_createElement_tag: function(tag, typeExtension) {
  return document.createElement(tag);
},

_JenkinsSmiHash_combine: function(hash, value) {
  hash = 536870911 & hash + value;
  hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
  return (hash ^ C.JSInt_methods.$shr(hash, 6)) >>> 0;
},

_JenkinsSmiHash_finish: function(hash) {
  hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash = (hash ^ C.JSInt_methods.$shr(hash, 11)) >>> 0;
  return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
},

_wrapZone: function(callback) {
  var t1 = $.Zone__current;
  if (t1 === C.C__RootZone)
    return callback;
  return t1.bindUnaryCallback$2$runGuarded(callback, true);
},

HtmlElement: {"": "Element;", "%": "HTMLAppletElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBaseFontElement|HTMLBodyElement|HTMLButtonElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLDivElement|HTMLFieldSetElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMarqueeElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTemplateElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement;HTMLElement"},

AnchorElement: {"": "HtmlElement;",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "HTMLAnchorElement"
},

CanvasElement: {"": "HtmlElement;height},width}",
  getContext$2: function(receiver, contextId, attrs) {
    return receiver.getContext(contextId);
  },
  getContext$1: function($receiver, contextId) {
    return this.getContext$2($receiver, contextId, null);
  },
  "%": "HTMLCanvasElement"
},

CanvasRenderingContext: {"": "Interceptor;", "%": "WebGLRenderingContext;CanvasRenderingContext"},

CanvasRenderingContext2D: {"": "CanvasRenderingContext;fillStyle},globalAlpha},globalCompositeOperation},lineCap},lineJoin},lineWidth},strokeStyle}",
  beginPath$0: function(receiver) {
    return receiver.beginPath();
  },
  clearRect$4: function(receiver, x, y, width, height) {
    return receiver.clearRect(x, y, width, height);
  },
  closePath$0: function(receiver) {
    return receiver.closePath();
  },
  fillRect$4: function(receiver, x, y, width, height) {
    return receiver.fillRect(x, y, width, height);
  },
  getImageData$4: function(receiver, sx, sy, sw, sh) {
    return P.convertNativeToDart_ImageData(receiver.getImageData(sx, sy, sw, sh));
  },
  lineTo$2: function(receiver, x, y) {
    return receiver.lineTo(x, y);
  },
  moveTo$2: function(receiver, x, y) {
    return receiver.moveTo(x, y);
  },
  restore$0: function(receiver) {
    return receiver.restore();
  },
  rotate$1: function(receiver, angle) {
    return receiver.rotate(angle);
  },
  save$0: function(receiver) {
    return receiver.save();
  },
  scale$2: function(receiver, sx, sy) {
    return receiver.scale(sx, sy);
  },
  setTransform$6: function(receiver, m11, m12, m21, m22, dx, dy) {
    return receiver.setTransform(m11, m12, m21, m22, dx, dy);
  },
  stroke$0: function(receiver) {
    return receiver.stroke();
  },
  strokeRect$4: function(receiver, x, y, width, height) {
    return receiver.strokeRect(x, y, width, height);
  },
  translate$2: function(receiver, tx, ty) {
    return receiver.translate(tx, ty);
  },
  "%": "CanvasRenderingContext2D"
},

CharacterData: {"": "Node;length=", "%": "CDATASection|CharacterData|Comment|ProcessingInstruction|Text"},

DomException: {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "DOMException"
},

Element: {"": "Node;",
  get$client: function(receiver) {
    var t1 = new P.Rectangle(receiver.clientLeft, receiver.clientTop, receiver.clientWidth, receiver.clientHeight);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  toString$0: function(receiver) {
    return receiver.localName;
  },
  "%": ";Element"
},

EmbedElement: {"": "HtmlElement;height},width}", "%": "HTMLEmbedElement"},

ErrorEvent: {"": "Event;error=", "%": "ErrorEvent"},

Event: {"": "Interceptor;", "%": "AudioProcessingEvent|AutocompleteErrorEvent|BeforeLoadEvent|BeforeUnloadEvent|CSSFontFaceLoadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|HashChangeEvent|IDBVersionChangeEvent|MIDIConnectionEvent|MIDIMessageEvent|MediaKeyEvent|MediaKeyMessageEvent|MediaKeyNeededEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|ProgressEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|ResourceProgressEvent|SecurityPolicyViolationEvent|SpeechInputEvent|SpeechRecognitionEvent|SpeechSynthesisEvent|StorageEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent|XMLHttpRequestProgressEvent;Event"},

EventTarget: {"": "Interceptor;",
  addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
  },
  removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
  },
  "%": "MediaStream;EventTarget"
},

FormElement: {"": "HtmlElement;length=", "%": "HTMLFormElement"},

HtmlCollection: {"": "Interceptor_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Node];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
},

IFrameElement: {"": "HtmlElement;height},width}", "%": "HTMLIFrameElement"},

ImageData: {"": "Interceptor;data=", $isImageData: true, "%": "ImageData"},

ImageElement: {"": "HtmlElement;height},width}", "%": "HTMLImageElement"},

InputElement: {"": "HtmlElement;height},width}", "%": "HTMLInputElement"},

MediaElement: {"": "HtmlElement;error=", "%": "HTMLAudioElement;HTMLMediaElement"},

MouseEvent: {"": "UIEvent;",
  get$client: function(receiver) {
    var t1 = new P.Point(receiver.clientX, receiver.clientY);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "%": "DragEvent|MSPointerEvent|MouseEvent|MouseScrollEvent|MouseWheelEvent|PointerEvent|WheelEvent"
},

Node: {"": "EventTarget;",
  get$nodes: function(receiver) {
    return new W._ChildNodeListLazy(receiver);
  },
  toString$0: function(receiver) {
    var t1 = receiver.nodeValue;
    return t1 == null ? J.Interceptor.prototype.toString$0.call(this, receiver) : t1;
  },
  "%": "Attr|Document|DocumentFragment|DocumentType|Entity|HTMLDocument|Notation|SVGDocument|ShadowRoot;Node"
},

NodeList: {"": "Interceptor_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Node];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "NodeList|RadioNodeList"
},

ObjectElement: {"": "HtmlElement;height},width}", "%": "HTMLObjectElement"},

SelectElement: {"": "HtmlElement;length=", "%": "HTMLSelectElement"},

SpeechRecognitionError: {"": "Event;error=", "%": "SpeechRecognitionError"},

Touch: {"": "Interceptor;",
  get$client: function(receiver) {
    var t1 = new P.Point(receiver.clientX, receiver.clientY);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "%": "Touch"
},

TouchEvent: {"": "UIEvent;touches=", "%": "TouchEvent"},

TouchList: {"": "Interceptor_ListMixin_ImmutableListMixin1;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Touch];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "TouchList"
},

UIEvent: {"": "Event;", "%": "CompositionEvent|FocusEvent|KeyboardEvent|SVGZoomEvent|TextEvent;UIEvent"},

VideoElement: {"": "MediaElement;height},width}", "%": "HTMLVideoElement"},

Window: {"": "EventTarget;",
  _requestAnimationFrame$1: function(receiver, callback) {
    return receiver.requestAnimationFrame(H.convertDartClosureToJS(callback, 1));
  },
  _ensureRequestAnimationFrame$0: function(receiver) {
    if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
      return;
      (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(receiver);
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "DOMWindow|Window"
},

_ClientRect: {"": "Interceptor;height=,left=,top=,width=",
  toString$0: function(receiver) {
    return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
  },
  $eq: function(receiver, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    t1 = J.getInterceptor$x(other);
    if (typeof other !== "object" || other === null || !t1.$isRectangle)
      return false;
    t2 = receiver.left;
    t3 = t1.get$left(other);
    if (t2 == null ? t3 == null : t2 === t3) {
      t2 = receiver.top;
      t3 = t1.get$top(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = receiver.width;
        t3 = t1.get$width(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.height;
          t1 = t1.get$height(other);
          t1 = t2 == null ? t1 == null : t2 === t1;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(receiver) {
    var t1, t2, t3, t4;
    t1 = J.get$hashCode$(receiver.left);
    t2 = J.get$hashCode$(receiver.top);
    t3 = J.get$hashCode$(receiver.width);
    t4 = J.get$hashCode$(receiver.height);
    return W._JenkinsSmiHash_finish(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4));
  },
  $isRectangle: true,
  $asRectangle: function() {
    return [null];
  },
  "%": "ClientRect|DOMRect"
},

Interceptor_ListMixin: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin: {"": "Interceptor_ListMixin+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

_ChildNodeListLazy: {"": "ListBase;_this",
  $indexSet: function(_, index, value) {
    var t1, t2;
    t1 = this._this;
    t2 = t1.childNodes;
    if (index >>> 0 !== index || index >= t2.length)
      throw H.ioore(t2, index);
    t1.replaceChild(value, t2[index]);
  },
  get$iterator: function(_) {
    return C.NodeList_methods.get$iterator(this._this.childNodes);
  },
  get$length: function(_) {
    return this._this.childNodes.length;
  },
  $index: function(_, index) {
    var t1 = this._this.childNodes;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  $asList: function() {
    return [W.Node];
  }
},

Interceptor_ListMixin0: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin0: {"": "Interceptor_ListMixin0+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin1: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin1: {"": "Interceptor_ListMixin1+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

EventStreamProvider: {"": "Object;_eventType"},

_EventStream: {"": "Stream;_target,_eventType,_useCapture",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1 = new W._EventStreamSubscription(0, this._target, this._eventType, W._wrapZone(onData), this._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_EventStream", 0)]);
    t1._tryResume$0();
    return t1;
  },
  $asStream: null
},

_EventStreamSubscription: {"": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
  cancel$0: function() {
    if (this._target == null)
      return;
    this._unlisten$0();
    this._target = null;
    this._onData = null;
  },
  _tryResume$0: function() {
    var t1 = this._onData;
    if (t1 != null && this._pauseCount <= 0)
      J.addEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
  },
  _unlisten$0: function() {
    var t1 = this._onData;
    if (t1 != null)
      J.removeEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
  },
  $asStreamSubscription: null
},

ImmutableListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return W.FixedSizeListIterator$(receiver);
  },
  $isList: true,
  $asList: null,
  $isEfficientLength: true
},

FixedSizeListIterator: {"": "Object;_array,_html$_length,_position,_html$_current",
  moveNext$0: function() {
    var nextPosition, t1;
    nextPosition = this._position + 1;
    t1 = this._html$_length;
    if (nextPosition < t1) {
      this._html$_current = J.$index$asx(this._array, nextPosition);
      this._position = nextPosition;
      return true;
    }
    this._html$_current = null;
    this._position = t1;
    return false;
  },
  get$current: function() {
    return this._html$_current;
  },
  static: {
FixedSizeListIterator$: function(array) {
  return new W.FixedSizeListIterator(array, J.get$length$asx(array), -1, null);
}}

}}],
["dart.dom.svg", "dart:svg", , P, {
FEBlendElement: {"": "SvgElement;x=,y=", "%": "SVGFEBlendElement"},

FEColorMatrixElement: {"": "SvgElement;x=,y=", "%": "SVGFEColorMatrixElement"},

FEComponentTransferElement: {"": "SvgElement;x=,y=", "%": "SVGFEComponentTransferElement"},

FECompositeElement: {"": "SvgElement;x=,y=", "%": "SVGFECompositeElement"},

FEConvolveMatrixElement: {"": "SvgElement;x=,y=", "%": "SVGFEConvolveMatrixElement"},

FEDiffuseLightingElement: {"": "SvgElement;x=,y=", "%": "SVGFEDiffuseLightingElement"},

FEDisplacementMapElement: {"": "SvgElement;x=,y=", "%": "SVGFEDisplacementMapElement"},

FEFloodElement: {"": "SvgElement;x=,y=", "%": "SVGFEFloodElement"},

FEGaussianBlurElement: {"": "SvgElement;x=,y=", "%": "SVGFEGaussianBlurElement"},

FEImageElement: {"": "SvgElement;x=,y=", "%": "SVGFEImageElement"},

FEMergeElement: {"": "SvgElement;x=,y=", "%": "SVGFEMergeElement"},

FEMorphologyElement: {"": "SvgElement;x=,y=", "%": "SVGFEMorphologyElement"},

FEOffsetElement: {"": "SvgElement;x=,y=", "%": "SVGFEOffsetElement"},

FEPointLightElement: {"": "SvgElement;x=,y=,z=", "%": "SVGFEPointLightElement"},

FESpecularLightingElement: {"": "SvgElement;x=,y=", "%": "SVGFESpecularLightingElement"},

FESpotLightElement: {"": "SvgElement;x=,y=,z=", "%": "SVGFESpotLightElement"},

FETileElement: {"": "SvgElement;x=,y=", "%": "SVGFETileElement"},

FETurbulenceElement: {"": "SvgElement;x=,y=", "%": "SVGFETurbulenceElement"},

FilterElement: {"": "SvgElement;x=,y=", "%": "SVGFilterElement"},

ForeignObjectElement: {"": "GraphicsElement;x=,y=", "%": "SVGForeignObjectElement"},

GraphicsElement: {"": "SvgElement;", "%": "SVGAElement|SVGCircleElement|SVGClipPathElement|SVGDefsElement|SVGEllipseElement|SVGGElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement|SVGSwitchElement;SVGGraphicsElement"},

ImageElement0: {"": "GraphicsElement;x=,y=", "%": "SVGImageElement"},

MaskElement: {"": "SvgElement;x=,y=", "%": "SVGMaskElement"},

PatternElement: {"": "SvgElement;x=,y=", "%": "SVGPatternElement"},

RectElement: {"": "GraphicsElement;x=,y=", "%": "SVGRectElement"},

SvgElement: {"": "Element;", "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGComponentTransferFunctionElement|SVGCursorElement|SVGDescElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGHKernElement|SVGLinearGradientElement|SVGMPathElement|SVGMarkerElement|SVGMetadataElement|SVGMissingGlyphElement|SVGRadialGradientElement|SVGScriptElement|SVGSetElement|SVGStopElement|SVGStyleElement|SVGSymbolElement|SVGTitleElement|SVGVKernElement|SVGViewElement;SVGElement"},

SvgSvgElement: {"": "GraphicsElement;x=,y=", "%": "SVGSVGElement"},

TextContentElement: {"": "GraphicsElement;", "%": "SVGTextPathElement;SVGTextContentElement"},

TextPositioningElement: {"": "TextContentElement;x=,y=", "%": "SVGAltGlyphElement|SVGTSpanElement|SVGTextElement|SVGTextPositioningElement"},

UseElement: {"": "GraphicsElement;x=,y=", "%": "SVGUseElement"}}],
["dart.isolate", "dart:isolate", , P, {
ReceivePort: {"": "Object;"}}],
["dart.math", "dart:math", , P, {
_JenkinsSmiHash_combine0: function(hash, value) {
  hash = 536870911 & hash + value;
  hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
  return (hash ^ C.JSInt_methods.$shr(hash, 6)) >>> 0;
},

_JenkinsSmiHash_finish0: function(hash) {
  hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash = (hash ^ C.JSInt_methods.$shr(hash, 11)) >>> 0;
  return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
},

min: function(a, b) {
  var t1;
  if (a > b)
    return b;
  if (a < b)
    return a;
  if (typeof b === "number") {
    if (typeof a === "number")
      if (a === 0)
        return (a + b) * a * b;
    if (a === 0)
      t1 = b === 0 ? 1 / b < 0 : b < 0;
    else
      t1 = false;
    if (t1 || isNaN(b))
      return b;
    return a;
  }
  return a;
},

max: function(a, b) {
  var t1;
  if (typeof a !== "number")
    throw H.wrapException(new P.ArgumentError(a));
  if (a > b)
    return a;
  if (a < b)
    return b;
  if (typeof b === "number") {
    if (typeof a === "number")
      if (a === 0)
        return a + b;
    if (isNaN(b))
      return b;
    return a;
  }
  if (b === 0)
    t1 = a === 0 ? 1 / a < 0 : a < 0;
  else
    t1 = false;
  if (t1)
    return b;
  return a;
},

Point: {"": "Object;x>,y>",
  toString$0: function(_) {
    return "Point(" + H.S(this.x) + ", " + H.S(this.y) + ")";
  },
  $eq: function(_, other) {
    var t1, t2;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isPoint)
      return false;
    t1 = this.x;
    t2 = other.x;
    if (t1 == null ? t2 == null : t1 === t2) {
      t1 = this.y;
      t2 = other.y;
      t2 = t1 == null ? t2 == null : t1 === t2;
      t1 = t2;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2;
    t1 = J.get$hashCode$(this.x);
    t2 = J.get$hashCode$(this.y);
    return P._JenkinsSmiHash_finish0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2));
  },
  $isPoint: true
},

_RectangleBase: {"": "Object;",
  toString$0: function(_) {
    return "Rectangle (" + H.S(this.get$left(this)) + ", " + H.S(this.top) + ") " + H.S(this.width) + " x " + H.S(this.height);
  },
  $eq: function(_, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    t1 = J.getInterceptor$x(other);
    if (typeof other !== "object" || other === null || !t1.$isRectangle)
      return false;
    t2 = this.get$left(this);
    t3 = t1.get$left(other);
    if (t2 == null ? t3 == null : t2 === t3) {
      t2 = this.top;
      t3 = t1.get$top(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = this.width;
        t3 = t1.get$width(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = this.height;
          t1 = t1.get$height(other);
          t1 = t2 == null ? t1 == null : t2 === t1;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3, t4;
    t1 = J.get$hashCode$(this.get$left(this));
    t2 = J.get$hashCode$(this.top);
    t3 = J.get$hashCode$(this.width);
    t4 = J.get$hashCode$(this.height);
    return P._JenkinsSmiHash_finish0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2), t3), t4));
  }
},

Rectangle: {"": "_RectangleBase;left>,top>,width>,height>", $isRectangle: true, $asRectangle: null, $as_RectangleBase: null}}],
["dart.typed_data", "dart:typed_data", , P, {
TypedData: {"": "Interceptor;",
  _invalidIndex$2: function(receiver, index, $length) {
    var t1 = J.getInterceptor$n(index);
    if (t1.$lt(index, 0) || t1.$ge(index, $length))
      throw H.wrapException(P.RangeError$range(index, 0, $length));
    else
      throw H.wrapException(P.ArgumentError$("Invalid list index " + H.S(index)));
  },
  "%": "DataView;ArrayBufferView;TypedData_ListMixin|TypedData_ListMixin_FixedLengthListMixin|TypedData_ListMixin0|TypedData_ListMixin_FixedLengthListMixin0|TypedData_ListMixin1|TypedData_ListMixin_FixedLengthListMixin1|TypedData_ListMixin2|TypedData_ListMixin_FixedLengthListMixin2|TypedData_ListMixin3|TypedData_ListMixin_FixedLengthListMixin3|TypedData_ListMixin4|TypedData_ListMixin_FixedLengthListMixin4|TypedData_ListMixin5|TypedData_ListMixin_FixedLengthListMixin5|TypedData_ListMixin6|TypedData_ListMixin_FixedLengthListMixin6|TypedData_ListMixin7|TypedData_ListMixin_FixedLengthListMixin7|Int64List|Uint64List"
},

Float32List: {"": "TypedData_ListMixin_FixedLengthListMixin;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1, t2;
    t1 = C.JS_CONST_ZYJ(receiver);
    if (!(index >>> 0 != index)) {
      if (typeof index !== "number")
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSDouble];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Float32Array"
},

Float64List: {"": "TypedData_ListMixin_FixedLengthListMixin0;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1, t2;
    t1 = C.JS_CONST_ZYJ(receiver);
    if (!(index >>> 0 != index)) {
      if (typeof index !== "number")
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSDouble];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Float64Array"
},

Int16List: {"": "TypedData_ListMixin_FixedLengthListMixin1;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1, t2;
    t1 = C.JS_CONST_ZYJ(receiver);
    if (!(index >>> 0 != index)) {
      if (typeof index !== "number")
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Int16Array"
},

Int32List: {"": "TypedData_ListMixin_FixedLengthListMixin2;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1, t2;
    t1 = C.JS_CONST_ZYJ(receiver);
    if (!(index >>> 0 != index)) {
      if (typeof index !== "number")
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Int32Array"
},

Int8List: {"": "TypedData_ListMixin_FixedLengthListMixin3;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1, t2;
    t1 = C.JS_CONST_ZYJ(receiver);
    if (!(index >>> 0 != index)) {
      if (typeof index !== "number")
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Int8Array"
},

Uint16List: {"": "TypedData_ListMixin_FixedLengthListMixin4;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1, t2;
    t1 = C.JS_CONST_ZYJ(receiver);
    if (!(index >>> 0 != index)) {
      if (typeof index !== "number")
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Uint16Array"
},

Uint32List: {"": "TypedData_ListMixin_FixedLengthListMixin5;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1, t2;
    t1 = C.JS_CONST_ZYJ(receiver);
    if (!(index >>> 0 != index)) {
      if (typeof index !== "number")
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Uint32Array"
},

Uint8ClampedList: {"": "TypedData_ListMixin_FixedLengthListMixin6;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1, t2;
    t1 = C.JS_CONST_ZYJ(receiver);
    if (!(index >>> 0 != index)) {
      if (typeof index !== "number")
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "CanvasPixelArray|Uint8ClampedArray"
},

Uint8List: {"": "TypedData_ListMixin_FixedLengthListMixin7;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1, t2;
    t1 = C.JS_CONST_ZYJ(receiver);
    if (!(index >>> 0 != index)) {
      if (typeof index !== "number")
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": ";Uint8Array"
},

TypedData_ListMixin: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin: {"": "TypedData_ListMixin+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin0: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin0: {"": "TypedData_ListMixin0+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin1: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin1: {"": "TypedData_ListMixin1+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin2: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin2: {"": "TypedData_ListMixin2+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin3: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin3: {"": "TypedData_ListMixin3+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin4: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin4: {"": "TypedData_ListMixin4+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin5: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin5: {"": "TypedData_ListMixin5+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin6: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin6: {"": "TypedData_ListMixin6+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin7: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin7: {"": "TypedData_ListMixin7+FixedLengthListMixin;", $asList: null},

Int64List: {"": "TypedData;", $isList: true,
  $asList: function() {
    return [J.JSInt];
  },
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  static: {
"": "Int64List_BYTES_PER_ELEMENT",
}

},

Uint64List: {"": "TypedData;", $isList: true,
  $asList: function() {
    return [J.JSInt];
  },
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  static: {
"": "Uint64List_BYTES_PER_ELEMENT",
}

}}],
["html_common", "dart:html_common", , P, {
convertNativeToDart_ImageData: function(nativeImageData) {
  var t1 = J.getInterceptor(nativeImageData);
  if (typeof nativeImageData === "object" && nativeImageData !== null && !!t1.$isImageData)
    return nativeImageData;
  return new P._TypedImageData(nativeImageData.data, nativeImageData.height, nativeImageData.width);
},

_TypedImageData: {"": "Object;data>,height,width", $isImageData: true}}],
["three", "package:three/three.dart", , S, {
makeLookAt: function(m, eye, center, up) {
  var z, x, t1, y, t2, t3;
  z = eye.$sub(eye, center).normalize$0();
  if (z.get$length(z) === 0)
    z.storage[2] = 1;
  x = up.cross$1(z).normalize$0();
  if (x.get$length(x) === 0) {
    t1 = z.storage;
    t1[0] = t1[0] + 0.0001;
    x = up.cross$1(z).normalize$0();
  }
  y = z.cross$1(x).normalize$0();
  t1 = x.storage;
  t2 = y.storage;
  t3 = z.storage;
  m.setValues$16(t1[0], t1[1], t1[2], 0, t2[0], t2[1], t2[2], 0, t3[0], t3[1], t3[2], 0, 0, 0, 0, 1);
  return m;
},

setRotationFromEuler: function(m, v, order) {
  var t1, x, y, z, a, b, c, d, e, f, ce, t2, t3, cf, de, df, t4, af, be, bf, ad, bc, bd;
  t1 = v.storage;
  x = t1[0];
  y = t1[1];
  z = t1[2];
  a = Math.cos(x);
  b = Math.sin(x);
  c = Math.cos(y);
  d = Math.sin(y);
  e = Math.cos(z);
  f = Math.sin(z);
  t1 = a * e;
  ce = c * e;
  t2 = m.storage;
  t3 = a * c;
  switch (order) {
    case "YXZ":
      cf = c * f;
      de = d * e;
      df = d * f;
      t2[0] = ce + df * b;
      t2[4] = de * b - cf;
      t2[8] = a * d;
      t2[1] = a * f;
      t2[5] = t1;
      t2[9] = -b;
      t2[2] = cf * b - de;
      t2[6] = df + ce * b;
      t2[10] = t3;
      break;
    case "ZXY":
      cf = c * f;
      de = d * e;
      df = d * f;
      t2[0] = ce - df * b;
      t4 = -a;
      t2[4] = t4 * f;
      t2[8] = de + cf * b;
      t2[1] = cf + de * b;
      t2[5] = t1;
      t2[9] = df - ce * b;
      t2[2] = t4 * d;
      t2[6] = b;
      t2[10] = t3;
      break;
    case "ZYX":
      af = a * f;
      be = b * e;
      bf = b * f;
      t2[0] = ce;
      t2[4] = be * d - af;
      t2[8] = t1 * d + bf;
      t2[1] = c * f;
      t2[5] = bf * d + t1;
      t2[9] = af * d - be;
      t2[2] = -d;
      t2[6] = b * c;
      t2[10] = t3;
      break;
    case "YZX":
      ad = a * d;
      bc = b * c;
      bd = b * d;
      t2[0] = ce;
      t2[4] = bd - t3 * f;
      t2[8] = bc * f + ad;
      t2[1] = f;
      t2[5] = t1;
      t2[9] = -b * e;
      t2[2] = -d * e;
      t2[6] = ad * f + bc;
      t2[10] = t3 - bd * f;
      break;
    case "XZY":
      ad = a * d;
      bc = b * c;
      bd = b * d;
      t2[0] = ce;
      t2[4] = -f;
      t2[8] = d * e;
      t2[1] = t3 * f + bd;
      t2[5] = t1;
      t2[9] = ad * f - bc;
      t2[2] = bc * f - ad;
      t2[6] = b * e;
      t2[10] = bd * f + t3;
      break;
    default:
      af = a * f;
      be = b * e;
      bf = b * f;
      t2[0] = ce;
      t2[4] = -c * f;
      t2[8] = d;
      t2[1] = af + be * d;
      t2[5] = t1 - bf * d;
      t2[9] = -b * c;
      t2[2] = bf - t1 * d;
      t2[6] = be + af * d;
      t2[10] = t3;
      break;
  }
  return m;
},

setRotationFromQuaternion: function(m, q) {
  var t1, x, y, z, w, x2, y2, z2, xx, xy, xz, yy, yz, zz, wx, wy, wz;
  t1 = q.storage;
  x = t1[0];
  y = t1[1];
  z = t1[2];
  w = t1[3];
  x2 = x + x;
  y2 = y + y;
  z2 = z + z;
  xx = x * x2;
  xy = x * y2;
  xz = x * z2;
  yy = y * y2;
  yz = y * z2;
  zz = z * z2;
  wx = w * x2;
  wy = w * y2;
  wz = w * z2;
  t1 = m.storage;
  t1[0] = 1 - (yy + zz);
  t1[4] = xy - wz;
  t1[8] = xz + wy;
  t1[1] = xy + wz;
  t1[5] = 1 - (xx + zz);
  t1[9] = yz - wx;
  t1[2] = xz - wy;
  t1[6] = yz + wx;
  t1[10] = 1 - (xx + yy);
  return m;
},

calcMaxScaleOnAxis: function(te) {
  var t1 = P.max(te.$index(te, 0) * te.$index(te, 0) + te.$index(te, 1) * te.$index(te, 1) + te.$index(te, 2) * te.$index(te, 2), P.max(te.$index(te, 4) * te.$index(te, 4) + te.$index(te, 5) * te.$index(te, 5) + te.$index(te, 6) * te.$index(te, 6), te.$index(te, 8) * te.$index(te, 8) + te.$index(te, 9) * te.$index(te, 9) + te.$index(te, 10) * te.$index(te, 10)));
  return Math.sqrt(t1);
},

calcEulerFromRotationMatrix: function(m, order) {
  var clamp, t1, m11, m12, m13, m21, m22, m23, m31, m32, m33, y, x, z;
  clamp = new S.calcEulerFromRotationMatrix_closure();
  t1 = m.storage;
  m11 = t1[0];
  m12 = t1[4];
  m13 = t1[8];
  m21 = t1[1];
  m22 = t1[5];
  m23 = t1[9];
  m31 = t1[2];
  m32 = t1[6];
  m33 = t1[10];
  if (order === "XYZ") {
    t1 = clamp.call$1(m13);
    if (typeof t1 !== "number")
      H.throwExpression(new P.ArgumentError(t1));
    y = Math.asin(t1);
    if (Math.abs(m13) < 0.99999) {
      x = Math.atan2(-m23, m33);
      z = Math.atan2(-m12, m11);
    } else {
      x = Math.atan2(m21, m22);
      z = 0;
    }
  } else if (order === "YXZ") {
    t1 = J.$negate$n(clamp.call$1(m23));
    if (typeof t1 !== "number")
      H.throwExpression(new P.ArgumentError(t1));
    x = Math.asin(t1);
    if (Math.abs(m23) < 0.99999) {
      y = Math.atan2(m13, m33);
      z = Math.atan2(m21, m22);
    } else {
      y = Math.atan2(-m31, m11);
      z = 0;
    }
  } else if (order === "ZXY") {
    t1 = clamp.call$1(m32);
    if (typeof t1 !== "number")
      H.throwExpression(new P.ArgumentError(t1));
    x = Math.asin(t1);
    if (Math.abs(m32) < 0.99999) {
      y = Math.atan2(-m31, m33);
      z = Math.atan2(-m12, m22);
    } else {
      z = Math.atan2(m13, m11);
      y = 0;
    }
  } else if (order === "ZYX") {
    t1 = J.$negate$n(clamp.call$1(m31));
    if (typeof t1 !== "number")
      H.throwExpression(new P.ArgumentError(t1));
    y = Math.asin(t1);
    if (Math.abs(m31) < 0.99999) {
      x = Math.atan2(m32, m33);
      z = Math.atan2(m21, m11);
    } else {
      z = Math.atan2(-m12, m22);
      x = 0;
    }
  } else if (order === "YZX") {
    t1 = clamp.call$1(m21);
    if (typeof t1 !== "number")
      H.throwExpression(new P.ArgumentError(t1));
    z = Math.asin(t1);
    if (Math.abs(m21) < 0.99999) {
      x = Math.atan2(-m23, m22);
      y = Math.atan2(-m31, m11);
    } else {
      y = Math.atan2(m31, m33);
      x = 0;
    }
  } else if (order === "XZY") {
    t1 = J.$negate$n(clamp.call$1(m12));
    if (typeof t1 !== "number")
      H.throwExpression(new P.ArgumentError(t1));
    z = Math.asin(t1);
    if (Math.abs(m12) < 0.99999) {
      x = Math.atan2(m32, m22);
      y = Math.atan2(m13, m11);
    } else {
      x = Math.atan2(-m13, m33);
      y = 0;
    }
  } else {
    x = null;
    y = null;
    z = null;
  }
  t1 = new Float32Array(3);
  t1.$dartCachedLength = t1.length;
  t1 = new T.Vector3(t1);
  t1.setValues$3(x, y, z);
  return t1;
},

Camera: {"": "Object3D;",
  lookAt$1: function(vector) {
    var t1 = this.matrix;
    S.makeLookAt(t1, this.position, vector, this.up);
    if (this.rotationAutoUpdate)
      this.rotation = S.calcEulerFromRotationMatrix(t1, this.eulerOrder);
  },
  $isCamera: true
},

PerspectiveCamera: {"": "Camera;fov,aspect,_fullWidth,_fullHeight,_x,_y,_width,_height,matrixWorldInverse,projectionMatrix,projectionMatrixInverse,near,far,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,__data",
  updateProjectionMatrix$0: function() {
    this.projectionMatrix = T.makePerspectiveMatrix(this.fov * 0.017453292519943295, this.aspect, this.near, this.far);
  }
},

Color: {"": "Object;_r,_g,_b",
  setRGB$3: function(newR, newG, newB) {
    this._r = newR;
    this._g = newG;
    this._b = newB;
    return this;
  },
  setHex$1: function(hex) {
    var h = C.JSInt_methods.toInt$0(C.JSNumber_methods.toInt$0(Math.floor(hex)));
    this._r = C.JSInt_methods.$shr(h & 16711680, 16) / 255;
    this._g = C.JSInt_methods.$shr(h & 65280, 8) / 255;
    this._b = (h & 255) / 255;
    return this;
  },
  clone$0: function(_) {
    return S.Color$(null).setRGB$3(this._r, this._g, this._b);
  },
  Color$1: function(hex) {
    if (typeof hex === "number")
      this.setHex$1(hex);
  },
  static: {
Color$: function(hex) {
  var t1 = new S.Color(1, 1, 1);
  t1.Color$1(hex);
  return t1;
}}

},

Frustum: {"": "Object;planes",
  setFromMatrix$1: function(m) {
    var me0, me1, me2, me3, me4, me5, me6, me7, me8, me9, me10, me11, me12, me13, me14, me15, t1, i, plane, t2, t3, t4, divisor;
    me0 = m.$index(m, 0);
    me1 = m.$index(m, 1);
    me2 = m.$index(m, 2);
    me3 = m.$index(m, 3);
    me4 = m.$index(m, 4);
    me5 = m.$index(m, 5);
    me6 = m.$index(m, 6);
    me7 = m.$index(m, 7);
    me8 = m.$index(m, 8);
    me9 = m.$index(m, 9);
    me10 = m.$index(m, 10);
    me11 = m.$index(m, 11);
    me12 = m.$index(m, 12);
    me13 = m.$index(m, 13);
    me14 = m.$index(m, 14);
    me15 = m.$index(m, 15);
    t1 = this.planes;
    t1[0].setValues$4(me3 - me0, me7 - me4, me11 - me8, me15 - me12);
    t1[1].setValues$4(me3 + me0, me7 + me4, me11 + me8, me15 + me12);
    t1[2].setValues$4(me3 + me1, me7 + me5, me11 + me9, me15 + me13);
    t1[3].setValues$4(me3 - me1, me7 - me5, me11 - me9, me15 - me13);
    t1[4].setValues$4(me3 - me2, me7 - me6, me11 - me10, me15 - me14);
    t1[5].setValues$4(me3 + me2, me7 + me6, me11 + me10, me15 + me14);
    for (i = 0; i < 6; ++i) {
      plane = t1[i];
      t2 = plane.storage;
      t3 = t2[0];
      t4 = t2[1];
      t2 = t2[2];
      divisor = Math.sqrt(t3 * t3 + t4 * t4 + t2 * t2);
      if (divisor > 0)
        plane.scale$1(plane, 1 / divisor);
    }
  },
  contains$1: function(_, object) {
    var m, radius, t1, i;
    m = object.matrixWorld;
    radius = -object.get$geometry().boundingSphere.radius * S.calcMaxScaleOnAxis(m);
    for (t1 = this.planes, i = 0; i < 6; ++i)
      if (t1[i].storage[0] * m.$index(m, 12) + t1[i].storage[1] * m.$index(m, 13) + t1[i].storage[2] * m.$index(m, 14) + t1[i].storage[3] <= radius)
        return false;
    return true;
  },
  static: {
"": "Frustum____v1",
Frustum$: function() {
  var t1, t2, t3, t4, t5, t6;
  t1 = new Float32Array(4);
  t1.$dartCachedLength = t1.length;
  t1 = new T.Vector4(t1);
  t1.setValues$4(0, 0, 0, 1);
  t2 = new Float32Array(4);
  t2.$dartCachedLength = t2.length;
  t2 = new T.Vector4(t2);
  t2.setValues$4(0, 0, 0, 1);
  t3 = new Float32Array(4);
  t3.$dartCachedLength = t3.length;
  t3 = new T.Vector4(t3);
  t3.setValues$4(0, 0, 0, 1);
  t4 = new Float32Array(4);
  t4.$dartCachedLength = t4.length;
  t4 = new T.Vector4(t4);
  t4.setValues$4(0, 0, 0, 1);
  t5 = new Float32Array(4);
  t5.$dartCachedLength = t5.length;
  t5 = new T.Vector4(t5);
  t5.setValues$4(0, 0, 0, 1);
  t6 = new Float32Array(4);
  t6.$dartCachedLength = t6.length;
  t6 = new T.Vector4(t6);
  t6.setValues$4(0, 0, 0, 1);
  return new S.Frustum([t1, t2, t3, t4, t5, t6]);
}}

},

Geometry: {"": "Object;id,name,vertices,colors,normals,materials,faces,faceUvs,faceVertexUvs,morphTargets,morphColors,morphNormals,skinWeights,skinIndices,lineDistances,__tmpVertices,boundingBox,boundingSphere,hasTangents,_dynamic,bones,animation,__data",
  computeBoundingSphere$0: function() {
    var t1, maxRadiusSq;
    t1 = {};
    t1.radiusSq_0 = null;
    maxRadiusSq = H.IterableMixinWorkaround_fold(this.vertices, 0, new S.Geometry_computeBoundingSphere_closure(t1));
    if (typeof maxRadiusSq !== "number")
      H.throwExpression(new P.ArgumentError(maxRadiusSq));
    this.boundingSphere = new S.BoundingSphere(Math.sqrt(maxRadiusSq));
  },
  clone$0: function(_) {
  },
  get$_data: function() {
    if (this.__data == null)
      this.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    return this.__data;
  },
  $index: function(_, key) {
    var t1 = this.get$_data();
    return t1.$index(t1, key);
  },
  $indexSet: function(_, key, value) {
    var t1 = this.get$_data();
    t1.$indexSet(t1, key, value);
    return value;
  },
  static: {
Geometry$: function() {
  var t1, t2;
  t1 = $.GeometryCount;
  $.GeometryCount = t1 + 1;
  t2 = [];
  H.setRuntimeTypeInfo(t2, [T.Vector3]);
  return new S.Geometry(t1, "", t2, [], [], [], [], [[]], [[]], [], [], [], [], [], [], null, null, null, false, false, null, null, null);
}}

},

Geometry_computeBoundingSphere_closure: {"": "Closure;box_0",
  call$2: function(curMaxRadiusSq, vertex) {
    var t1 = this.box_0;
    t1.radiusSq_0 = vertex.get$length2();
    t1 = t1.radiusSq_0;
    if (typeof t1 !== "number")
      throw t1.$gt();
    if (typeof curMaxRadiusSq !== "number")
      throw H.iae(curMaxRadiusSq);
    if (t1 > curMaxRadiusSq)
      ;
    else
      t1 = curMaxRadiusSq;
    return t1;
  },
  $is_args2: true
},

BoundingSphere: {"": "Object;radius"},

Object3D: {"": "Object;visible<",
  add$1: function(_, object) {
    var t1, scene, scene0;
    if (object === this) {
      P.print("THREE.Object3D.add: An object can't be added as a child of itself.");
      return;
    }
    t1 = object.parent;
    if (t1 != null)
      t1.remove$1(t1, object);
    object.parent = this;
    this.children.push(object);
    for (scene = this; scene0 = scene.parent, scene0 != null; scene = scene0)
      ;
    if (typeof scene === "object" && scene !== null && !!scene.$isScene)
      scene.addObject$1(object);
  },
  remove$1: function(_, object) {
    var t1, index, scene, scene0;
    t1 = this.children;
    index = H.Arrays_indexOf(t1, object, 0, t1.length);
    if (index !== -1) {
      object.parent = null;
      C.JSArray_methods.removeAt$1(t1, index);
      for (scene = this; scene0 = scene.parent, scene0 != null; scene = scene0)
        ;
      if (typeof scene === "object" && scene !== null && !!scene.$isScene)
        scene.removeObject$1(object);
    }
  },
  updateMatrix$0: function() {
    var t1, t2, t3;
    t1 = this.matrix;
    if (this.useQuaternion)
      S.setRotationFromQuaternion(t1, this.quaternion);
    else
      S.setRotationFromEuler(t1, this.rotation, this.eulerOrder);
    t1 = this.matrix;
    t1.setTranslation$1(this.position);
    t2 = this.scale;
    t3 = t2.storage;
    if (t3[0] !== 1 || t3[1] !== 1 || t3[2] !== 1) {
      t1.scale$1(t1, t2);
      this.boundRadiusScale = P.max(t3[0], P.max(t3[1], t3[2]));
    }
    this.matrixWorldNeedsUpdate = true;
  },
  updateMatrixWorld$1$force: function(force) {
    var t1, t2, t3;
    t1 = {};
    t1.force_0 = force;
    if (this.matrixAutoUpdate)
      this.updateMatrix$0();
    if (this.matrixWorldNeedsUpdate || t1.force_0) {
      t2 = this.parent;
      t3 = this.matrix;
      if (t2 != null) {
        t2 = t2.matrixWorld;
        this.matrixWorld = t2.$mul(t2, t3);
      } else {
        t2 = new Float32Array(16);
        t2.$dartCachedLength = t2.length;
        t2 = new T.Matrix4(t2);
        t2.setFrom$1(t3);
        this.matrixWorld = t2;
      }
      this.matrixWorldNeedsUpdate = false;
      t1.force_0 = true;
    }
    H.IterableMixinWorkaround_forEach(this.children, new S.Object3D_updateMatrixWorld_closure(t1));
  },
  updateMatrixWorld$0: function() {
    return this.updateMatrixWorld$1$force(false);
  },
  clone$0: function(_) {
  },
  get$_data: function() {
    if (this.__data == null)
      this.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    return this.__data;
  },
  $index: function(_, key) {
    var t1 = this.get$_data();
    return t1.$index(t1, key);
  },
  $indexSet: function(_, key, value) {
    var t1 = this.get$_data();
    t1.$indexSet(t1, key, value);
    return value;
  }
},

Object3D_updateMatrixWorld_closure: {"": "Closure;box_0",
  call$1: function(c) {
    return c.updateMatrixWorld$1$force(this.box_0.force_0);
  },
  $is_args1: true
},

Projector: {"": "Object;_objectPool,_vertexPool,_face4Pool,_face3Pool,_linePool,_particlePool,_objectCount,_vertexCount,_face3Count,_face4Count,_lineCount,_particleCount,_object,_vertex,_line,_particle,_vector3,_vector4,_clippedVertex1PositionScreen,_clippedVertex2PositionScreen,_renderData,_viewProjectionMatrix,_modelViewProjectionMatrix,_frustum",
  _projectObject$1: function($parent) {
    var t1, cl, t2, c, object;
    t1 = $parent.children;
    cl = t1.length;
    for (t2 = this._frustum, c = 0; c < cl; ++c) {
      if (c >= t1.length)
        throw H.ioore(t1, c);
      object = t1[c];
      if (!object.visible)
        continue;
      if (!!object.$isLine) {
        if (!object.frustumCulled || t2.contains$1(t2, object)) {
          this._object = this.getNextObjectInPool$0();
          this._object.object = object;
          this._vector3 = object.matrixWorld.getTranslation$0();
          this._vector3.applyProjection$1(this._viewProjectionMatrix);
          this._object.z = this._vector3.storage[2];
          this._renderData.objects.push(this._object);
        }
      } else if (!!object.$isParticle) {
        this._object = this.getNextObjectInPool$0();
        this._object.object = object;
        this._vector3 = object.matrixWorld.getTranslation$0();
        this._vector3.applyProjection$1(this._viewProjectionMatrix);
        this._object.z = this._vector3.storage[2];
        this._renderData.sprites.push(this._object);
      } else {
        this._object = this.getNextObjectInPool$0();
        this._object.object = object;
        this._vector3 = object.matrixWorld.getTranslation$0();
        this._vector3.applyProjection$1(this._viewProjectionMatrix);
        this._object.z = this._vector3.storage[2];
        this._renderData.objects.push(this._object);
      }
      this._projectObject$1(object);
    }
  },
  projectGraph$2: function(root, sort) {
    var t1, t2;
    this._objectCount = 0;
    this._renderData.objects = [];
    this._renderData.sprites = [];
    this._renderData.lights = [];
    this._projectObject$1(root);
    if (sort) {
      t1 = this._renderData.objects;
      t2 = this.get$painterSort();
      H.IterableMixinWorkaround_sortList(t1, t2);
    }
    return this._renderData;
  },
  projectScene$3: function(scene, camera, sort) {
    var t1, near, far, t2, t3;
    t1 = {};
    near = camera.near;
    far = camera.far;
    t1.visible_0 = false;
    t1.v_1 = null;
    t1.vl_2 = null;
    t1.f_3 = null;
    t1.fl_4 = null;
    t1.n_5 = null;
    t1.nl_6 = null;
    t1.c_7 = null;
    t1.cl_8 = null;
    t1.u_9 = null;
    t1.ul_10 = null;
    t1.object_11 = null;
    t1.modelMatrix_12 = null;
    t1.rotationMatrix_13 = null;
    t1.geometry_14 = null;
    t1.geometryMaterials_15 = null;
    t1.vertices_16 = null;
    t1.normal_17 = null;
    t1.faces_18 = null;
    t1.face_19 = null;
    t1._face_20 = null;
    t1.faceVertexNormals_21 = null;
    t1.faceVertexUvs_22 = null;
    t1.v1_23 = null;
    t1.v2_24 = null;
    t1.isFaceMaterial_25 = null;
    t1.material_26 = null;
    t1.side_27 = null;
    this._face3Count = 0;
    this._face4Count = 0;
    this._lineCount = 0;
    this._particleCount = 0;
    this._renderData.elements = [];
    scene.updateMatrixWorld$0();
    if (camera.parent == null)
      camera.updateMatrixWorld$0();
    t2 = camera.matrixWorldInverse;
    t2.copyInverse$1(camera.matrixWorld);
    t3 = camera.projectionMatrix;
    this._viewProjectionMatrix = t3.$mul(t3, t2);
    this._frustum.setFromMatrix$1(this._viewProjectionMatrix);
    this._renderData = this.projectGraph$2(scene, false);
    H.IterableMixinWorkaround_forEach(this._renderData.objects, new S.Projector_projectScene_closure(t1, this, near, far));
    H.IterableMixinWorkaround_forEach(this._renderData.sprites, new S.Projector_projectScene_closure0(t1, this, camera));
    if (sort) {
      t1 = this._renderData.elements;
      t2 = this.get$painterSort();
      H.IterableMixinWorkaround_sortList(t1, t2);
    }
    return this._renderData;
  },
  getNextObjectInPool$0: function() {
    var t1, t2, t3, object;
    t1 = this._objectCount;
    t2 = this._objectPool;
    t3 = t2.length;
    if (typeof t1 !== "number")
      throw t1.$lt();
    if (t1 < t3) {
      if (t1 < 0)
        throw H.ioore(t2, t1);
      object = t2[t1];
    } else {
      object = new S.RenderableObject(null, null);
      t2.push(object);
    }
    t1 = this._objectCount;
    if (typeof t1 !== "number")
      throw t1.$add();
    this._objectCount = t1 + 1;
    return object;
  },
  getNextVertexInPool$0: function() {
    var t1, t2, t3, vertex, t4;
    t1 = this._vertexCount;
    t2 = this._vertexPool;
    t3 = t2.length;
    if (typeof t1 !== "number")
      throw t1.$lt();
    if (t1 < t3) {
      if (t1 < 0)
        throw H.ioore(t2, t1);
      vertex = t2[t1];
    } else {
      t1 = new Float32Array(3);
      t1.$dartCachedLength = t1.length;
      t3 = new Float32Array(4);
      t3.$dartCachedLength = t3.length;
      t3 = new T.Vector4(t3);
      t4 = t3.storage;
      t4[3] = 1;
      t4[2] = 0;
      t4[1] = 0;
      t4[0] = 0;
      vertex = new S.RenderableVertex(new T.Vector3(t1), t3, true);
      t2.push(vertex);
    }
    t1 = this._vertexCount;
    if (typeof t1 !== "number")
      throw t1.$add();
    this._vertexCount = t1 + 1;
    return vertex;
  },
  getNextLineInPool$0: function() {
    var t1, t2, t3, line, t4, t5, t6;
    t1 = this._lineCount;
    t2 = this._linePool;
    t3 = t2.length;
    if (typeof t1 !== "number")
      throw t1.$lt();
    if (t1 < t3) {
      if (t1 < 0)
        throw H.ioore(t2, t1);
      line = t2[t1];
    } else {
      t1 = new Float32Array(3);
      t1.$dartCachedLength = t1.length;
      t3 = new Float32Array(4);
      t3.$dartCachedLength = t3.length;
      t3 = new T.Vector4(t3);
      t4 = t3.storage;
      t4[3] = 1;
      t4[2] = 0;
      t4[1] = 0;
      t4[0] = 0;
      t4 = new Float32Array(3);
      t4.$dartCachedLength = t4.length;
      t5 = new Float32Array(4);
      t5.$dartCachedLength = t5.length;
      t5 = new T.Vector4(t5);
      t6 = t5.storage;
      t6[3] = 1;
      t6[2] = 0;
      t6[1] = 0;
      t6[0] = 0;
      line = new S.RenderableLine(null, new S.RenderableVertex(new T.Vector3(t1), t3, true), new S.RenderableVertex(new T.Vector3(t4), t5, true), null);
      t2.push(line);
    }
    t1 = this._lineCount;
    if (typeof t1 !== "number")
      throw t1.$add();
    this._lineCount = t1 + 1;
    return line;
  },
  getNextParticleInPool$0: function() {
    var t1, t2, t3, particle;
    t1 = this._particleCount;
    t2 = this._particlePool;
    t3 = t2.length;
    if (typeof t1 !== "number")
      throw t1.$lt();
    if (t1 < t3) {
      if (t1 < 0)
        throw H.ioore(t2, t1);
      particle = t2[t1];
    } else {
      t1 = new Float32Array(2);
      t1.$dartCachedLength = t1.length;
      particle = new S.RenderableParticle(null, null, null, null, new T.Vector2(t1), null);
      t2.push(particle);
    }
    t1 = this._particleCount;
    if (typeof t1 !== "number")
      throw t1.$add();
    this._particleCount = t1 + 1;
    return particle;
  },
  painterSort$2: function(a, b) {
    return J.compareTo$1$ns(J.get$z$x(b), J.get$z$x(a));
  },
  get$painterSort: function() {
    return new S.BoundClosure$20(this, S.Projector.prototype.painterSort$2, null, "painterSort$2");
  },
  clipLine$2: function(s1, s2) {
    var t1, t2, bc1near, t3, t4, bc2near, bc1far, bc2far, alpha1, alpha2;
    t1 = s1.storage;
    t2 = t1[2];
    t1 = t1[3];
    bc1near = t2 + t1;
    t3 = s2.storage;
    t4 = t3[2];
    t3 = t3[3];
    bc2near = t4 + t3;
    bc1far = -t2 + t1;
    bc2far = -t4 + t3;
    if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0)
      return true;
    else {
      t1 = bc1near < 0;
      if (!(t1 && bc2near < 0))
        t2 = bc1far < 0 && bc2far < 0;
      else
        t2 = true;
      if (t2)
        return false;
      else {
        if (t1) {
          alpha1 = P.max(0, bc1near / (bc1near - bc2near));
          alpha2 = 1;
        } else {
          alpha2 = bc2near < 0 ? P.min(1, bc1near / (bc1near - bc2near)) : 1;
          alpha1 = 0;
        }
        if (bc1far < 0)
          alpha1 = P.max(alpha1, bc1far / (bc1far - bc2far));
        else if (bc2far < 0)
          alpha2 = P.min(alpha2, bc1far / (bc1far - bc2far));
        if (alpha2 < alpha1)
          return false;
        else {
          t1 = s2.$sub(s2, s1);
          s1 = s1.$add(s1, t1.scale$1(t1, alpha1));
          t1 = s1.$sub(s1, s2);
          s2.$add(s2, t1.scale$1(t1, 1 - alpha2));
          return true;
        }
      }
    }
  },
  static: {
Projector$: function() {
  var t1, t2, t3, t4, t5, t6, t7, t8;
  t1 = S.ProjectorRenderData$();
  t2 = new Float32Array(3);
  t2.$dartCachedLength = t2.length;
  t3 = new Float32Array(4);
  t3.$dartCachedLength = t3.length;
  t3 = new T.Vector4(t3);
  t3.setValues$4(0, 0, 0, 1);
  t4 = new Float32Array(16);
  t4.$dartCachedLength = t4.length;
  t4 = new T.Matrix4(t4);
  t4.setIdentity$0();
  t5 = new Float32Array(16);
  t5.$dartCachedLength = t5.length;
  t5 = new T.Matrix4(t5);
  t5.setIdentity$0();
  t6 = S.Frustum$();
  t7 = new Float32Array(4);
  t7.$dartCachedLength = t7.length;
  t7 = new T.Vector4(t7);
  t7.setValues$4(0, 0, 0, 1);
  t8 = new Float32Array(4);
  t8.$dartCachedLength = t8.length;
  t8 = new T.Vector4(t8);
  t8.setValues$4(0, 0, 0, 1);
  return new S.Projector([], [], [], [], [], [], null, null, null, null, null, null, null, null, null, null, new T.Vector3(t2), t3, t7, t8, t1, t4, t5, t6);
}}

},

Projector_projectScene_closure: {"": "Closure;box_0,this_1,near_2,far_3",
  call$1: function(o) {
    var t1, t2, t3, t4, vec, t5, t6, t7, step, t8, t9;
    t1 = this.box_0;
    t1.object_11 = o.get$object();
    t1.modelMatrix_12 = t1.object_11.matrixWorld;
    t2 = this.this_1;
    t2._vertexCount = 0;
    t3 = t1.object_11;
    t4 = J.getInterceptor(t3);
    if (typeof t3 === "object" && t3 !== null && !!t4.$isLine) {
      t3 = t2._viewProjectionMatrix;
      t2._modelViewProjectionMatrix = t3.$mul(t3, t1.modelMatrix_12);
      t1.vertices_16 = t1.object_11.get$geometry().vertices;
      t1.v1_23 = t2.getNextVertexInPool$0();
      t3 = t1.vertices_16;
      if (0 >= t3.length)
        throw H.ioore(t3, 0);
      vec = t3[0];
      t3 = t1.v1_23;
      t4 = vec.storage;
      t5 = t4[0];
      t6 = t4[1];
      t4 = t4[2];
      t7 = new Float32Array(4);
      t7.$dartCachedLength = t7.length;
      t7 = new T.Vector4(t7);
      t7.setValues$4(t5, t6, t4, 1);
      t3.positionScreen = t7;
      t7 = t2._modelViewProjectionMatrix;
      t7.transform$1(t7, t1.v1_23.positionScreen);
      t3 = t1.object_11;
      step = t3.get$type(t3) === 1 ? 2 : 1;
      t1.vl_2 = t1.vertices_16.length;
      t1.v_1 = 1;
      t3 = t2._vertexPool;
      while (true) {
        t4 = t1.v_1;
        t5 = t1.vl_2;
        if (typeof t4 !== "number")
          throw t4.$lt();
        if (typeof t5 !== "number")
          throw H.iae(t5);
        if (!(t4 < t5))
          break;
        c$0: {
          t1.v1_23 = t2.getNextVertexInPool$0();
          t4 = t1.vertices_16;
          t5 = t1.v_1;
          if (t5 >>> 0 !== t5 || t5 >= t4.length)
            throw H.ioore(t4, t5);
          vec = t4[t5];
          t5 = t1.v1_23;
          t4 = vec.storage;
          t6 = t4[0];
          t7 = t4[1];
          t4 = t4[2];
          t8 = new Float32Array(4);
          t8.$dartCachedLength = t8.length;
          t8 = new T.Vector4(t8);
          t9 = t8.storage;
          t9[3] = 1;
          t9[2] = t4;
          t9[1] = t7;
          t9[0] = t6;
          t5.positionScreen = t8;
          t8 = t2._modelViewProjectionMatrix;
          t8.transform$1(t8, t1.v1_23.positionScreen);
          t4 = t1.v_1;
          if (typeof t4 !== "number")
            throw t4.$add();
          if (C.JSInt_methods.$mod(t4 + 1, step) > 0)
            break c$0;
          t4 = t2._vertexCount;
          if (typeof t4 !== "number")
            throw t4.$sub();
          t4 -= 2;
          if (t4 < 0 || t4 >= t3.length)
            throw H.ioore(t3, t4);
          t1.v2_24 = t3[t4];
          t2._clippedVertex1PositionScreen.setFrom$1(t1.v1_23.positionScreen);
          t2._clippedVertex2PositionScreen.setFrom$1(t1.v2_24.positionScreen);
          if (t2.clipLine$2(t2._clippedVertex1PositionScreen, t2._clippedVertex2PositionScreen)) {
            t4 = t2._clippedVertex1PositionScreen;
            t2._clippedVertex1PositionScreen = t4.$div(t4, t4.storage[3]);
            t4 = t2._clippedVertex2PositionScreen;
            t2._clippedVertex2PositionScreen = t4.$div(t4, t4.storage[3]);
            t2._line = t2.getNextLineInPool$0();
            t2._line.v1.positionScreen.setFrom$1(t2._clippedVertex1PositionScreen);
            t2._line.v2.positionScreen.setFrom$1(t2._clippedVertex2PositionScreen);
            t2._line.z = P.max(t2._clippedVertex1PositionScreen.storage[2], t2._clippedVertex2PositionScreen.storage[2]);
            t2._line.material = t1.object_11.get$material();
            t2._renderData.elements.push(t2._line);
          }
        }
        t4 = t1.v_1;
        if (typeof t4 !== "number")
          throw t4.$add();
        t1.v_1 = t4 + 1;
      }
    }
  },
  $is_args1: true
},

Projector_projectScene__closure: {"": "Closure;box_0,this_4,near_5,far_6",
  call$1: function(v) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this.this_4;
    t1._vertex = t1.getNextVertexInPool$0();
    t1._vertex.positionWorld.setFrom$1(v);
    t1._vertex.positionWorld.applyProjection$1(this.box_0.modelMatrix_12);
    t2 = t1._vertex;
    t3 = t2.positionWorld.storage;
    t4 = t3[0];
    t5 = t3[1];
    t3 = t3[2];
    t6 = new Float32Array(4);
    t6.$dartCachedLength = t6.length;
    t6 = new T.Vector4(t6);
    t6.setValues$4(t4, t5, t3, 1);
    t2.positionScreen = t6;
    t6 = t1._viewProjectionMatrix;
    t6.transform$1(t6, t1._vertex.positionScreen);
    t1 = t1._vertex;
    t6 = t1.positionScreen.storage;
    t6[0] = t6[0] / t6[3];
    t6[1] = t6[1] / t6[3];
    t2 = t6[2];
    t1.visible = t2 > this.near_5 && t2 < this.far_6;
  },
  $is_args1: true
},

Projector_projectScene__closure0: {"": "Closure;this_7",
  call$1: function(idx) {
    var t1 = this.this_7._vertexPool;
    if (idx >>> 0 !== idx || idx >= t1.length)
      throw H.ioore(t1, idx);
    return t1[idx];
  },
  $is_args1: true
},

Projector_projectScene__closure1: {"": "Closure;",
  call$1: function(v) {
    return v.get$visible();
  },
  $is_args1: true
},

Projector_projectScene__closure2: {"": "Closure;",
  call$1: function(v) {
    return J.clone$0$x(v);
  },
  $is_args1: true
},

Projector_projectScene_closure0: {"": "Closure;box_0,this_8,camera_9",
  call$1: function(o) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11;
    t1 = this.box_0;
    t1.object_11 = o.get$object();
    t1.modelMatrix_12 = t1.object_11.matrixWorld;
    t2 = t1.object_11;
    t3 = J.getInterceptor(t2);
    if (typeof t2 === "object" && t2 !== null && !!t3.$isParticle) {
      t2 = this.this_8;
      t3 = t2._vector4;
      t4 = t1.modelMatrix_12;
      t4 = t4.$index(t4, 12);
      t5 = t1.modelMatrix_12;
      t5 = t5.$index(t5, 13);
      t6 = t1.modelMatrix_12;
      t3.setValues$4(t4, t5, t6.$index(t6, 14), 1);
      t6 = t2._viewProjectionMatrix;
      t6.transform$1(t6, t3);
      t3 = t3.storage;
      t3[2] = t3[2] / t3[3];
      t4 = t3[2];
      if (t4 > 0 && t4 < 1) {
        t2._particle = t2.getNextParticleInPool$0();
        t4 = t2._particle;
        t5 = t3[0];
        t6 = t3[3];
        t4.x = t5 / t6;
        t2._particle.y = t3[1] / t6;
        t2._particle.z = t3[2];
        t2._particle.rotation = t1.object_11.rotation.storage[2];
        t4 = t2._particle;
        t7 = t4.scale;
        t8 = t1.object_11.scale.storage[0];
        t4 = t4.x;
        t9 = this.camera_9;
        t10 = t9.projectionMatrix.storage;
        t11 = t10[0];
        t10 = t10[12];
        if (typeof t4 !== "number")
          throw t4.$sub();
        t7.storage[0] = t8 * Math.abs(t4 - (t5 + t11) / (t6 + t10));
        t10 = t2._particle;
        t6 = t10.scale;
        t11 = t1.object_11.scale.storage[1];
        t10 = t10.y;
        t5 = t3[1];
        t9 = t9.projectionMatrix.storage;
        t4 = t9[5];
        t3 = t3[3];
        t9 = t9[13];
        if (typeof t10 !== "number")
          throw t10.$sub();
        t6.storage[1] = t11 * Math.abs(t10 - (t5 + t4) / (t3 + t9));
        t2._particle.material = t1.object_11.get$material();
        t2._renderData.elements.push(t2._particle);
      }
    }
  },
  $is_args1: true
},

ProjectorRenderData: {"": "Object;objects,sprites,lights,elements", static: {
ProjectorRenderData$: function() {
  return new S.ProjectorRenderData([], [], [], []);
}}
},

Rectangle0: {"": "Object;_left,_top,_right,_bottom,_width,_height,_isEmpty",
  resize$0: function() {
    var t1, t2;
    t1 = this._right;
    t2 = this._left;
    if (typeof t1 !== "number")
      throw t1.$sub();
    this._width = t1 - t2;
    t2 = this._bottom;
    t1 = this._top;
    if (typeof t2 !== "number")
      throw t2.$sub();
    this._height = t2 - t1;
  },
  setValues$4: function(left, $top, right, bottom) {
    this._isEmpty = false;
    this._left = left;
    this._top = $top;
    this._right = right;
    this._bottom = bottom;
    this.resize$0();
  },
  addPoint$2: function(x, y) {
    var t1;
    if (this._isEmpty) {
      this._isEmpty = false;
      this._left = x;
      this._top = y;
      this._right = x;
      this._bottom = y;
      this.resize$0();
    } else {
      t1 = this._left;
      this._left = t1 < x ? t1 : x;
      t1 = this._top;
      this._top = t1 < y ? t1 : y;
      t1 = this._right;
      if (typeof t1 !== "number")
        throw t1.$gt();
      if (t1 > x)
        ;
      else
        t1 = x;
      this._right = t1;
      t1 = this._bottom;
      if (typeof t1 !== "number")
        throw t1.$gt();
      if (t1 > y)
        ;
      else
        t1 = y;
      this._bottom = t1;
      this.resize$0();
    }
  },
  add3Points$6: function(x1, y1, x2, y2, x3, y3) {
    var t1;
    if (this._isEmpty) {
      this._isEmpty = false;
      if (x1 < x2)
        t1 = x1 < x3 ? x1 : x3;
      else
        t1 = x2 < x3 ? x2 : x3;
      this._left = t1;
      if (y1 < y2)
        t1 = y1 < y3 ? y1 : y3;
      else
        t1 = y2 < y3 ? y2 : y3;
      this._top = t1;
      if (x1 > x2)
        t1 = x1 > x3 ? x1 : x3;
      else
        t1 = x2 > x3 ? x2 : x3;
      this._right = t1;
      if (y1 > y2)
        t1 = y1 > y3 ? y1 : y3;
      else
        t1 = y2 > y3 ? y2 : y3;
      this._bottom = t1;
      this.resize$0();
    } else {
      if (x1 < x2)
        if (x1 < x3) {
          t1 = this._left;
          if (x1 < t1)
            t1 = x1;
        } else {
          t1 = this._left;
          if (x3 < t1)
            t1 = x3;
        }
      else if (x2 < x3) {
        t1 = this._left;
        if (x2 < t1)
          t1 = x2;
      } else {
        t1 = this._left;
        if (x3 < t1)
          t1 = x3;
      }
      this._left = t1;
      if (y1 < y2)
        if (y1 < y3) {
          t1 = this._top;
          if (y1 < t1)
            t1 = y1;
        } else {
          t1 = this._top;
          if (y3 < t1)
            t1 = y3;
        }
      else if (y2 < y3) {
        t1 = this._top;
        if (y2 < t1)
          t1 = y2;
      } else {
        t1 = this._top;
        if (y3 < t1)
          t1 = y3;
      }
      this._top = t1;
      if (x1 > x2)
        if (x1 > x3) {
          t1 = this._right;
          if (typeof t1 !== "number")
            throw H.iae(t1);
          if (x1 > t1)
            t1 = x1;
        } else {
          t1 = this._right;
          if (typeof t1 !== "number")
            throw H.iae(t1);
          if (x3 > t1)
            t1 = x3;
        }
      else if (x2 > x3) {
        t1 = this._right;
        if (typeof t1 !== "number")
          throw H.iae(t1);
        if (x2 > t1)
          t1 = x2;
      } else {
        t1 = this._right;
        if (typeof t1 !== "number")
          throw H.iae(t1);
        if (x3 > t1)
          t1 = x3;
      }
      this._right = t1;
      if (y1 > y2)
        if (y1 > y3) {
          t1 = this._bottom;
          if (typeof t1 !== "number")
            throw H.iae(t1);
          if (y1 > t1)
            t1 = y1;
        } else {
          t1 = this._bottom;
          if (typeof t1 !== "number")
            throw H.iae(t1);
          if (y3 > t1)
            t1 = y3;
        }
      else if (y2 > y3) {
        t1 = this._bottom;
        if (typeof t1 !== "number")
          throw H.iae(t1);
        if (y2 > t1)
          t1 = y2;
      } else {
        t1 = this._bottom;
        if (typeof t1 !== "number")
          throw H.iae(t1);
        if (y3 > t1)
          t1 = y3;
      }
      this._bottom = t1;
      this.resize$0();
    }
  },
  addRectangle$1: function(r) {
    var t1, t2;
    if (this._isEmpty) {
      this._isEmpty = false;
      this._left = r._left;
      this._top = r._top;
      this._right = r._right;
      this._bottom = r._bottom;
      this.resize$0();
    } else {
      t1 = this._left;
      t2 = r._left;
      this._left = t1 < t2 ? t1 : t2;
      t1 = this._top;
      t2 = r._top;
      this._top = t1 < t2 ? t1 : t2;
      t1 = this._right;
      t2 = r._right;
      if (typeof t1 !== "number")
        throw t1.$gt();
      if (typeof t2 !== "number")
        throw H.iae(t2);
      if (t1 > t2)
        ;
      else
        t1 = t2;
      this._right = t1;
      t1 = this._bottom;
      t2 = r._bottom;
      if (typeof t1 !== "number")
        throw t1.$gt();
      if (typeof t2 !== "number")
        throw H.iae(t2);
      if (t1 > t2)
        ;
      else
        t1 = t2;
      this._bottom = t1;
      this.resize$0();
    }
  },
  inflate$1: function(v) {
    var t1;
    this._left = this._left - v;
    this._top = this._top - v;
    t1 = this._right;
    if (typeof t1 !== "number")
      throw t1.$add();
    this._right = t1 + v;
    t1 = this._bottom;
    if (typeof t1 !== "number")
      throw t1.$add();
    this._bottom = t1 + v;
    this.resize$0();
  },
  minSelf$1: function(r) {
    var t1, t2;
    t1 = this._left;
    t2 = r._left;
    this._left = t1 > t2 ? t1 : t2;
    t1 = this._top;
    t2 = r._top;
    this._top = t1 > t2 ? t1 : t2;
    t1 = this._right;
    t2 = r._right;
    if (typeof t1 !== "number")
      throw t1.$lt();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    if (t1 < t2)
      ;
    else
      t1 = t2;
    this._right = t1;
    t1 = this._bottom;
    t2 = r._bottom;
    if (typeof t1 !== "number")
      throw t1.$lt();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    if (t1 < t2)
      ;
    else
      t1 = t2;
    this._bottom = t1;
    this.resize$0();
  },
  intersects$1: function(_, r) {
    var t1, t2;
    t1 = this._right;
    t2 = r._left;
    if (typeof t1 !== "number")
      throw t1.$lt();
    if (t1 < t2)
      return false;
    t1 = this._left;
    t2 = r._right;
    if (typeof t2 !== "number")
      throw H.iae(t2);
    if (t1 > t2)
      return false;
    t1 = this._bottom;
    t2 = r._top;
    if (typeof t1 !== "number")
      throw t1.$lt();
    if (t1 < t2)
      return false;
    t1 = this._top;
    t2 = r._bottom;
    if (typeof t2 !== "number")
      throw H.iae(t2);
    if (t1 > t2)
      return false;
    return true;
  },
  empty$0: function() {
    this._isEmpty = true;
    this._left = 0;
    this._top = 0;
    this._right = 0;
    this._bottom = 0;
    this.resize$0();
  },
  static: {
Rectangle$: function() {
  return new S.Rectangle0(0, 0, 0, 0, 0, 0, true);
}}

},

calcEulerFromRotationMatrix_closure: {"": "Closure;",
  call$1: function(x) {
    return P.min(P.max(x, -1), 1);
  },
  $is_args1: true
},

LineBasicMaterial: {"": "Material;color,linewidth,linecap,linejoin,fog,vertexColors,name,id,side,opacity,blending,blendSrc,blendDst,blendEquation,alphaTest,polygonOffset,polygonOffsetFactor,polygonOffsetUnits,transparent,depthTest,depthWrite,overdraw,visible,needsUpdate,__data", $isLineBasicMaterial: true},

Material: {"": "Object;visible<",
  get$_data: function() {
    if (this.__data == null)
      this.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    return this.__data;
  },
  $index: function(_, key) {
    var t1 = this.get$_data();
    return t1.$index(t1, key);
  },
  $indexSet: function(_, key, value) {
    var t1 = this.get$_data();
    t1.$indexSet(t1, key, value);
    return value;
  }
},

ParticleCanvasMaterial: {"": "Material;color,program,name,id,side,opacity,blending,blendSrc,blendDst,blendEquation,alphaTest,polygonOffset,polygonOffsetFactor,polygonOffsetUnits,transparent,depthTest,depthWrite,overdraw,visible,needsUpdate,__data",
  program$1: function(arg0) {
    return this.program.call$1(arg0);
  },
  ParticleCanvasMaterial$18$alphaTest$blendDst$blendEquation$blendSrc$blending$color$depthTest$depthWrite$name$opacity$overdraw$polygonOffset$polygonOffsetFactor$polygonOffsetUnits$program$side$transparent$visible: function(alphaTest, blendDst, blendEquation, blendSrc, blending, color, depthTest, depthWrite, $name, opacity, overdraw, polygonOffset, polygonOffsetFactor, polygonOffsetUnits, program, side, transparent, visible) {
  },
  $isParticleCanvasMaterial: true,
  static: {
ParticleCanvasMaterial$: function(alphaTest, blendDst, blendEquation, blendSrc, blending, color, depthTest, depthWrite, $name, opacity, overdraw, polygonOffset, polygonOffsetFactor, polygonOffsetUnits, program, side, transparent, visible) {
  var t1, t2;
  t1 = S.Color$(color);
  t2 = $.MaterialCount;
  $.MaterialCount = t2 + 1;
  t2 = new S.ParticleCanvasMaterial(t1, program, $name, t2, side, opacity, blending, blendSrc, blendDst, blendEquation, alphaTest, polygonOffset, polygonOffsetFactor, polygonOffsetUnits, transparent, depthTest, depthWrite, overdraw, visible, true, null);
  t2.ParticleCanvasMaterial$18$alphaTest$blendDst$blendEquation$blendSrc$blending$color$depthTest$depthWrite$name$opacity$overdraw$polygonOffset$polygonOffsetFactor$polygonOffsetUnits$program$side$transparent$visible(alphaTest, blendDst, blendEquation, blendSrc, blending, color, depthTest, depthWrite, $name, opacity, overdraw, polygonOffset, polygonOffsetFactor, polygonOffsetUnits, program, side, transparent, visible);
  return t2;
}}

},

ParticleCanvasMaterial_closure: {"": "Closure;",
  call$1: function(context) {
  },
  $is_args1: true
},

Line: {"": "Object3D;geometry<,material<,type>,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,__data",
  Line$3: function(geometry, material, type) {
    var t1 = this.geometry;
    if (t1 != null)
      if (t1.boundingSphere == null)
        t1.computeBoundingSphere$0();
  },
  $isLine: true,
  static: {
Line$: function(geometry, material, type) {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11;
  t1 = $.Object3DCount;
  $.Object3DCount = t1 + 1;
  t2 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  t3 = new Float32Array(3);
  t3.$dartCachedLength = t3.length;
  t3 = new T.Vector3(t3);
  t3.setValues$3(0, 1, 0);
  t4 = new Float32Array(3);
  t4.$dartCachedLength = t4.length;
  t4 = new T.Vector3(t4);
  t4.setValues$3(0, 0, 0);
  t5 = new Float32Array(3);
  t5.$dartCachedLength = t5.length;
  t5 = new T.Vector3(t5);
  t5.setValues$3(0, 0, 0);
  t6 = new Float32Array(3);
  t6.$dartCachedLength = t6.length;
  t6 = new T.Vector3(t6);
  t6.setValues$3(1, 1, 1);
  t7 = new Float32Array(16);
  t7.$dartCachedLength = t7.length;
  t7 = new T.Matrix4(t7);
  t7.setIdentity$0();
  t8 = new Float32Array(16);
  t8.$dartCachedLength = t8.length;
  t8 = new T.Matrix4(t8);
  t8.setIdentity$0();
  t9 = new Float32Array(16);
  t9.$dartCachedLength = t9.length;
  t9 = new T.Matrix4(t9);
  t9.setIdentity$0();
  t10 = T.Quaternion$identity();
  t11 = new Float32Array(3);
  t11.$dartCachedLength = t11.length;
  t11 = new S.Line(geometry, material, type, t1, "", t2, null, [], t3, t4, t5, t6, "XYZ", null, null, null, true, null, t7, t8, t9, true, true, t10, false, 0, 1, true, false, false, true, new T.Vector3(t11), null, null);
  t11.Line$3(geometry, material, type);
  return t11;
}}

},

Particle: {"": "Object3D;material<,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,__data", $isParticle: true},

CanvasRenderer: {"": "Object;domElement,_autoClear,_sortObjects,_sortElements,_canvasWidth,_canvasHeight,_canvasWidthHalf,_canvasHeightHalf,_clearColor,_clearOpacity,_camera,_canvas,_context,_contextGlobalAlpha,_contextGlobalCompositeOperation,_contextStrokeStyle,_contextFillStyle,_contextLineCap,_contextLineJoin,_contextLineWidth,_clipRect,_clearRect,_bboxRect,_info,_renderData,_three$_elements,_lights,_projector,_v5,_v6,_v1x,_v1y,_v2x,_v2y,_v3x,_v3y,_v4x,_v4y,_v5x,_v5y,_v6x,_v6y,_color,_color1,_color2,_color3,_color4,_patterns,_imagedatas,_near,_far,_image,_uvs,_uv1x,_uv1y,_uv2x,_uv2y,_uv3x,_uv3y,_enableLighting,_ambientLight,_directionalLights,_pointLights,_pi2,_vector3,_pixelMapImage,_pixelMapData,_gradientMapQuality,_pixelMap,_pixelMapContext,_gradientMap,_gradientMapContext,debug",
  setSize$2: function(width, height) {
    var t1, t2, t3;
    this._canvasWidth = width;
    this._canvasHeight = height;
    t1 = this._canvasWidth;
    if (typeof t1 !== "number")
      throw t1.$div();
    this._canvasWidthHalf = C.JSNumber_methods.toInt$0(Math.floor(t1 / 2));
    t1 = this._canvasHeight;
    if (typeof t1 !== "number")
      throw t1.$div();
    this._canvasHeightHalf = C.JSNumber_methods.toInt$0(Math.floor(t1 / 2));
    J.set$width$x(this._canvas, this._canvasWidth);
    J.set$height$x(this._canvas, this._canvasHeight);
    t1 = this._clipRect;
    t2 = this._canvasWidthHalf;
    if (typeof t2 !== "number")
      throw t2.$negate();
    t3 = this._canvasHeightHalf;
    if (typeof t3 !== "number")
      throw t3.$negate();
    t1.setValues$4(-t2, -t3, t2, t3);
    t3 = this._clearRect;
    t2 = this._canvasWidthHalf;
    if (typeof t2 !== "number")
      throw t2.$negate();
    t1 = this._canvasHeightHalf;
    if (typeof t1 !== "number")
      throw t1.$negate();
    t3.setValues$4(-t2, -t1, t2, t1);
    this._contextGlobalAlpha = 1;
    this._contextGlobalCompositeOperation = 0;
    this._contextStrokeStyle = null;
    this._contextFillStyle = null;
    this._contextLineWidth = null;
    this._contextLineCap = null;
    this._contextLineJoin = null;
  },
  clear$0: function(_) {
    var t1;
    J.setTransform$6$x(this._context, 1, 0, 0, -1, this._canvasWidthHalf, this._canvasHeightHalf);
    t1 = this._clearRect;
    if (!t1._isEmpty) {
      t1.minSelf$1(this._clipRect);
      this._clearRect.inflate$1(2);
      if (this._clearOpacity < 1)
        J.clearRect$4$x(this._context, C.JSNumber_methods.toInt$0(Math.floor(this._clearRect._left)), C.JSNumber_methods.toInt$0(Math.floor(this._clearRect._top)), C.JSNumber_methods.toInt$0(Math.floor(this._clearRect._width)), C.JSNumber_methods.toInt$0(Math.floor(this._clearRect._height)));
      if (this._clearOpacity > 0) {
        this.setBlending$1(1);
        this.setOpacity$1(1);
        this.setFillStyle$1("rgba(" + C.JSNumber_methods.toInt$0(Math.floor(this._clearColor._r * 255)) + ", " + C.JSNumber_methods.toInt$0(Math.floor(this._clearColor._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(this._clearColor._b * 255)) + "," + this._clearOpacity + ")");
        J.fillRect$4$x(this._context, C.JSNumber_methods.toInt$0(Math.floor(this._clearRect._left)), C.JSNumber_methods.toInt$0(Math.floor(this._clearRect._top)), C.JSNumber_methods.toInt$0(Math.floor(this._clearRect._width)), C.JSNumber_methods.toInt$0(Math.floor(this._clearRect._height)));
      }
      this._clearRect.empty$0();
    }
  },
  render$2: function(scene, camera) {
    var t1, t2, el, e, element, material, t3, line, _v1, _v2, t4, _v3, t5, _v4;
    this._camera = camera;
    if (this._autoClear)
      this.clear$0(this);
    else
      J.setTransform$6$x(this._context, 1, 0, 0, -1, this._canvasWidthHalf, this._canvasHeightHalf);
    t1 = this._info.render;
    t1.vertices = 0;
    t1.faces = 0;
    this._renderData = this._projector.projectScene$3(scene, camera, this._sortElements);
    this._three$_elements = this._renderData.elements;
    this._lights = this._renderData.lights;
    if (this.debug === true) {
      J.set$fillStyle$x(this._context, "rgba( 0, 255, 255, 0.5 )");
      t1 = this._context;
      t2 = this._clipRect;
      J.fillRect$4$x(t1, t2._left, t2._top, t2._width, t2._height);
    }
    this._enableLighting = this._lights.length > 0;
    if (this._enableLighting)
      this.calculateLights$1(this._lights);
    el = this._three$_elements.length;
    for (e = 0; e < el; ++e) {
      t1 = this._three$_elements;
      if (e >= t1.length)
        throw H.ioore(t1, e);
      element = t1[e];
      material = element.get$material();
      if (material == null || material.opacity === 0)
        continue;
      t1 = this._bboxRect;
      t1._isEmpty = true;
      t1._left = 0;
      t1._top = 0;
      t1._right = 0;
      t1._bottom = 0;
      t2 = t1._right;
      t3 = t1._left;
      if (typeof t2 !== "number")
        throw t2.$sub();
      t1._width = t2 - t3;
      t3 = t1._bottom;
      t2 = t1._top;
      if (typeof t3 !== "number")
        throw t3.$sub();
      t1._height = t3 - t2;
      if (this.debug === true) {
        line = H.S(element);
        H.printToConsole(line);
      }
      if (typeof element === "object" && element !== null && !!element.$isRenderableParticle) {
        t1 = element.x;
        t2 = this._canvasWidthHalf;
        if (typeof t1 !== "number")
          throw t1.$mul();
        if (typeof t2 !== "number")
          throw H.iae(t2);
        element.x = t1 * t2;
        t2 = element.y;
        t1 = this._canvasHeightHalf;
        if (typeof t2 !== "number")
          throw t2.$mul();
        if (typeof t1 !== "number")
          throw H.iae(t1);
        element.y = t2 * t1;
        this.renderParticle$4(element, element, material, scene);
      } else if (typeof element === "object" && element !== null && !!element.$isRenderableLine) {
        _v1 = element.v1;
        _v2 = element.v2;
        t1 = _v1.positionScreen.storage;
        t2 = t1[0];
        t3 = this._canvasWidthHalf;
        if (typeof t3 !== "number")
          throw H.iae(t3);
        t1[0] = t2 * t3;
        t2 = t1[1];
        t4 = this._canvasHeightHalf;
        if (typeof t4 !== "number")
          throw H.iae(t4);
        t1[1] = t2 * t4;
        t2 = _v2.positionScreen.storage;
        t2[0] = t2[0] * t3;
        t2[1] = t2[1] * t4;
        this._bboxRect.addPoint$2(t1[0], t1[1]);
        t1 = _v2.positionScreen.storage;
        this._bboxRect.addPoint$2(t1[0], t1[1]);
        t1 = this._clipRect;
        if (t1.intersects$1(t1, this._bboxRect))
          this.renderLine$5(_v1, _v2, element, material, scene);
      } else if (typeof element === "object" && element !== null && !!element.$isRenderableFace3) {
        t1 = element.vertices;
        t2 = t1.length;
        if (0 >= t2)
          throw H.ioore(t1, 0);
        _v1 = t1[0];
        if (1 >= t2)
          throw H.ioore(t1, 1);
        _v2 = t1[1];
        if (2 >= t2)
          throw H.ioore(t1, 2);
        _v3 = t1[2];
        t1 = _v1.get$positionScreen().storage;
        t2 = t1[0];
        t3 = this._canvasWidthHalf;
        if (typeof t3 !== "number")
          throw H.iae(t3);
        t1[0] = t2 * t3;
        t2 = _v1.positionScreen;
        t1 = t2.storage;
        t4 = t1[1];
        t5 = this._canvasHeightHalf;
        if (typeof t5 !== "number")
          throw H.iae(t5);
        t1[1] = t4 * t5;
        t4 = _v2.get$positionScreen().storage;
        t4[0] = t4[0] * t3;
        t4 = _v2.positionScreen;
        t1 = t4.storage;
        t1[1] = t1[1] * t5;
        t1 = _v3.get$positionScreen().storage;
        t1[0] = t1[0] * t3;
        t3 = _v3.positionScreen.storage;
        t3[1] = t3[1] * t5;
        if (material.overdraw) {
          this.expand$2(this, t2, t4);
          this.expand$2(this, _v2.positionScreen, _v3.positionScreen);
          this.expand$2(this, _v3.positionScreen, _v1.positionScreen);
        }
        t1 = _v1.positionScreen.storage;
        t2 = _v2.positionScreen.storage;
        t3 = _v3.positionScreen.storage;
        this._bboxRect.add3Points$6(t1[0], t1[1], t2[0], t2[1], t3[0], t3[1]);
        t1 = this._clipRect;
        if (t1.intersects$1(t1, this._bboxRect))
          this.renderFace3$9(_v1, _v2, _v3, 0, 1, 2, element, material, scene);
      } else if (typeof element === "object" && element !== null && !!element.$isRenderableFace4) {
        t1 = element.vertices;
        t2 = t1.length;
        if (0 >= t2)
          throw H.ioore(t1, 0);
        _v1 = t1[0];
        if (1 >= t2)
          throw H.ioore(t1, 1);
        _v2 = t1[1];
        if (2 >= t2)
          throw H.ioore(t1, 2);
        _v3 = t1[2];
        if (3 >= t2)
          throw H.ioore(t1, 3);
        _v4 = t1[3];
        t1 = _v1.get$positionScreen().storage;
        t2 = t1[0];
        t3 = this._canvasWidthHalf;
        if (typeof t3 !== "number")
          throw H.iae(t3);
        t1[0] = t2 * t3;
        t2 = _v1.positionScreen.storage;
        t1 = t2[1];
        t4 = this._canvasHeightHalf;
        if (typeof t4 !== "number")
          throw H.iae(t4);
        t2[1] = t1 * t4;
        t1 = _v2.get$positionScreen().storage;
        t1[0] = t1[0] * t3;
        t1 = _v2.positionScreen;
        t2 = t1.storage;
        t2[1] = t2[1] * t4;
        t2 = _v3.get$positionScreen().storage;
        t2[0] = t2[0] * t3;
        t2 = _v3.positionScreen.storage;
        t2[1] = t2[1] * t4;
        t2 = _v4.get$positionScreen().storage;
        t2[0] = t2[0] * t3;
        t3 = _v4.positionScreen.storage;
        t3[1] = t3[1] * t4;
        this._v5.positionScreen.setFrom$1(t1);
        this._v6.positionScreen.setFrom$1(_v4.positionScreen);
        if (material.overdraw) {
          this.expand$2(this, _v1.positionScreen, _v2.positionScreen);
          this.expand$2(this, _v2.positionScreen, _v4.positionScreen);
          this.expand$2(this, _v4.positionScreen, _v1.positionScreen);
          this.expand$2(this, _v3.positionScreen, this._v5.positionScreen);
          this.expand$2(this, _v3.positionScreen, this._v6.positionScreen);
        }
        t1 = _v1.positionScreen.storage;
        this._bboxRect.addPoint$2(t1[0], t1[1]);
        t1 = _v2.positionScreen.storage;
        this._bboxRect.addPoint$2(t1[0], t1[1]);
        t1 = _v3.positionScreen.storage;
        this._bboxRect.addPoint$2(t1[0], t1[1]);
        t1 = _v4.positionScreen.storage;
        this._bboxRect.addPoint$2(t1[0], t1[1]);
        t1 = this._clipRect;
        if (t1.intersects$1(t1, this._bboxRect))
          this.renderFace4$9(_v1, _v2, _v3, _v4, this._v5, this._v6, element, material, scene);
      }
      if (this.debug === true) {
        J.set$lineWidth$x(this._context, 1);
        J.set$strokeStyle$x(this._context, "rgba( 0, 255, 0, 0.5 )");
        t1 = this._context;
        t2 = this._bboxRect;
        J.strokeRect$4$x(t1, t2._left, t2._top, t2._width, t2._height);
      }
      this._clearRect.addRectangle$1(this._bboxRect);
    }
    if (this.debug === true) {
      J.set$lineWidth$x(this._context, 1);
      J.set$strokeStyle$x(this._context, "rgba( 255, 0, 0, 0.5 )");
      t1 = this._context;
      t2 = this._clearRect;
      J.strokeRect$4$x(t1, t2._left, t2._top, t2._width, t2._height);
    }
    J.setTransform$6$x(this._context, 1, 0, 0, 1, 0, 0);
  },
  calculateLights$1: function(lights) {
    var ll, l, lightColor, t1;
    this._ambientLight.setRGB$3(0, 0, 0);
    this._directionalLights.setRGB$3(0, 0, 0);
    this._pointLights.setRGB$3(0, 0, 0);
    ll = lights.length;
    for (l = 0; l < ll; ++l) {
      if (l >= lights.length)
        throw H.ioore(lights, l);
      lightColor = lights[l].get$color();
      t1 = this._ambientLight;
      t1._r = C.JSNumber_methods.$add(t1._r, lightColor.get$r(lightColor));
      t1 = this._ambientLight;
      t1._g = C.JSNumber_methods.$add(t1._g, lightColor.get$g());
      t1 = this._ambientLight;
      t1._b = C.JSNumber_methods.$add(t1._b, lightColor.get$b());
    }
  },
  renderParticle$4: function(v1, element, material, scene) {
    var t1, t2, t3, width, height;
    t1 = material.opacity;
    if (this._contextGlobalAlpha !== t1) {
      t2 = this._context;
      this._contextGlobalAlpha = t1;
      J.set$globalAlpha$x(t2, t1);
    }
    this.setBlending$1(material.blending);
    t1 = J.getInterceptor(material);
    if (typeof material === "object" && material !== null && !!t1.$isParticleCanvasMaterial) {
      t1 = element.scale.storage;
      t2 = t1[0];
      t3 = this._canvasWidthHalf;
      if (typeof t3 !== "number")
        throw H.iae(t3);
      width = t2 * t3;
      t1 = t1[1];
      t3 = this._canvasHeightHalf;
      if (typeof t3 !== "number")
        throw H.iae(t3);
      height = t1 * t3;
      t3 = this._bboxRect;
      t1 = v1.x;
      if (typeof t1 !== "number")
        throw t1.$sub();
      t2 = v1.y;
      if (typeof t2 !== "number")
        throw t2.$sub();
      t3._isEmpty = false;
      t3._left = t1 - width;
      t3._top = t2 - height;
      t3._right = t1 + width;
      t3._bottom = t2 + height;
      t2 = t3._right;
      t1 = t3._left;
      if (typeof t2 !== "number")
        throw t2.$sub();
      t3._width = t2 - t1;
      t1 = t3._bottom;
      t2 = t3._top;
      if (typeof t1 !== "number")
        throw t1.$sub();
      t3._height = t1 - t2;
      t1 = this._clipRect;
      if (!t1.intersects$1(t1, this._bboxRect))
        return;
      t1 = material.color;
      t2 = "rgb(" + C.JSNumber_methods.toInt$0(Math.floor(t1._r * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t1._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t1._b * 255)) + ")";
      if (this._contextStrokeStyle !== t2) {
        t3 = this._context;
        this._contextStrokeStyle = t2;
        J.set$strokeStyle$x(t3, t2);
      }
      t1 = "rgb(" + C.JSNumber_methods.toInt$0(Math.floor(t1._r * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t1._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t1._b * 255)) + ")";
      if (this._contextFillStyle !== t1) {
        this._contextFillStyle = t1;
        J.set$fillStyle$x(this._context, this._contextFillStyle);
      }
      J.save$0$x(this._context);
      J.translate$2$x(this._context, v1.x, v1.y);
      t1 = this._context;
      t2 = element.rotation;
      if (typeof t2 !== "number")
        throw t2.$negate();
      J.rotate$1$x(t1, -t2);
      J.scale$2$x(this._context, width, height);
      material.program$1(this._context);
      J.restore$0$x(this._context);
    }
  },
  renderLine$5: function(v1, v2, element, material, scene) {
    var t1, t2, t3, line;
    t1 = material.opacity;
    if (this._contextGlobalAlpha !== t1) {
      t2 = this._context;
      this._contextGlobalAlpha = t1;
      J.set$globalAlpha$x(t2, t1);
    }
    this.setBlending$1(material.blending);
    J.beginPath$0$x(this._context);
    t1 = v1.positionScreen.storage;
    J.moveTo$2$x(this._context, t1[0], t1[1]);
    t1 = v2.positionScreen.storage;
    J.lineTo$2$x(this._context, t1[0], t1[1]);
    J.closePath$0$x(this._context);
    t1 = J.getInterceptor(material);
    if (typeof material === "object" && material !== null && !!t1.$isLineBasicMaterial) {
      t1 = material.linewidth;
      if (this._contextLineWidth !== t1) {
        t2 = this._context;
        this._contextLineWidth = t1;
        J.set$lineWidth$x(t2, t1);
      }
      t2 = material.linecap;
      if (this._contextLineCap !== t2) {
        t3 = this._context;
        this._contextLineCap = t2;
        J.set$lineCap$x(t3, t2);
      }
      t2 = material.linejoin;
      if (this._contextLineJoin !== t2) {
        t3 = this._context;
        this._contextLineJoin = t2;
        J.set$lineJoin$x(t3, t2);
      }
      t2 = material.color;
      t2 = "rgb(" + C.JSNumber_methods.toInt$0(Math.floor(t2._r * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t2._g * 255)) + "," + C.JSNumber_methods.toInt$0(Math.floor(t2._b * 255)) + ")";
      if (this._contextStrokeStyle !== t2) {
        t3 = this._context;
        this._contextStrokeStyle = t2;
        J.set$strokeStyle$x(t3, t2);
      }
      J.stroke$0$x(this._context);
      t2 = this._bboxRect;
      t1 *= 2;
      t2._left = t2._left - t1;
      t2._top = t2._top - t1;
      t3 = t2._right;
      if (typeof t3 !== "number")
        throw t3.$add();
      t2._right = t3 + t1;
      t3 = t2._bottom;
      if (typeof t3 !== "number")
        throw t3.$add();
      t2._bottom = t3 + t1;
      t1 = t2._right;
      t3 = t2._left;
      if (typeof t1 !== "number")
        throw t1.$sub();
      t2._width = t1 - t3;
      t3 = t2._bottom;
      t1 = t2._top;
      if (typeof t3 !== "number")
        throw t3.$sub();
      t2._height = t3 - t1;
    }
    if (this.debug === true) {
      line = "renderLine " + H.S(element) + " at (" + H.S(v1.positionScreen.storage[0]) + ", " + H.S(v1.positionScreen.storage[1]) + ") to (" + H.S(v2.positionScreen.storage[0]) + ", " + H.S(v2.positionScreen.storage[1]) + ")";
      H.printToConsole(line);
    }
  },
  renderFace3$9: function(v1, v2, v3, uv1, uv2, uv3, element, material, scene) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this._info.render;
    t2 = t1.vertices;
    if (typeof t2 !== "number")
      throw t2.$add();
    t1.vertices = t2 + 3;
    t2 = this._info.render;
    t1 = t2.faces;
    if (typeof t1 !== "number")
      throw t1.$add();
    t2.faces = t1 + 1;
    t1 = material.opacity;
    if (this._contextGlobalAlpha !== t1) {
      t2 = this._context;
      this._contextGlobalAlpha = t1;
      J.set$globalAlpha$x(t2, t1);
    }
    this.setBlending$1(material.blending);
    this._v1x = v1.positionScreen.storage[0];
    this._v1y = v1.positionScreen.storage[1];
    this._v2x = v2.positionScreen.storage[0];
    this._v2y = v2.positionScreen.storage[1];
    this._v3x = v3.positionScreen.storage[0];
    this._v3y = v3.positionScreen.storage[1];
    t1 = this._v1x;
    t2 = this._v1y;
    t3 = this._v2x;
    t4 = this._v2y;
    t5 = this._v3x;
    t6 = this._v3y;
    J.beginPath$0$x(this._context);
    J.moveTo$2$x(this._context, t1, t2);
    J.lineTo$2$x(this._context, t3, t4);
    J.lineTo$2$x(this._context, t5, t6);
    J.lineTo$2$x(this._context, t1, t2);
    J.closePath$0$x(this._context);
  },
  renderFace4$9: function(v1, v2, v3, v4, v5, v6, element, material, scene) {
    var t1, t2;
    t1 = this._info.render;
    t2 = t1.vertices;
    if (typeof t2 !== "number")
      throw t2.$add();
    t1.vertices = t2 + 4;
    t2 = this._info.render;
    t1 = t2.faces;
    if (typeof t1 !== "number")
      throw t1.$add();
    t2.faces = t1 + 1;
    t1 = material.opacity;
    if (this._contextGlobalAlpha !== t1) {
      t2 = this._context;
      this._contextGlobalAlpha = t1;
      J.set$globalAlpha$x(t2, t1);
    }
    this.setBlending$1(material.blending);
    this._v1x = v1.positionScreen.storage[0];
    this._v1y = v1.positionScreen.storage[1];
    this._v2x = v2.positionScreen.storage[0];
    this._v2y = v2.positionScreen.storage[1];
    this._v3x = v3.positionScreen.storage[0];
    this._v3y = v3.positionScreen.storage[1];
    this._v4x = v4.positionScreen.storage[0];
    this._v4y = v4.positionScreen.storage[1];
    this._v5x = v5.positionScreen.storage[0];
    this._v5y = v5.positionScreen.storage[1];
    this._v6x = v6.positionScreen.storage[0];
    this._v6y = v6.positionScreen.storage[1];
  },
  expand$2: function(_, v1, v2) {
    var t1, t2, x, y, det, idet;
    t1 = v2.storage;
    t2 = v1.storage;
    x = t1[0] - t2[0];
    y = t1[1] - t2[1];
    det = x * x + y * y;
    if (det === 0)
      return;
    idet = 1 / Math.sqrt(det);
    x *= idet;
    y *= idet;
    t1[0] = t1[0] + x;
    t1[1] = t1[1] + y;
    t2[0] = t2[0] - x;
    t2[1] = t2[1] - y;
  },
  setOpacity$1: function(value) {
    var t1;
    if (this._contextGlobalAlpha !== value) {
      t1 = this._context;
      this._contextGlobalAlpha = value;
      J.set$globalAlpha$x(t1, value);
    }
  },
  setBlending$1: function(value) {
    if (this._contextGlobalCompositeOperation !== value) {
      switch (value) {
        case 1:
          J.set$globalCompositeOperation$x(this._context, "source-over");
          break;
        case 2:
          J.set$globalCompositeOperation$x(this._context, "lighter");
          break;
        case 3:
          J.set$globalCompositeOperation$x(this._context, "darker");
          break;
        default:
      }
      this._contextGlobalCompositeOperation = value;
    }
  },
  setFillStyle$1: function(style) {
    var t1 = this._contextFillStyle;
    if (t1 == null ? style != null : t1 !== style) {
      this._contextFillStyle = style;
      J.set$fillStyle$x(this._context, this._contextFillStyle);
    }
  },
  CanvasRenderer$1: function(parameters) {
    var t1, t2, t3;
    parameters = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    this._projector = S.Projector$();
    this._canvas = parameters.$index(parameters, "canvas") != null ? parameters.$index(parameters, "canvas") : W._ElementFactoryProvider_createElement_tag("canvas", null);
    this._context = J.getContext$1$x(this._canvas, "2d");
    this.debug = parameters.$index(parameters, "debug") != null && parameters.$index(parameters, "debug");
    this._clearColor = S.Color$(0);
    this._clearOpacity = 0;
    this._contextGlobalAlpha = 1;
    this._contextGlobalCompositeOperation = 0;
    this._contextStrokeStyle = null;
    this._contextFillStyle = null;
    this._contextLineWidth = null;
    this._contextLineCap = null;
    this._contextLineJoin = null;
    this._v5 = S.RenderableVertex$();
    this._v6 = S.RenderableVertex$();
    this._color = S.Color$(null);
    this._color1 = S.Color$(null);
    this._color2 = S.Color$(null);
    this._color3 = S.Color$(null);
    this._color4 = S.Color$(null);
    this._patterns = [];
    this._imagedatas = [];
    this._clipRect = S.Rectangle$();
    this._clearRect = S.Rectangle$();
    this._bboxRect = S.Rectangle$();
    this._enableLighting = false;
    this._ambientLight = S.Color$(null);
    this._directionalLights = S.Color$(null);
    this._pointLights = S.Color$(null);
    t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    this._vector3 = new T.Vector3(t1);
    this._gradientMapQuality = 16;
    this._pixelMap = W._ElementFactoryProvider_createElement_tag("canvas", null);
    t1 = this._pixelMap;
    t2 = J.getInterceptor$x(t1);
    t2.set$height(t1, 2);
    t2.set$width(t1, 2);
    this._pixelMapContext = J.getContext$1$x(this._pixelMap, "2d");
    J.set$fillStyle$x(this._pixelMapContext, "rgba(0,0,0,1)");
    J.fillRect$4$x(this._pixelMapContext, 0, 0, 2, 2);
    this._pixelMapImage = J.getImageData$4$x(this._pixelMapContext, 0, 0, 2, 2);
    this._pixelMapData = J.get$data$x(this._pixelMapImage);
    this._gradientMap = W._ElementFactoryProvider_createElement_tag("canvas", null);
    t1 = this._gradientMap;
    t2 = this._gradientMapQuality;
    t3 = J.getInterceptor$x(t1);
    t3.set$height(t1, t2);
    t3.set$width(t1, t2);
    this._gradientMapContext = J.getContext$1$x(this._gradientMap, "2d");
    t2 = -this._gradientMapQuality / 2;
    J.translate$2$x(this._gradientMapContext, t2, t2);
    t2 = this._gradientMapContext;
    t1 = this._gradientMapQuality;
    J.scale$2$x(t2, t1, t1);
    this._gradientMapQuality = this._gradientMapQuality - 1;
    this.domElement = this._canvas;
    this._autoClear = true;
    this._sortObjects = true;
    this._sortElements = true;
    t1 = new S.CanvasRenderData(null);
    t2 = new S.RenderInts(null, null);
    t2.vertices = 0;
    t2.faces = 0;
    t1.render = t2;
    this._info = t1;
  },
  static: {
CanvasRenderer$: function(parameters) {
  var t1 = new S.CanvasRenderer(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 6.283185307179586, null, null, null, null, null, null, null, null, null);
  t1.CanvasRenderer$1(parameters);
  return t1;
}}

},

CanvasRenderData: {"": "Object;render"},

RenderInts: {"": "Object;vertices,faces"},

RenderableLine: {"": "Object;z>,v1,v2,material<", $isRenderableLine: true},

RenderableObject: {"": "Object;object<,z>"},

RenderableParticle: {"": "Object;x>,y>,z>,rotation,scale,material<", $isRenderableParticle: true},

RenderableVertex: {"": "Object;positionWorld,positionScreen<,visible<",
  clone$0: function(_) {
    var t1 = S.RenderableVertex$();
    t1.positionWorld.setFrom$1(this.positionWorld);
    t1.positionScreen.setFrom$1(this.positionScreen);
    return t1;
  },
  static: {
RenderableVertex$: function() {
  var t1, t2;
  t1 = new Float32Array(3);
  t1.$dartCachedLength = t1.length;
  t2 = new Float32Array(4);
  t2.$dartCachedLength = t2.length;
  t2 = new T.Vector4(t2);
  t2.setValues$4(0, 0, 0, 1);
  return new S.RenderableVertex(new T.Vector3(t1), t2, true);
}}

},

Scene: {"": "Object3D;fog,overrideMaterial,objects,lights,__objectsAdded,__objectsRemoved,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,__data",
  addObject$1: function(object) {
    var t1, i, c;
    if (!(!!object.$isCamera || false)) {
      t1 = this.objects;
      if (H.Arrays_indexOf(t1, object, 0, t1.length) === -1) {
        this.objects.push(object);
        this.__objectsAdded.push(object);
        t1 = this.__objectsRemoved;
        i = H.Arrays_indexOf(t1, object, 0, t1.length);
        if (i !== -1)
          C.JSArray_methods.removeAt$1(this.__objectsRemoved, i);
      }
    }
    for (t1 = object.children, c = 0; c < t1.length; ++c)
      this.addObject$1(t1[c]);
  },
  removeObject$1: function(object) {
    var t1, i, ai, c;
    if (!object.$isCamera) {
      t1 = this.objects;
      i = H.Arrays_indexOf(t1, object, 0, t1.length);
      if (i !== -1) {
        C.JSArray_methods.removeAt$1(this.objects, i);
        this.__objectsRemoved.push(object);
        t1 = this.__objectsAdded;
        ai = H.Arrays_indexOf(t1, object, 0, t1.length);
        if (ai !== -1)
          C.JSArray_methods.removeAt$1(this.__objectsAdded, ai);
      }
    }
    for (t1 = object.children, c = 0; c < t1.length; ++c)
      this.removeObject$1(t1[c]);
  },
  Scene$0: function() {
    this.fog = null;
    this.overrideMaterial = null;
    this.matrixAutoUpdate = false;
    this.objects = [];
    this.lights = [];
    this.__objectsAdded = [];
    this.__objectsRemoved = [];
  },
  $isScene: true,
  static: {
Scene$: function() {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11;
  t1 = $.Object3DCount;
  $.Object3DCount = t1 + 1;
  t2 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  t3 = new Float32Array(3);
  t3.$dartCachedLength = t3.length;
  t3 = new T.Vector3(t3);
  t3.setValues$3(0, 1, 0);
  t4 = new Float32Array(3);
  t4.$dartCachedLength = t4.length;
  t4 = new T.Vector3(t4);
  t4.setValues$3(0, 0, 0);
  t5 = new Float32Array(3);
  t5.$dartCachedLength = t5.length;
  t5 = new T.Vector3(t5);
  t5.setValues$3(0, 0, 0);
  t6 = new Float32Array(3);
  t6.$dartCachedLength = t6.length;
  t6 = new T.Vector3(t6);
  t6.setValues$3(1, 1, 1);
  t7 = new Float32Array(16);
  t7.$dartCachedLength = t7.length;
  t7 = new T.Matrix4(t7);
  t7.setIdentity$0();
  t8 = new Float32Array(16);
  t8.$dartCachedLength = t8.length;
  t8 = new T.Matrix4(t8);
  t8.setIdentity$0();
  t9 = new Float32Array(16);
  t9.$dartCachedLength = t9.length;
  t9 = new T.Matrix4(t9);
  t9.setIdentity$0();
  t10 = T.Quaternion$identity();
  t11 = new Float32Array(3);
  t11.$dartCachedLength = t11.length;
  t11 = new S.Scene(null, null, null, null, null, null, t1, "", t2, null, [], t3, t4, t5, t6, "XYZ", null, null, null, true, null, t7, t8, t9, true, true, t10, false, 0, 1, true, false, false, true, new T.Vector3(t11), null, null);
  t11.Scene$0();
  return t11;
}}

}}],
["vector_math", "package:vector_math/vector_math.dart", , T, {
makePerspectiveMatrix: function(fovYRadians, aspectRatio, zNear, zFar) {
  var height, width, t1, view;
  height = Math.tan(fovYRadians * 0.5) * zNear;
  width = height * aspectRatio;
  t1 = new Float32Array(16);
  t1.$dartCachedLength = t1.length;
  view = new T.Matrix4(t1);
  T.setFrustumMatrix(view, -width, width, -height, height, zNear, zFar);
  return view;
},

setFrustumMatrix: function(perspectiveMatrix, left, right, bottom, $top, near, far) {
  var two_near, right_minus_left, top_minus_bottom, far_minus_near, t1;
  two_near = 2 * near;
  right_minus_left = right - left;
  top_minus_bottom = $top - bottom;
  far_minus_near = far - near;
  t1 = perspectiveMatrix.setZero$0().storage;
  t1[0] = two_near / right_minus_left;
  t1[5] = two_near / top_minus_bottom;
  t1[8] = (right + left) / right_minus_left;
  t1[9] = ($top + bottom) / top_minus_bottom;
  t1[10] = -(far + near) / far_minus_near;
  t1[11] = -1;
  t1[14] = -(two_near * far) / far_minus_near;
},

Matrix4: {"": "Object;storage<",
  setValues$16: function(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15) {
    var t1 = this.storage;
    t1[15] = arg15;
    t1[14] = arg14;
    t1[13] = arg13;
    t1[12] = arg12;
    t1[11] = arg11;
    t1[10] = arg10;
    t1[9] = arg9;
    t1[8] = arg8;
    t1[7] = arg7;
    t1[6] = arg6;
    t1[5] = arg5;
    t1[4] = arg4;
    t1[3] = arg3;
    t1[2] = arg2;
    t1[1] = arg1;
    t1[0] = arg0;
    return this;
  },
  setFrom$1: function(arg) {
    var t1, t2;
    t1 = this.storage;
    t2 = arg.get$storage();
    if (15 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 15);
    t1[15] = t2[15];
    t2 = arg.get$storage();
    if (14 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 14);
    t1[14] = t2[14];
    t2 = arg.get$storage();
    if (13 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 13);
    t1[13] = t2[13];
    t2 = arg.get$storage();
    if (12 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 12);
    t1[12] = t2[12];
    t2 = arg.get$storage();
    if (11 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 11);
    t1[11] = t2[11];
    t2 = arg.get$storage();
    if (10 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 10);
    t1[10] = t2[10];
    t2 = arg.get$storage();
    if (9 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 9);
    t1[9] = t2[9];
    t2 = arg.get$storage();
    if (8 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 8);
    t1[8] = t2[8];
    t2 = arg.get$storage();
    if (7 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 7);
    t1[7] = t2[7];
    t2 = arg.get$storage();
    if (6 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 6);
    t1[6] = t2[6];
    t2 = arg.get$storage();
    if (5 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 5);
    t1[5] = t2[5];
    t2 = arg.get$storage();
    if (4 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 4);
    t1[4] = t2[4];
    t2 = arg.get$storage();
    if (3 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 3);
    t1[3] = t2[3];
    t2 = arg.get$storage();
    if (2 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 2);
    t1[2] = t2[2];
    t2 = arg.get$storage();
    if (1 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 1);
    t1[1] = t2[1];
    t2 = arg.get$storage();
    if (0 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 0);
    t1[0] = t2[0];
    return this;
  },
  toString$0: function(_) {
    return "[0] " + H.S(this.getRow$1(0)) + "\n[1] " + H.S(this.getRow$1(1)) + "\n[2] " + H.S(this.getRow$1(2)) + "\n[3] " + H.S(this.getRow$1(3)) + "\n";
  },
  get$dimension: function() {
    return 4;
  },
  $index: function(_, i) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 16)
      throw H.ioore(t1, i);
    return t1[i];
  },
  $indexSet: function(_, i, v) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 16)
      throw H.ioore(t1, i);
    t1[i] = v;
  },
  getRow$1: function(row) {
    var t1, r, t2, t3;
    t1 = new Float32Array(4);
    t1.$dartCachedLength = t1.length;
    r = new T.Vector4(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = 0 + row;
    if (t3 < 0 || t3 >= 16)
      throw H.ioore(t2, t3);
    t1[0] = t2[t3];
    t3 = 4 + row;
    if (t3 < 0 || t3 >= 16)
      throw H.ioore(t2, t3);
    t1[1] = t2[t3];
    t3 = 8 + row;
    if (t3 < 0 || t3 >= 16)
      throw H.ioore(t2, t3);
    t1[2] = t2[t3];
    t3 = 12 + row;
    if (t3 < 0 || t3 >= 16)
      throw H.ioore(t2, t3);
    t1[3] = t2[t3];
    return r;
  },
  clone$0: function(_) {
    var t1 = new Float32Array(16);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Matrix4(t1);
    t1.setFrom$1(this);
    return t1;
  },
  _mul_matrix$1: function(arg) {
    var t1, r, t2, t3;
    t1 = new Float32Array(16);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix4(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = arg.storage;
    t1[0] = t2[0] * t3[0] + t2[4] * t3[1] + t2[8] * t3[2] + t2[12] * t3[3];
    t1[4] = t2[0] * t3[4] + t2[4] * t3[5] + t2[8] * t3[6] + t2[12] * t3[7];
    t1[8] = t2[0] * t3[8] + t2[4] * t3[9] + t2[8] * t3[10] + t2[12] * t3[11];
    t1[12] = t2[0] * t3[12] + t2[4] * t3[13] + t2[8] * t3[14] + t2[12] * t3[15];
    t1[1] = t2[1] * t3[0] + t2[5] * t3[1] + t2[9] * t3[2] + t2[13] * t3[3];
    t1[5] = t2[1] * t3[4] + t2[5] * t3[5] + t2[9] * t3[6] + t2[13] * t3[7];
    t1[9] = t2[1] * t3[8] + t2[5] * t3[9] + t2[9] * t3[10] + t2[13] * t3[11];
    t1[13] = t2[1] * t3[12] + t2[5] * t3[13] + t2[9] * t3[14] + t2[13] * t3[15];
    t1[2] = t2[2] * t3[0] + t2[6] * t3[1] + t2[10] * t3[2] + t2[14] * t3[3];
    t1[6] = t2[2] * t3[4] + t2[6] * t3[5] + t2[10] * t3[6] + t2[14] * t3[7];
    t1[10] = t2[2] * t3[8] + t2[6] * t3[9] + t2[10] * t3[10] + t2[14] * t3[11];
    t1[14] = t2[2] * t3[12] + t2[6] * t3[13] + t2[10] * t3[14] + t2[14] * t3[15];
    t1[3] = t2[3] * t3[0] + t2[7] * t3[1] + t2[11] * t3[2] + t2[15] * t3[3];
    t1[7] = t2[3] * t3[4] + t2[7] * t3[5] + t2[11] * t3[6] + t2[15] * t3[7];
    t1[11] = t2[3] * t3[8] + t2[7] * t3[9] + t2[11] * t3[10] + t2[15] * t3[11];
    t1[15] = t2[3] * t3[12] + t2[7] * t3[13] + t2[11] * t3[14] + t2[15] * t3[15];
    return r;
  },
  _mul_vector$1: function(arg) {
    var t1, r, t2, t3;
    t1 = new Float32Array(4);
    t1.$dartCachedLength = t1.length;
    r = new T.Vector4(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = arg.storage;
    t1[3] = t2[3] * t3[0] + t2[7] * t3[1] + t2[11] * t3[2] + t2[15] * t3[3];
    t1[2] = t2[2] * t3[0] + t2[6] * t3[1] + t2[10] * t3[2] + t2[14] * t3[3];
    t1[1] = t2[1] * t3[0] + t2[5] * t3[1] + t2[9] * t3[2] + t2[13] * t3[3];
    t1[0] = t2[0] * t3[0] + t2[4] * t3[1] + t2[8] * t3[2] + t2[12] * t3[3];
    return r;
  },
  _mul_vector3$1: function(arg) {
    var t1, r, t2, t3;
    t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    r = new T.Vector3(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = arg.storage;
    t1[0] = t2[0] * t3[0] + t2[4] * t3[1] + t2[8] * t3[2] + t2[12];
    t1[1] = t2[1] * t3[0] + t2[5] * t3[1] + t2[9] * t3[2] + t2[13];
    t1[2] = t2[2] * t3[0] + t2[6] * t3[1] + t2[10] * t3[2] + t2[14];
    return r;
  },
  $mul: function(_, arg) {
    var t1 = J.getInterceptor(arg);
    if (typeof arg === "object" && arg !== null && !!t1.$isVector4)
      return this._mul_vector$1(arg);
    if (typeof arg === "object" && arg !== null && !!t1.$isVector3)
      return this._mul_vector3$1(arg);
    if (4 === arg.get$dimension())
      return this._mul_matrix$1(arg);
    throw H.wrapException(new P.ArgumentError(arg));
  },
  scale$3: function(_, x, y, z) {
    var t1, t2, sw, sx, sy, sz;
    t1 = J.getInterceptor$x(x);
    t2 = typeof x === "object" && x !== null && !!t1.$isVector4;
    sw = t2 ? x.storage[3] : 1;
    if (typeof x === "object" && x !== null && !!t1.$isVector3 || t2) {
      sx = t1.get$x(x);
      sy = t1.get$y(x);
      sz = t1.get$z(x);
    } else {
      sy = y == null ? x : J.toDouble$0$n(y);
      sz = z == null ? x : J.toDouble$0$n(z);
      sx = x;
    }
    t1 = this.storage;
    t2 = t1[0];
    if (typeof sx !== "number")
      throw H.iae(sx);
    t1[0] = t2 * sx;
    t1[1] = t1[1] * sx;
    t1[2] = t1[2] * sx;
    t1[3] = t1[3] * sx;
    t2 = t1[4];
    if (typeof sy !== "number")
      throw H.iae(sy);
    t1[4] = t2 * sy;
    t1[5] = t1[5] * sy;
    t1[6] = t1[6] * sy;
    t1[7] = t1[7] * sy;
    t2 = t1[8];
    if (typeof sz !== "number")
      throw H.iae(sz);
    t1[8] = t2 * sz;
    t1[9] = t1[9] * sz;
    t1[10] = t1[10] * sz;
    t1[11] = t1[11] * sz;
    t1[12] = t1[12] * sw;
    t1[13] = t1[13] * sw;
    t1[14] = t1[14] * sw;
    t1[15] = t1[15] * sw;
    return this;
  },
  scale$1: function($receiver, x) {
    return this.scale$3($receiver, x, null, null);
  },
  $negate: function(_) {
    var t1, r, t2;
    t1 = new Float32Array(16);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix4(t1);
    t1 = this.storage;
    t2 = r.storage;
    t2[0] = -t1[0];
    t2[1] = -t1[1];
    t2[2] = -t1[2];
    t2[3] = -t1[3];
    return r;
  },
  setZero$0: function() {
    var t1 = this.storage;
    t1[0] = 0;
    t1[1] = 0;
    t1[2] = 0;
    t1[3] = 0;
    t1[4] = 0;
    t1[5] = 0;
    t1[6] = 0;
    t1[7] = 0;
    t1[8] = 0;
    t1[9] = 0;
    t1[10] = 0;
    t1[11] = 0;
    t1[12] = 0;
    t1[13] = 0;
    t1[14] = 0;
    t1[15] = 0;
    return this;
  },
  setIdentity$0: function() {
    var t1 = this.storage;
    t1[0] = 1;
    t1[1] = 0;
    t1[2] = 0;
    t1[3] = 0;
    t1[4] = 0;
    t1[5] = 1;
    t1[6] = 0;
    t1[7] = 0;
    t1[8] = 0;
    t1[9] = 0;
    t1[10] = 1;
    t1[11] = 0;
    t1[12] = 0;
    t1[13] = 0;
    t1[14] = 0;
    t1[15] = 1;
    return this;
  },
  getTranslation$0: function() {
    var t1, z, y, x;
    t1 = this.storage;
    z = t1[14];
    y = t1[13];
    x = t1[12];
    t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector3(t1);
    t1.setValues$3(x, y, z);
    return t1;
  },
  setTranslation$1: function($T) {
    var t1, z, y, x;
    t1 = $T.storage;
    z = t1[2];
    y = t1[1];
    x = t1[0];
    t1 = this.storage;
    t1[14] = z;
    t1[13] = y;
    t1[12] = x;
  },
  copyInverse$1: function(arg) {
    var t1, t2, a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33, b00, b01, b02, b03, b04, b05, b06, b07, b08, b09, b10, b11, det, invDet, t3;
    t1 = arg.get$storage();
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    a00 = t1[0];
    if (1 >= t2)
      throw H.ioore(t1, 1);
    a01 = t1[1];
    if (2 >= t2)
      throw H.ioore(t1, 2);
    a02 = t1[2];
    if (3 >= t2)
      throw H.ioore(t1, 3);
    a03 = t1[3];
    if (4 >= t2)
      throw H.ioore(t1, 4);
    a10 = t1[4];
    if (5 >= t2)
      throw H.ioore(t1, 5);
    a11 = t1[5];
    if (6 >= t2)
      throw H.ioore(t1, 6);
    a12 = t1[6];
    if (7 >= t2)
      throw H.ioore(t1, 7);
    a13 = t1[7];
    if (8 >= t2)
      throw H.ioore(t1, 8);
    a20 = t1[8];
    if (9 >= t2)
      throw H.ioore(t1, 9);
    a21 = t1[9];
    if (10 >= t2)
      throw H.ioore(t1, 10);
    a22 = t1[10];
    if (11 >= t2)
      throw H.ioore(t1, 11);
    a23 = t1[11];
    if (12 >= t2)
      throw H.ioore(t1, 12);
    a30 = t1[12];
    if (13 >= t2)
      throw H.ioore(t1, 13);
    a31 = t1[13];
    if (14 >= t2)
      throw H.ioore(t1, 14);
    a32 = t1[14];
    if (15 >= t2)
      throw H.ioore(t1, 15);
    a33 = t1[15];
    b00 = a00 * a11 - a01 * a10;
    b01 = a00 * a12 - a02 * a10;
    b02 = a00 * a13 - a03 * a10;
    b03 = a01 * a12 - a02 * a11;
    b04 = a01 * a13 - a03 * a11;
    b05 = a02 * a13 - a03 * a12;
    b06 = a20 * a31 - a21 * a30;
    b07 = a20 * a32 - a22 * a30;
    b08 = a20 * a33 - a23 * a30;
    b09 = a21 * a32 - a22 * a31;
    b10 = a21 * a33 - a23 * a31;
    b11 = a22 * a33 - a23 * a32;
    det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (det === 0) {
      this.setFrom$1(arg);
      return 0;
    }
    invDet = 1 / det;
    t1 = this.storage;
    t1[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;
    t1[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;
    t1[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;
    t1[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;
    t2 = -a10;
    t1[4] = (t2 * b11 + a12 * b08 - a13 * b07) * invDet;
    t1[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;
    t3 = -a30;
    t1[6] = (t3 * b05 + a32 * b02 - a33 * b01) * invDet;
    t1[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;
    t1[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;
    t1[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;
    t1[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;
    t1[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;
    t1[12] = (t2 * b09 + a11 * b07 - a12 * b06) * invDet;
    t1[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;
    t1[14] = (t3 * b03 + a31 * b01 - a32 * b00) * invDet;
    t1[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;
    return det;
  },
  transform$1: function(_, arg) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21;
    t1 = this.storage;
    t2 = t1[0];
    t3 = arg.storage;
    t4 = t3[0];
    t5 = t1[4];
    t6 = t3[1];
    t7 = t1[8];
    t8 = t3[2];
    t9 = t1[12];
    t10 = t3[3];
    t11 = t1[1];
    t12 = t1[5];
    t13 = t1[9];
    t14 = t1[13];
    t15 = t1[2];
    t16 = t1[6];
    t17 = t1[10];
    t18 = t1[14];
    t19 = t1[3];
    t20 = t1[7];
    t21 = t1[11];
    t1 = t1[15];
    t3[0] = t2 * t4 + t5 * t6 + t7 * t8 + t9 * t10;
    t3[1] = t11 * t4 + t12 * t6 + t13 * t8 + t14 * t10;
    t3[2] = t15 * t4 + t16 * t6 + t17 * t8 + t18 * t10;
    t3[3] = t19 * t4 + t20 * t6 + t21 * t8 + t1 * t10;
    return arg;
  }
},

Quaternion: {"": "Object;storage<",
  get$x: function(_) {
    return this.storage[0];
  },
  get$y: function(_) {
    return this.storage[1];
  },
  get$z: function(_) {
    return this.storage[2];
  },
  clone$0: function(_) {
    return T.Quaternion$copy(this);
  },
  get$length2: function() {
    var t1, _x, _y, _z, _w;
    t1 = this.storage;
    _x = t1[0];
    _y = t1[1];
    _z = t1[2];
    _w = t1[3];
    return _x * _x + _y * _y + _z * _z + _w * _w;
  },
  get$length: function(_) {
    var t1 = this.get$length2();
    return Math.sqrt(t1);
  },
  $negate: function(_) {
    var t1 = this.storage;
    return T.Quaternion$(-t1[0], -t1[1], -t1[2], -t1[3]);
  },
  $index: function(_, i) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 4)
      throw H.ioore(t1, i);
    return t1[i];
  },
  $indexSet: function(_, i, arg) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 4)
      throw H.ioore(t1, i);
    t1[i] = arg;
  },
  toString$0: function(_) {
    var t1 = this.storage;
    return H.S(t1[0]) + ", " + H.S(t1[1]) + ", " + H.S(t1[2]) + " @ " + H.S(t1[3]);
  },
  Quaternion$4: function(x, y, z, w) {
    var t1 = this.storage;
    t1[0] = x;
    t1[1] = y;
    t1[2] = z;
    t1[3] = w;
  },
  Quaternion$copy$1: function(original) {
    var t1, t2;
    t1 = this.storage;
    t2 = original.storage;
    t1[0] = t2[0];
    t1[1] = t2[1];
    t1[2] = t2[2];
    t1[3] = t2[3];
  },
  Quaternion$identity$0: function() {
    this.storage[3] = 1;
  },
  static: {
Quaternion$: function(x, y, z, w) {
  var t1 = new Float32Array(4);
  t1.$dartCachedLength = t1.length;
  t1 = new T.Quaternion(t1);
  t1.Quaternion$4(x, y, z, w);
  return t1;
},

Quaternion$copy: function(original) {
  var t1 = new Float32Array(4);
  t1.$dartCachedLength = t1.length;
  t1 = new T.Quaternion(t1);
  t1.Quaternion$copy$1(original);
  return t1;
},

Quaternion$identity: function() {
  var t1 = new Float32Array(4);
  t1.$dartCachedLength = t1.length;
  t1 = new T.Quaternion(t1);
  t1.Quaternion$identity$0();
  return t1;
}}

},

Vector2: {"": "Object;storage<",
  setFrom$1: function(other) {
    var t1, t2;
    t1 = this.storage;
    t2 = other.storage;
    t1[1] = t2[1];
    t1[0] = t2[0];
    return this;
  },
  toString$0: function(_) {
    var t1 = this.storage;
    return "[" + H.S(t1[0]) + "," + H.S(t1[1]) + "]";
  },
  $negate: function(_) {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = t1[0];
    t1 = t1[1];
    t3 = new Float32Array(2);
    t3.$dartCachedLength = t3.length;
    t3 = new T.Vector2(t3);
    t4 = t3.storage;
    t4[0] = -t2;
    t4[1] = -t1;
    return t3;
  },
  $index: function(_, i) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 2)
      throw H.ioore(t1, i);
    return t1[i];
  },
  $indexSet: function(_, i, v) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 2)
      throw H.ioore(t1, i);
    t1[i] = v;
  },
  get$length: function(_) {
    var t1, t2;
    t1 = this.storage;
    t2 = t1[0];
    t1 = t1[1];
    return Math.sqrt(t2 * t2 + t1 * t1);
  },
  get$length2: function() {
    var t1, t2;
    t1 = this.storage;
    t2 = t1[0];
    t1 = t1[1];
    return t2 * t2 + t1 * t1;
  },
  clone$0: function(_) {
    var t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector2(t1);
    t1.setFrom$1(this);
    return t1;
  },
  get$x: function(_) {
    return this.storage[0];
  },
  get$y: function(_) {
    return this.storage[1];
  }
},

Vector3: {"": "Object;storage<",
  setValues$3: function(x_, y_, z_) {
    var t1 = this.storage;
    t1[0] = x_;
    t1[1] = y_;
    t1[2] = z_;
    return this;
  },
  setFrom$1: function(other) {
    var t1, t2;
    t1 = this.storage;
    t2 = other.get$storage();
    if (0 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 0);
    t1[0] = t2[0];
    t2 = other.get$storage();
    if (1 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 1);
    t1[1] = t2[1];
    t2 = other.get$storage();
    if (2 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 2);
    t1[2] = t2[2];
    return this;
  },
  toString$0: function(_) {
    var t1 = this.storage;
    return "[" + H.S(t1[0]) + "," + H.S(t1[1]) + "," + H.S(t1[2]) + "]";
  },
  $negate: function(_) {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = t1[0];
    t3 = t1[1];
    t1 = t1[2];
    t4 = new Float32Array(3);
    t4.$dartCachedLength = t4.length;
    t4 = new T.Vector3(t4);
    t4.setValues$3(-t2, -t3, -t1);
    return t4;
  },
  $sub: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7;
    t1 = this.storage;
    t2 = t1[0];
    t3 = other.get$storage()[0];
    t4 = t1[1];
    t5 = other.storage;
    t6 = t5[1];
    t1 = t1[2];
    t5 = t5[2];
    t7 = new Float32Array(3);
    t7.$dartCachedLength = t7.length;
    t7 = new T.Vector3(t7);
    t7.setValues$3(t2 - t3, t4 - t6, t1 - t5);
    return t7;
  },
  $mul: function(_, scale) {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = t1[0];
    if (typeof scale !== "number")
      throw H.iae(scale);
    t3 = t1[1];
    t1 = t1[2];
    t4 = new Float32Array(3);
    t4.$dartCachedLength = t4.length;
    t4 = new T.Vector3(t4);
    t4.setValues$3(t2 * scale, t3 * scale, t1 * scale);
    return t4;
  },
  $index: function(_, i) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 3)
      throw H.ioore(t1, i);
    return t1[i];
  },
  $indexSet: function(_, i, v) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 3)
      throw H.ioore(t1, i);
    t1[i] = v;
  },
  get$length: function(_) {
    var t1, t2, t3;
    t1 = this.storage;
    t2 = t1[0];
    t3 = t1[1];
    t1 = t1[2];
    return Math.sqrt(t2 * t2 + t3 * t3 + t1 * t1);
  },
  get$length2: function() {
    var t1, t2, t3;
    t1 = this.storage;
    t2 = t1[0];
    t3 = t1[1];
    t1 = t1[2];
    return t2 * t2 + t3 * t3 + t1 * t1;
  },
  normalize$0: function() {
    var l, t1;
    l = this.get$length(this);
    if (l === 0)
      return this;
    l = 1 / l;
    t1 = this.storage;
    t1[0] = t1[0] * l;
    t1[1] = t1[1] * l;
    t1[2] = t1[2] * l;
    return this;
  },
  cross$1: function(other) {
    var t1, _x, _y, _z, ox, oy, oz;
    t1 = this.storage;
    _x = t1[0];
    _y = t1[1];
    _z = t1[2];
    t1 = other.storage;
    ox = t1[0];
    oy = t1[1];
    oz = t1[2];
    t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector3(t1);
    t1.setValues$3(_y * oz - _z * oy, _z * ox - _x * oz, _x * oy - _y * ox);
    return t1;
  },
  applyProjection$1: function(arg) {
    var t1, _x, _y, _z, t2, t3, t4, t5, t6, d;
    t1 = this.storage;
    _x = t1[0];
    _y = t1[1];
    _z = t1[2];
    t2 = arg.get$storage();
    t3 = C.JS_CONST_ZYJ(t2);
    if (3 >= t3)
      throw H.ioore(t2, 3);
    t4 = t2[3];
    if (7 >= t3)
      throw H.ioore(t2, 7);
    t5 = t2[7];
    if (11 >= t3)
      throw H.ioore(t2, 11);
    t6 = t2[11];
    if (15 >= t3)
      throw H.ioore(t2, 15);
    d = 1 / (t4 * _x + t5 * _y + t6 * _z + t2[15]);
    t1[0] = (t2[0] * _x + t2[4] * _y + t2[8] * _z + t2[12]) * d;
    t2 = arg.get$storage();
    t6 = C.JS_CONST_ZYJ(t2);
    if (1 >= t6)
      throw H.ioore(t2, 1);
    t5 = t2[1];
    if (5 >= t6)
      throw H.ioore(t2, 5);
    t4 = t2[5];
    if (9 >= t6)
      throw H.ioore(t2, 9);
    t3 = t2[9];
    if (13 >= t6)
      throw H.ioore(t2, 13);
    t1[1] = (t5 * _x + t4 * _y + t3 * _z + t2[13]) * d;
    t2 = arg.get$storage();
    t3 = C.JS_CONST_ZYJ(t2);
    if (2 >= t3)
      throw H.ioore(t2, 2);
    t4 = t2[2];
    if (6 >= t3)
      throw H.ioore(t2, 6);
    t5 = t2[6];
    if (10 >= t3)
      throw H.ioore(t2, 10);
    t6 = t2[10];
    if (14 >= t3)
      throw H.ioore(t2, 14);
    t1[2] = (t4 * _x + t5 * _y + t6 * _z + t2[14]) * d;
    return this;
  },
  scale$1: function(_, arg) {
    var t1, t2;
    t1 = this.storage;
    t2 = t1[2];
    if (typeof arg !== "number")
      throw H.iae(arg);
    t1[2] = t2 * arg;
    t1[1] = t1[1] * arg;
    t1[0] = t1[0] * arg;
    return this;
  },
  clone$0: function(_) {
    var t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector3(t1);
    t1.setFrom$1(this);
    return t1;
  },
  get$x: function(_) {
    return this.storage[0];
  },
  get$y: function(_) {
    return this.storage[1];
  },
  get$z: function(_) {
    return this.storage[2];
  },
  $isVector3: true
},

Vector4: {"": "Object;storage<",
  setValues$4: function(x_, y_, z_, w_) {
    var t1 = this.storage;
    t1[3] = w_;
    t1[2] = z_;
    t1[1] = y_;
    t1[0] = x_;
    return this;
  },
  setFrom$1: function(other) {
    var t1, t2;
    t1 = this.storage;
    t2 = other.storage;
    t1[3] = t2[3];
    t1[2] = t2[2];
    t1[1] = t2[1];
    t1[0] = t2[0];
    return this;
  },
  toString$0: function(_) {
    var t1 = this.storage;
    return H.S(t1[0]) + "," + H.S(t1[1]) + "," + H.S(t1[2]) + "," + H.S(t1[3]);
  },
  $negate: function(_) {
    var t1, t2, t3, t4, t5;
    t1 = this.storage;
    t2 = t1[0];
    t3 = t1[1];
    t4 = t1[2];
    t1 = t1[3];
    t5 = new Float32Array(4);
    t5.$dartCachedLength = t5.length;
    t5 = new T.Vector4(t5);
    t5.setValues$4(-t2, -t3, -t4, -t1);
    return t5;
  },
  $sub: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = this.storage;
    t2 = t1[0];
    t3 = other.get$storage()[0];
    t4 = t1[1];
    t5 = other.storage;
    t6 = t5[1];
    t7 = t1[2];
    t8 = t5[2];
    t1 = t1[3];
    t5 = t5[3];
    t9 = new Float32Array(4);
    t9.$dartCachedLength = t9.length;
    t9 = new T.Vector4(t9);
    t9.setValues$4(t2 - t3, t4 - t6, t7 - t8, t1 - t5);
    return t9;
  },
  $add: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = this.storage;
    t2 = t1[0];
    t3 = other.storage;
    t4 = t3[0];
    t5 = t1[1];
    t6 = t3[1];
    t7 = t1[2];
    t8 = t3[2];
    t1 = t1[3];
    t3 = t3[3];
    t9 = new Float32Array(4);
    t9.$dartCachedLength = t9.length;
    t9 = new T.Vector4(t9);
    t9.setValues$4(t2 + t4, t5 + t6, t7 + t8, t1 + t3);
    return t9;
  },
  $div: function(_, scale) {
    var o, t1, t2, t3, t4, t5;
    o = 1 / scale;
    t1 = this.storage;
    t2 = t1[0];
    t3 = t1[1];
    t4 = t1[2];
    t1 = t1[3];
    t5 = new Float32Array(4);
    t5.$dartCachedLength = t5.length;
    t5 = new T.Vector4(t5);
    t5.setValues$4(t2 * o, t3 * o, t4 * o, t1 * o);
    return t5;
  },
  $mul: function(_, scale) {
    var t1, t2, t3, t4, t5;
    t1 = this.storage;
    t2 = t1[0];
    if (typeof scale !== "number")
      throw H.iae(scale);
    t3 = t1[1];
    t4 = t1[2];
    t1 = t1[3];
    t5 = new Float32Array(4);
    t5.$dartCachedLength = t5.length;
    t5 = new T.Vector4(t5);
    t5.setValues$4(t2 * scale, t3 * scale, t4 * scale, t1 * scale);
    return t5;
  },
  $index: function(_, i) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 4)
      throw H.ioore(t1, i);
    return t1[i];
  },
  $indexSet: function(_, i, v) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 4)
      throw H.ioore(t1, i);
    t1[i] = v;
  },
  get$length: function(_) {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = t1[0];
    t3 = t1[1];
    t4 = t1[2];
    t1 = t1[3];
    return Math.sqrt(t2 * t2 + t3 * t3 + t4 * t4 + t1 * t1);
  },
  get$length2: function() {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = t1[0];
    t3 = t1[1];
    t4 = t1[2];
    t1 = t1[3];
    return t2 * t2 + t3 * t3 + t4 * t4 + t1 * t1;
  },
  scale$1: function(_, arg) {
    var t1, t2;
    t1 = this.storage;
    t2 = t1[0];
    if (typeof arg !== "number")
      throw H.iae(arg);
    t1[0] = t2 * arg;
    t1[1] = t1[1] * arg;
    t1[2] = t1[2] * arg;
    t1[3] = t1[3] * arg;
    return this;
  },
  clone$0: function(_) {
    var t1 = new Float32Array(4);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector4(t1);
    t1.setFrom$1(this);
    return t1;
  },
  get$x: function(_) {
    return this.storage[0];
  },
  get$y: function(_) {
    return this.storage[1];
  },
  get$z: function(_) {
    return this.storage[2];
  },
  $isVector4: true
}}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Static function getters
init.globalFunctions.IsolateNatives__processWorkerMessage$closure = H.IsolateNatives__processWorkerMessage$closure = new H.Closure$2(H.IsolateNatives__processWorkerMessage, "IsolateNatives__processWorkerMessage$closure");
init.globalFunctions.toStringWrapper$closure = H.toStringWrapper$closure = new H.Closure$0(H.toStringWrapper, "toStringWrapper$closure");
init.globalFunctions.invokeClosure$closure = H.invokeClosure$closure = new H.Closure$7(H.invokeClosure, "invokeClosure$closure");
init.globalFunctions.onDocumentMouseMove$closure = Z.onDocumentMouseMove$closure = new Z.Closure$1(Z.onDocumentMouseMove, "onDocumentMouseMove$closure");
init.globalFunctions.onDocumentTouchStart$closure = Z.onDocumentTouchStart$closure = new Z.Closure$1(Z.onDocumentTouchStart, "onDocumentTouchStart$closure");
init.globalFunctions.onDocumentTouchMove$closure = Z.onDocumentTouchMove$closure = new Z.Closure$1(Z.onDocumentTouchMove, "onDocumentTouchMove$closure");
init.globalFunctions.animate$closure = Z.animate$closure = new Z.Closure$1(Z.animate, "animate$closure");
init.globalFunctions.main$closure = Z.main$closure = new H.Closure$0(Z.main, "main$closure");
init.globalFunctions._asyncRunCallback$closure = P._asyncRunCallback$closure = new H.Closure$0(P._asyncRunCallback, "_asyncRunCallback$closure");
init.globalFunctions._nullDataHandler$closure = P._nullDataHandler$closure = new Z.Closure$1(P._nullDataHandler, "_nullDataHandler$closure");
init.globalFunctions._nullErrorHandler$closure = P._nullErrorHandler$closure = new P.Closure$20(P._nullErrorHandler, "_nullErrorHandler$closure");
init.globalFunctions._nullDoneHandler$closure = P._nullDoneHandler$closure = new H.Closure$0(P._nullDoneHandler, "_nullDoneHandler$closure");
init.globalFunctions._defaultEquals$closure = P._defaultEquals$closure = new H.Closure$2(P._defaultEquals, "_defaultEquals$closure");
init.globalFunctions._defaultHashCode$closure = P._defaultHashCode$closure = new Z.Closure$1(P._defaultHashCode, "_defaultHashCode$closure");
init.globalFunctions.Comparable_compare$closure = P.Comparable_compare$closure = new H.Closure$2(P.Comparable_compare, "Comparable_compare$closure");
init.globalFunctions.identical$closure = P.identical$closure = new H.Closure$2(P.identical, "identical$closure");
init.globalFunctions.identityHashCode$closure = P.identityHashCode$closure = new Z.Closure$1(P.identityHashCode, "identityHashCode$closure");
// Runtime type support
J.JSInt.$isint = true;
J.JSInt.$isnum = true;
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isObject = true;
W.Touch.$isObject = true;
J.JSDouble.$isdouble = true;
J.JSDouble.$isnum = true;
J.JSDouble.$isComparable = true;
J.JSDouble.$asComparable = [J.JSNumber];
J.JSDouble.$isComparable = true;
J.JSDouble.$asComparable = [J.JSNumber];
J.JSDouble.$isObject = true;
W.Node.$isObject = true;
J.JSNumber.$isnum = true;
J.JSNumber.$isComparable = true;
J.JSNumber.$asComparable = [J.JSNumber];
J.JSNumber.$isObject = true;
J.JSString.$isString = true;
J.JSString.$isComparable = true;
J.JSString.$asComparable = [J.JSString];
J.JSString.$isObject = true;
P.Duration.$isComparable = true;
P.Duration.$asComparable = [P.Duration];
P.Duration.$isObject = true;
W.MouseEvent.$isMouseEvent = true;
W.MouseEvent.$isObject = true;
W.TouchEvent.$isTouchEvent = true;
W.TouchEvent.$isObject = true;
T.Vector3.$isVector3 = true;
T.Vector3.$isObject = true;
P.ReceivePort.$isStream = true;
P.ReceivePort.$asStream = [null];
P.ReceivePort.$isObject = true;
H._IsolateEvent.$isObject = true;
H._IsolateContext.$isObject = true;
J.JSArray.$isIterable = true;
J.JSArray.$isObject = true;
P.Symbol.$isSymbol = true;
P.Symbol.$isObject = true;
W.CanvasRenderingContext2D.$isCanvasRenderingContext2D = true;
W.CanvasRenderingContext2D.$isObject = true;
P.StackTrace.$isStackTrace = true;
P.StackTrace.$isObject = true;
P.Object.$isObject = true;
P.Function.$isFunction = true;
P.Function.$isObject = true;
J.JSBool.$isbool = true;
J.JSBool.$isObject = true;
P.Comparable.$isComparable = true;
P.Comparable.$isObject = true;
P._EventSink.$is_EventSink = true;
P._EventSink.$isObject = true;
P.Future.$isFuture = true;
P.Future.$isObject = true;
P.StreamSubscription.$isStreamSubscription = true;
P.StreamSubscription.$isObject = true;
T.Matrix4.$isMatrix4 = true;
T.Matrix4.$isObject = true;
T.Quaternion.$isQuaternion = true;
T.Quaternion.$isObject = true;
T.Vector4.$isVector4 = true;
T.Vector4.$isObject = true;
S.Scene.$isScene = true;
S.Scene.$isObject = true;
S.Camera.$isCamera = true;
S.Camera.$isObject = true;
P.Iterable.$isIterable = true;
P.Iterable.$isObject = true;
P.Stream.$isStream = true;
P.Stream.$isObject = true;
T.Vector2.$isVector2 = true;
T.Vector2.$isObject = true;
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
C.C__DelayedDone = new P._DelayedDone();
C.C__RootZone = new P._RootZone();
C.Duration_0 = new P.Duration(0);
C.EventStreamProvider_mousemove = new W.EventStreamProvider("mousemove");
C.EventStreamProvider_touchmove = new W.EventStreamProvider("touchmove");
C.EventStreamProvider_touchstart = new W.EventStreamProvider("touchstart");
C.JSArray_methods = J.JSArray.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
C.JS_CONST_6qb = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
C.JS_CONST_86y = function getTagFallback(o) {
  if (o == null) return "Null";
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.builtin$cls;
    if (typeof name == "string") return name;
    name = constructor.name;
    if (typeof name == "string"
        && name !== ""
        && name !== "Object"
        && name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
C.JS_CONST_Cbr = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var userAgent = navigator.userAgent;
    if (userAgent.indexOf("Chrome") >= 0 ||
        userAgent.indexOf("DumpRenderTree") >= 0) {
      return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
C.JS_CONST_TtD = function() {
  function typeNameInChrome(obj) { return obj.constructor.name; }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
C.JS_CONST_ZYJ =     ((typeof version == "function" && typeof os == "object" && "system" in os)
    || (typeof navigator == "object"
        && navigator.userAgent.indexOf('Chrome') != -1))
        ? function(x) { return x.$dartCachedLength || x.length; }
        : function(x) { return x.length; };
;
C.JS_CONST_rD3 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    if (tag == "Document") return null;
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
C.List_empty = Isolate.makeConstantList([]);
C.NodeList_methods = W.NodeList.prototype;
C.Type_oqh = H.createRuntimeType('Uint64List');
C.Type_qxd = H.createRuntimeType('Int64List');
C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
C.Window_methods = W.Window.prototype;
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.getTagFunction = null;
$.alternateTagFunction = null;
$.prototypeForTagFunction = null;
$.dispatchRecordsForInstanceTags = null;
$.interceptorsForUncacheableTags = null;
$.initNativeDispatchFlag = null;
$.container = null;
$.camera = null;
$.scene = null;
$.renderer = null;
$.material = null;
$.geometry = null;
$.mouseX = 0;
$.mouseY = 0;
$.windowHalfX = 0;
$.windowHalfY = 0;
$.printToZone = null;
$._callbacksAreEnqueued = false;
$.Zone__current = C.C__RootZone;
$.Expando__keyCount = 0;
$.Device__isOpera = null;
$.Device__isWebKit = null;
$.GeometryCount = 0;
$.Object3DCount = 0;
$.MaterialCount = 0;
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return J.getInterceptor$n(receiver).$ge(receiver, a0);
};
J.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return J.getInterceptor$n(receiver).$gt(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
J.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return J.getInterceptor$n(receiver).$lt(receiver, a0);
};
J.$negate$n = function(receiver) {
  if (typeof receiver == "number")
    return -receiver;
  return J.getInterceptor$n(receiver).$negate(receiver);
};
J.addEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
};
J.beginPath$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).beginPath$0(receiver);
};
J.clearRect$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).clearRect$4(receiver, a0, a1, a2, a3);
};
J.clone$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).clone$0(receiver);
};
J.closePath$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).closePath$0(receiver);
};
J.compareTo$1$ns = function(receiver, a0) {
  return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
J.fillRect$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).fillRect$4(receiver, a0, a1, a2, a3);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.get$data$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$data(receiver);
};
J.get$error$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$error(receiver);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$nodes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$nodes(receiver);
};
J.get$touches$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$touches(receiver);
};
J.get$z$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$z(receiver);
};
J.getContext$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getContext$1(receiver, a0);
};
J.getImageData$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).getImageData$4(receiver, a0, a1, a2, a3);
};
J.lineTo$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).lineTo$2(receiver, a0, a1);
};
J.moveTo$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).moveTo$2(receiver, a0, a1);
};
J.removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
};
J.restore$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).restore$0(receiver);
};
J.rotate$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).rotate$1(receiver, a0);
};
J.save$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).save$0(receiver);
};
J.scale$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).scale$2(receiver, a0, a1);
};
J.set$fillStyle$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$fillStyle(receiver, value);
};
J.set$globalAlpha$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$globalAlpha(receiver, value);
};
J.set$globalCompositeOperation$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$globalCompositeOperation(receiver, value);
};
J.set$height$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$height(receiver, value);
};
J.set$lineCap$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$lineCap(receiver, value);
};
J.set$lineJoin$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$lineJoin(receiver, value);
};
J.set$lineWidth$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$lineWidth(receiver, value);
};
J.set$strokeStyle$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$strokeStyle(receiver, value);
};
J.set$width$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$width(receiver, value);
};
J.setTransform$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return J.getInterceptor$x(receiver).setTransform$6(receiver, a0, a1, a2, a3, a4, a5);
};
J.stroke$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).stroke$0(receiver);
};
J.strokeRect$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).strokeRect$4(receiver, a0, a1, a2, a3);
};
J.toDouble$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).toDouble$0(receiver);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
J.translate$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).translate$2(receiver, a0, a1);
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() { return this; }();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return new P.Expando(null);
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ $method$: null, toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnNull());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnUndefined());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnNull());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnUndefined());
});
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  return P.ListQueue$(null, {func: "void_", void: true});
});
Isolate.$lazy($, "_toStringVisiting", "_toStringVisiting", "get$_toStringVisiting", function() {
  return P.HashSet_HashSet$identity(null);
});
Isolate.$lazy($, "_toStringList", "Maps__toStringList", "get$Maps__toStringList", function() {
  return P.List_List(null, null);
});
// Native classes

init.functionAliases = {};
;
init.metadata = [];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {};
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
!function() {
  var objectProto = Object.prototype;
  for (var i = 0;; i++) {
    var property = "___dart_dispatch_record_ZxYxX_0_";
    if (i > 0)
      property = rootProperty + "_" + i;
    if (!(property in objectProto))
      return init.dispatchPropertyName = property;
  }
}();
// BEGIN invoke [main].
;(function (callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }

  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;

  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { H.startRootIsolate(Z.main$closure); });
  } else {
    H.startRootIsolate(Z.main$closure);
  }
});
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, accessors, cls) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable = false;
    if (code == 45) {
      len--;
      code = field.charCodeAt(len - 1);
      field = field.substring(0, len);
      reflectable = true;
    }
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields) {
    var accessors = [];
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, cls);
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += cls + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + cls + ";\n";
    str += "if($desc instanceof Array) $desc = $desc[1];\n";
    str += cls + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string") {
      str += cls + ".name=\"" + cls + "\";\n";
    }
    str += accessors.join("");
    return str;
  }
  var inheritFrom = function() {
    function tmp() {
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      for (var member in properties)
        if (hasOwnProperty.call(properties, member))
          object[member] = properties[member];
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    if (!init.allClasses)
      init.allClasses = {};
    var allClasses = init.allClasses;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (typeof dart_precompiled == "function") {
      var constructors = dart_precompiled(collectedClasses);
    } else {
      var combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
      var constructorsList = [];
    }
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        if (desc instanceof Array)
          desc = desc[1];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        var s = fields.split(";");
        fields = s[1] == "" ? [] : s[1].split(",");
        supr = s[0];
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          if (mixin instanceof Array)
            mixin = mixin[1];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        if (typeof dart_precompiled != "function") {
          combinedConstructorFunction += defineClass(name, cls, fields);
          constructorsList.push(cls);
        }
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    if (typeof dart_precompiled != "function") {
      combinedConstructorFunction += "return [\n  " + constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", combinedConstructorFunction)(collectedClasses);
      combinedConstructorFunction = null;
    }
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = collectedClasses[cls];
      var globalObject = isolateProperties;
      if (desc instanceof Array) {
        globalObject = desc[0] || isolateProperties;
        desc = desc[1];
      }
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = {};
    init.interceptorsByTag = Object.create(null);
    init.leafTags = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = inheritFrom(constructor, superConstructor);
      if (hasOwnProperty.call(prototype, "%")) {
        var nativeSpec = prototype["%"].split(";");
        if (nativeSpec[0]) {
          var tags = nativeSpec[0].split("|");
          for (var i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = true;
          }
        }
        if (nativeSpec[1]) {
          tags = nativeSpec[1].split("|");
          if (nativeSpec[2]) {
            var subclasses = nativeSpec[2].split("|");
            for (var i = 0; i < subclasses.length; i++) {
              var subclass = allClasses[subclasses[i]];
              subclass.$nativeSuperclassTag = tags[0];
            }
          }
          for (i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = false;
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.$finishClasses = oldIsolate.$finishClasses;
    Isolate.makeConstantList = oldIsolate.makeConstantList;
    return Isolate;
  };
}
})()

//# sourceMappingURL=canvas_lines.dart.js.map
//@ sourceMappingURL=canvas_lines.dart.js.map
