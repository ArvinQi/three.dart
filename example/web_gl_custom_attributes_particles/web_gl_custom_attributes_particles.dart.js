// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
(function($) {
var A = {};
delete A.x;
var B = {};
delete B.x;
var C = {};
delete C.x;
var D = {};
delete D.x;
var E = {};
delete E.x;
var F = {};
delete F.x;
var G = {};
delete G.x;
var H = {};
delete H.x;
var J = {};
delete J.x;
var K = {};
delete K.x;
var L = {};
delete L.x;
var M = {};
delete M.x;
var N = {};
delete N.x;
var O = {};
delete O.x;
var P = {};
delete P.x;
var Q = {};
delete Q.x;
var R = {};
delete R.x;
var S = {};
delete S.x;
var T = {};
delete T.x;
var U = {};
delete U.x;
var V = {};
delete V.x;
var W = {};
delete W.x;
var X = {};
delete X.x;
var Y = {};
delete Y.x;
var Z = {};
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
// Method closures
$$.BoundClosure$i1 = [P, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$1: function(p0) {
    return this.__js_helper$_target.call(this._self, this._receiver, p0);
  },
  call$0: function() {
    return this.call$1(null);
  },
  $is_args1: true
}];

$$.BoundClosure$i10 = [J, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$1: function(p0) {
    return this.__js_helper$_target.call(this._self, this._receiver, p0);
  },
  $is_args1: true
}];

$$.BoundClosure$i0 = [H, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$0: function() {
    return this.__js_helper$_target.call(this._self, this._receiver);
  }
}];

$$.BoundClosure$1 = [H, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$1: function(p0) {
    return this.__js_helper$_target.call(this._self, p0);
  },
  $is_args1: true
}];

$$.BoundClosure$2 = [P, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$2: function(p0, p1) {
    return this.__js_helper$_target.call(this._self, p0, p1);
  },
  call$1: function(p0) {
    return this.call$2(p0, null);
  },
  $is_args2: true,
  $is_args1: true
}];

$$.BoundClosure$0 = [P, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$0: function() {
    return this.__js_helper$_target.call(this._self);
  }
}];

$$.BoundClosure$20 = [P, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$2: function(p0, p1) {
    return this.__js_helper$_target.call(this._self, p0, p1);
  },
  $is_args2: true
}];

$$.BoundClosure$4 = [S, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$4: function(p0, p1, p2, p3) {
    return this.__js_helper$_target.call(this._self, p0, p1, p2, p3);
  },
  call$2: function(p0, p1) {
    return this.call$4(p0, p1, null, null);
  },
  call$3: function(p0, p1, p2) {
    return this.call$4(p0, p1, p2, null);
  },
  $is_args2: true
}];

$$.Closure$2 = [H, {"": "Closure;call$2,$name", $is_args2: true}];

$$.Closure$1 = [H, {"": "Closure;call$1,$name", $is_args1: true}];

$$.Closure$0 = [H, {"": "Closure;call$0,$name"}];

$$.Closure$7 = [H, {"": "Closure;call$7,$name"}];

$$.Closure$21 = [P, {"": "Closure;call$2,$name",
  call$1: function(p0) {
    return this.call$2(p0, null);
  },
  $is_args2: true,
  $is_args1: true
}];

(function (reflectionData) {
  function map(x){x={x:x};delete x.x;return x}
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = map();
  if (!init.mangledGlobalNames) init.mangledGlobalNames = map();
  if (!init.statics) init.statics = map();
  if (!init.typeInformation) init.typeInformation = map();
  if (!init.globalFunctions) init.globalFunctions = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor[""];
    var classes = [];
    var functions = [];
    function processStatics(descriptor) {
      for (var property in descriptor) {
        if (!hasOwnProperty.call(descriptor, property)) continue;
        if (property === "") continue;
        var element = descriptor[property];
        var firstChar = property.substring(0, 1);
        var previousProperty;
        if (firstChar === "+") {
          mangledGlobalNames[previousProperty] = property.substring(1);
          if (descriptor[property] == 1) descriptor[previousProperty].$reflectable = 1;
          if (element && element.length) init.typeInformation[previousProperty] = element;
        } else if (firstChar === "@") {
          property = property.substring(1);
          $[property]["@"] = element;
        } else if (firstChar === "*") {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods) {
            descriptor.$methodsWithOptionalArguments = optionalMethods = {}
          }
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else {
          previousProperty = property;
          var newDesc = {};
          var previousProp;
          for (var prop in element) {
            if (!hasOwnProperty.call(element, prop)) continue;
            firstChar = prop.substring(0, 1);
            if (prop === "static") {
              processStatics(init.statics[property] = element[prop]);
            } else if (firstChar === "+") {
              mangledNames[previousProp] = prop.substring(1);
              if (element[prop] == 1) element[previousProp].$reflectable = 1;
            } else if (firstChar === "@" && prop !== "@") {
              newDesc[prop.substring(1)]["@"] = element[prop];
            } else if (firstChar === "*") {
              newDesc[previousProp].$defaultValues = element[prop];
              var optionalMethods = newDesc.$methodsWithOptionalArguments;
              if (!optionalMethods) {
                newDesc.$methodsWithOptionalArguments = optionalMethods={}
              }
              optionalMethods[prop] = previousProp;
            } else {
              newDesc[previousProp = prop] = element[prop];
            }
          }
          $$[property] = [globalObject, newDesc];
          classes.push(property);
        }
      }
    }
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot,
                    globalObject]);
  }
})([
["ImageUtils", "package:three/extras/image_utils.dart", , L, {
loadTexture: function(url, mapping, onError, onLoad) {
  var image, texture, loader;
  image = W.ImageElement_ImageElement(null, null, null);
  texture = S.Texture$(image, mapping, 1, 1, 6, 8, 18, 10, 1);
  loader = new S.ImageLoader(null, H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
  loader.addEventListener$2(loader, "load", new L.loadTexture_closure(onLoad, texture));
  loader.addEventListener$2(loader, "error", new L.loadTexture_closure0(onError));
  loader.crossOrigin = $.crossOrigin;
  loader.load$2(loader, url, image);
  return texture;
},

loadTexture_closure: {"": "Closure;onLoad_0,texture_1",
  call$1: function($event) {
    var t1 = this.texture_1;
    t1.image = J.get$content$x($event);
    t1.needsUpdate = true;
  },
  $is_args1: true
},

loadTexture_closure0: {"": "Closure;onError_2",
  call$1: function($event) {
  },
  $is_args1: true
}}],
["_foreign_helper", "dart:_foreign_helper", , H, {
JS_CONST: {"": "Object;code"}}],
["_interceptors", "dart:_interceptors", , J, {
getInterceptor: function(object) {
  return void 0;
},

makeDispatchRecord: function(interceptor, proto, extension, indexability) {
  return {i: interceptor, p: proto, e: extension, x: indexability};
},

getNativeInterceptor: function(object) {
  var record, proto, objectProto, interceptor;
  record = object[init.dispatchPropertyName];
  if (record == null)
    if ($.initNativeDispatchFlag == null) {
      H.initNativeDispatch();
      record = object[init.dispatchPropertyName];
    }
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
  }
  interceptor = H.lookupAndCacheInterceptor(object);
  if (interceptor == null)
    return C.UnknownJavaScriptObject_methods;
  return interceptor;
},

Interceptor: {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return H.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return H.Primitives_objectToString(receiver);
  },
  "%": "ANGLEInstancedArrays|AbstractWorker|AudioListener|CSS|CSSVariablesMap|Canvas2DContextAttributes|CanvasGradient|CanvasPattern|Clipboard|Composition|ConsoleBase|Coordinates|Counter|Crypto|DOMError|DOMFileSystem|DOMFileSystemSync|DOMImplementation|DOMParser|Database|DatabaseSync|DeviceRotationRate|DirectoryEntrySync|DirectoryReader|DirectoryReaderSync|EXTFragDepth|EXTTextureFilterAnisotropic|EntrySync|FileEntrySync|FileError|FileReaderSync|FileWriterSync|FontFace|FormData|Geolocation|Geoposition|HTMLAllCollection|IDBAny|IDBFactory|IDBKeyRange|ImageBitmap|InputMethodContext|KeyPair|MIDIAccessPromise|MediaError|MediaKeyError|MediaKeys|MediaQueryList|MemoryInfo|MessageChannel|Metadata|MutationObserver|Navigator|NavigatorUserMediaError|NodeFilter|NodeIterator|NotificationCenter|OESElementIndexUint|OESStandardDerivatives|OESTextureFloat|OESTextureFloatLinear|OESTextureHalfFloat|OESTextureHalfFloatLinear|OESVertexArrayObject|PagePopupController|Path|PerformanceEntry|PerformanceMark|PerformanceMeasure|PerformanceResourceTiming|PerformanceTiming|PeriodicWave|PositionError|Promise|RGBColor|RTCIceCandidate|RTCStatsResponse|Rect|SQLError|SQLResultSet|SQLTransaction|SQLTransactionSync|SVGAnimatedAngle|SVGAnimatedBoolean|SVGAnimatedEnumeration|SVGAnimatedInteger|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedPreserveAspectRatio|SVGAnimatedRect|SVGAnimatedString|SVGAnimatedTransformList|SVGColor|SVGPaint|SVGPointList|SVGPreserveAspectRatio|SVGRenderingIntent|SVGUnitTypes|SVGViewSpec|Screen|SecurityPolicy|ServiceWorker|SpeechRecognitionAlternative|SpeechSynthesis|SpeechSynthesisVoice|StorageInfo|StorageQuota|SubtleCrypto|TextMetrics|TreeWalker|URL|ValidityState|WebGLBuffer|WebGLCompressedTextureATC|WebGLCompressedTexturePVRTC|WebGLCompressedTextureS3TC|WebGLContextAttributes|WebGLDebugRendererInfo|WebGLDebugShaders|WebGLDepthTexture|WebGLDrawBuffers|WebGLExtensionLoseContext|WebGLFramebuffer|WebGLLoseContext|WebGLProgram|WebGLRenderbuffer|WebGLShader|WebGLShaderPrecisionFormat|WebGLTexture|WebGLUniformLocation|WebGLVertexArrayObjectOES|WebKitCSSMatrix|WebKitMutationObserver|WebKitSourceBuffer|WorkerConsole|WorkerCrypto|WorkerLocation|WorkerNavigator|WorkerPerformance|XMLSerializer|XPathEvaluator|XPathExpression|XPathNSResolver|XPathResult|XSLTProcessor|mozRTCIceCandidate"
},

JSBool: {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true
},

JSNull: {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  }
},

JavaScriptObject: {"": "Interceptor;",
  get$hashCode: function(_) {
    return 0;
  }
},

PlainJavaScriptObject: {"": "JavaScriptObject;"},

UnknownJavaScriptObject: {"": "JavaScriptObject;"},

JSArray: {"": "List/Interceptor;",
  add$1: function(receiver, value) {
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("add"));
    receiver.push(value);
  },
  removeAt$1: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index < 0 || index >= receiver.length)
      throw H.wrapException(P.RangeError$value(index));
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("removeAt"));
    return receiver.splice(index, 1)[0];
  },
  remove$1: function(receiver, element) {
    var i;
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("remove"));
    for (i = 0; i < receiver.length; ++i)
      if (J.$eq(receiver[i], element)) {
        receiver.splice(i, 1);
        return true;
      }
    return false;
  },
  addAll$1: function(receiver, collection) {
    var t1;
    for (t1 = C.Float32List_methods.get$iterator(collection); t1.moveNext$0();)
      this.add$1(receiver, t1._current);
  },
  forEach$1: function(receiver, f) {
    return H.IterableMixinWorkaround_forEach(receiver, f);
  },
  map$1: function(receiver, f) {
    var t1 = new H.MappedListIterable(receiver, f);
    H.setRuntimeTypeInfo(t1, [null, null]);
    return t1;
  },
  get$map: function(_receiver) {
    return new J.BoundClosure$i10(this, J.JSArray.prototype.map$1, _receiver, "map$1");
  },
  join$1: function(receiver, separator) {
    var t1, list, i, t2;
    t1 = receiver.length;
    list = P.List_List(t1, null);
    for (i = 0; i < receiver.length; ++i) {
      t2 = H.S(receiver[i]);
      if (i >= t1)
        throw H.ioore(list, i);
      list[i] = t2;
    }
    return list.join(separator);
  },
  join$0: function($receiver) {
    return this.join$1($receiver, "");
  },
  fold$2: function(receiver, initialValue, combine) {
    return H.IterableMixinWorkaround_fold(receiver, initialValue, combine);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  any$1: function(receiver, f) {
    return H.IterableMixinWorkaround_any(receiver, f);
  },
  sort$1: function(receiver, compare) {
    if (!!receiver.immutable$list)
      H.throwExpression(P.UnsupportedError$("sort"));
    H.IterableMixinWorkaround_sortList(receiver, compare);
  },
  indexOf$2: function(receiver, element, start) {
    return H.Arrays_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  toString$0: function(receiver) {
    return H.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
  },
  toList$1$growable: function(receiver, growable) {
    return P.List_List$from(receiver, growable, H.getRuntimeTypeArgument(receiver, "JSArray", 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$iterator: function(receiver) {
    return new H.ListIterator(receiver, receiver.length, 0, null);
  },
  get$hashCode: function(receiver) {
    return H.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
      throw H.wrapException(new P.ArgumentError(newLength));
    if (newLength < 0)
      throw H.wrapException(P.RangeError$value(newLength));
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("set length"));
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    if (!!receiver.immutable$list)
      H.throwExpression(P.UnsupportedError$("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(P.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    receiver[index] = value;
  },
  $isList: true,
  $asList: null,
  $isList: true,
  $isEfficientLength: true
},

JSMutableArray: {"": "JSArray;", $isJSMutableArray: true,
  $asJSArray: function() {
    return [null];
  },
  $asList: function() {
    return [null];
  }
},

JSFixedArray: {"": "JSMutableArray;"},

JSExtendableArray: {"": "JSMutableArray;", $isJSExtendableArray: true},

JSNumber: {"": "num/Interceptor;",
  compareTo$1: function(receiver, b) {
    var bIsNegative;
    if (typeof b !== "number")
      throw H.wrapException(new P.ArgumentError(b));
    if (receiver < b)
      return -1;
    else if (receiver > b)
      return 1;
    else if (receiver === b) {
      if (receiver === 0) {
        bIsNegative = this.get$isNegative(b);
        if (this.get$isNegative(receiver) === bIsNegative)
          return 0;
        if (this.get$isNegative(receiver))
          return -1;
        return 1;
      }
      return 0;
    } else if (isNaN(receiver)) {
      if (this.get$isNaN(b))
        return 0;
      return 1;
    } else
      return -1;
  },
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  get$isInfinite: function(receiver) {
    return receiver == Infinity || receiver == -Infinity;
  },
  remainder$1: function(receiver, b) {
    return receiver % b;
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  toInt$0: function(receiver) {
    var t1;
    if (receiver >= -2147483648 && receiver <= 2147483647)
      return receiver | 0;
    if (isFinite(receiver)) {
      t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
      return t1 + 0;
    }
    throw H.wrapException(P.UnsupportedError$('' + receiver));
  },
  floor$0: function(receiver) {
    return this.toInt$0(Math.floor(receiver));
  },
  roundToDouble$0: function(receiver) {
    if (receiver < 0)
      return -Math.round(-receiver);
    else
      return Math.round(receiver);
  },
  toDouble$0: function(receiver) {
    return receiver;
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $negate: function(receiver) {
    return -receiver;
  },
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver - other;
  },
  $mul: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver * other;
  },
  $tdiv: function(receiver, other) {
    if ((receiver | 0) === receiver && (other | 0) === other && 0 !== other && -1 !== other)
      return receiver / other | 0;
    else
      return this._slowTdiv$1(receiver, other);
  },
  _slowTdiv$1: function(receiver, other) {
    return this.toInt$0(receiver / other);
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw H.wrapException(P.ArgumentError$(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return receiver >> other >>> 0;
  },
  $lt: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(P.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver > other;
  },
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(P.ArgumentError$(other));
    return receiver >= other;
  },
  $isnum: true,
  static: {
"": "JSNumber__MIN_INT32,JSNumber__MAX_INT32",
}

},

JSInt: {"": "int/JSNumber;", $isdouble: true, $isnum: true, $isint: true},

JSDouble: {"": "double/JSNumber;", $isdouble: true, $isnum: true},

JSString: {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(P.ArgumentError$(index));
    if (index < 0)
      throw H.wrapException(P.RangeError$value(index));
    if (index >= receiver.length)
      throw H.wrapException(P.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  matchAsPrefix$2: function(receiver, string, start) {
    var t1, t2, i, t3;
    if (start < 0 || start > string.length)
      throw H.wrapException(P.RangeError$range(start, 0, string.length));
    t1 = receiver.length;
    t2 = string.length;
    if (start + t1 > t2)
      return;
    for (i = 0; i < t1; ++i) {
      t3 = start + i;
      if (typeof t3 !== "number" || Math.floor(t3) !== t3)
        H.throwExpression(new P.ArgumentError(t3));
      if (t3 < 0)
        H.throwExpression(P.RangeError$value(t3));
      if (t3 >= t2)
        H.throwExpression(P.RangeError$value(t3));
      t3 = string.charCodeAt(t3);
      if (i >= t1)
        H.throwExpression(P.RangeError$value(i));
      if (t3 !== receiver.charCodeAt(i))
        return;
    }
    return new H.StringMatch(start, string, receiver);
  },
  $add: function(receiver, other) {
    if (typeof other !== "string")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver + other;
  },
  substring$2: function(receiver, startIndex, endIndex) {
    if (endIndex == null)
      endIndex = receiver.length;
    if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
      H.throwExpression(P.ArgumentError$(endIndex));
    if (startIndex < 0)
      throw H.wrapException(P.RangeError$value(startIndex));
    if (typeof endIndex !== "number")
      throw H.iae(endIndex);
    if (startIndex > endIndex)
      throw H.wrapException(P.RangeError$value(startIndex));
    if (endIndex > receiver.length)
      throw H.wrapException(P.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  indexOf$2: function(receiver, pattern, start) {
    var t1, t2, i;
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw H.wrapException(new P.ArgumentError(start));
    if (start < 0 || start > receiver.length)
      throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
    if (typeof pattern === "string")
      return receiver.indexOf(pattern, start);
    for (t1 = receiver.length, t2 = J.getInterceptor$s(pattern), i = start; i <= t1; ++i)
      if (t2.matchAsPrefix$2(pattern, receiver, i) != null)
        return i;
    return -1;
  },
  indexOf$1: function($receiver, pattern) {
    return this.indexOf$2($receiver, pattern, 0);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  compareTo$1: function(receiver, other) {
    var t1;
    if (typeof other !== "string")
      throw H.wrapException(new P.ArgumentError(other));
    if (receiver === other)
      t1 = 0;
    else
      t1 = receiver < other ? -1 : 1;
    return t1;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var t1, hash, i;
    for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    return receiver[index];
  },
  $isString: true
}}],
["_isolate_helper", "dart:_isolate_helper", , H, {
_callInIsolate: function(isolate, $function) {
  var result = isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
  return result;
},

startRootIsolate: function(entry) {
  var rootContext;
  $globalState = H._Manager$(entry);
  if ($globalState.isWorker === true)
    return;
  rootContext = H._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  if (!!entry.$is_args1)
    rootContext.eval$1(new H.startRootIsolate_closure(entry));
  else if (!!entry.$is_args2)
    rootContext.eval$1(new H.startRootIsolate_closure0(entry));
  else
    rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
},

IsolateNatives_computeThisScript: function() {
  var currentScript = init.currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  if (typeof version == "function" && typeof os == "object" && "system" in os)
    return H.IsolateNatives_computeThisScriptD8();
  if (typeof version == "function" && typeof system == "function")
    return thisFilename();
  return;
},

IsolateNatives_computeThisScriptD8: function() {
  var stack, matches;
  stack = new Error().stack;
  if (stack == null) {
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
    if (stack == null)
      throw H.wrapException(P.UnsupportedError$("No stack trace"));
  }
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw H.wrapException(P.UnsupportedError$("Cannot extract URI from \"" + stack + "\""));
},

IsolateNatives__processWorkerMessage: function(sender, e) {
  var msg, t1, functionName, entryPoint, args, message, isSpawnUri, replyTo, context, t2;
  msg = H._deserializeMessage(e.data);
  t1 = J.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $globalState.currentManagerId = t1.$index(msg, "id");
      functionName = t1.$index(msg, "functionName");
      entryPoint = functionName == null ? $globalState.entry : init.globalFunctions[functionName];
      args = t1.$index(msg, "args");
      message = H._deserializeMessage(t1.$index(msg, "msg"));
      isSpawnUri = t1.$index(msg, "isSpawnUri");
      replyTo = H._deserializeMessage(t1.$index(msg, "replyTo"));
      context = H._IsolateContext$();
      t1 = $globalState.topEventLoop.events;
      t1._add$1(t1, new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, replyTo), "worker-start"));
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      H.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "args"), t1.$index(msg, "msg"), t1.$index(msg, "isSpawnUri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      t1 = $globalState.managers;
      t2 = $.get$IsolateNatives_workerIds();
      t1.remove$1(t1, t2.$index(t2, sender));
      sender.terminate();
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      H.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        t1 = $globalState.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "print", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      } else
        P.print(t1.$index(msg, "msg"));
      break;
    case "error":
      throw H.wrapException(t1.$index(msg, "msg"));
    default:
  }
},

IsolateNatives__log: function(msg) {
  var trace, t1, t2, exception;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t2 = H._serializeMessage(H.fillLiteralMap(["command", "log", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    t1.toString;
    self.postMessage(t2);
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      H.unwrapException(exception);
      trace = new H._StackTrace(exception, null);
      throw H.wrapException(P.Exception_Exception(trace));
    }

},

IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, replyTo) {
  var t1;
  H.Primitives_initializeStatics($globalState.currentContext.id);
  $.lazyPort = H.ReceivePortImpl$();
  t1 = $.lazyPort;
  t1.toString;
  J.send$1$x(replyTo, ["spawned", new H._NativeJsSendPort(t1, $globalState.currentContext.id)]);
  if (isSpawnUri !== true)
    topLevel.call$1(message);
  else {
    t1 = J.getInterceptor(topLevel);
    if (!!t1.$is_args2)
      topLevel.call$2(args, message);
    else if (!!t1.$is_args1)
      topLevel.call$1(args);
    else
      topLevel.call$0();
  }
},

IsolateNatives__spawnWorker: function(functionName, uri, args, message, isSpawnUri, replyPort) {
  var worker, t1, workerId;
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.onmessage = function(e) { H.IsolateNatives__processWorkerMessage$closure.call$2(worker, e); };
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  t1 = $.get$IsolateNatives_workerIds();
  t1.$indexSet(t1, worker, workerId);
  t1 = $globalState.managers;
  t1.$indexSet(t1, workerId, worker);
  worker.postMessage(H._serializeMessage(H.fillLiteralMap(["command", "start", "id", workerId, "replyTo", H._serializeMessage(replyPort), "args", args, "msg", H._serializeMessage(message), "isSpawnUri", isSpawnUri, "functionName", functionName], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))));
},

_waitForPendingPorts: function(message, callback) {
  var finder, t1;
  finder = H._PendingSendPortFinder$();
  finder.traverse$1(message);
  t1 = P.Future_wait(finder.ports);
  t1.then$1(t1, new H._waitForPendingPorts_closure(callback));
},

_serializeMessage: function(message) {
  var t1;
  if ($globalState.supportsWorkers === true) {
    t1 = new H._JsSerializer(0, new H._MessageTraverserVisitedMap());
    t1._visited = new H._JsVisitedMap(null);
    return t1.traverse$1(message);
  } else {
    t1 = new H._JsCopier(new H._MessageTraverserVisitedMap());
    t1._visited = new H._JsVisitedMap(null);
    return t1.traverse$1(message);
  }
},

_deserializeMessage: function(message) {
  if ($globalState.supportsWorkers === true)
    return new H._JsDeserializer(null).deserialize$1(message);
  else
    return message;
},

_MessageTraverser_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

_Deserializer_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

startRootIsolate_closure: {"": "Closure;entry_0",
  call$0: function() {
    this.entry_0.call$1([]);
  }
},

startRootIsolate_closure0: {"": "Closure;entry_1",
  call$0: function() {
    this.entry_1.call$2([], null);
  }
},

_Manager: {"": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    t2 = $.get$globalWorker();
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { H.IsolateNatives__processWorkerMessage$closure.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  _Manager$1: function(entry) {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = new H._EventLoop(P.ListQueue$(null, H._IsolateEvent), 0);
    this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H._IsolateContext);
    this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, null);
    if (this.isWorker === true) {
      this.mainManager = new H._MainManagerStub();
      this._nativeInitWorkerMessageHandler$0();
    }
  },
  static: {
_Manager$: function(entry) {
  var t1 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
  t1._Manager$1(entry);
  return t1;
}}

},

_IsolateContext: {"": "Object;id>,ports,isolateStatics<",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null)
        $ = old.get$isolateStatics();
    }
    return result;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(_, portId, port) {
    var t1 = this.ports;
    if (t1.containsKey$1(t1, portId))
      throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    if (this.ports._collection$_length === 0) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $globalState;
    t2 = t1.nextIsolateId;
    t1.nextIsolateId = t2 + 1;
    this.id = t2;
    this.ports = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, P.ReceivePort);
    this.isolateStatics = new Isolate();
  },
  static: {
_IsolateContext$: function() {
  var t1 = new H._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
}}

},

_EventLoop: {"": "Object;events,activeTimerCount",
  dequeue$0: function() {
    var t1 = this.events;
    if (t1._head === t1._tail)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null) {
      var t1 = $globalState.isolates;
      t1 = t1.containsKey$1(t1, $globalState.rootContext.id) && $globalState.fromCommandLine === true && $globalState.rootContext.ports._collection$_length === 0;
    } else
      t1 = false;
    if (t1)
      throw H.wrapException(P.Exception_Exception("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event, t1, t2;
    $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      t1 = $globalState;
      if (t1.isWorker === true && t1.isolates._collection$_length === 0 && t1.topEventLoop.activeTimerCount === 0) {
        t1 = t1.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "close"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      }
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new H._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1, t2;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        trace = new H._StackTrace(exception, null);
        t1 = $globalState.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      }

  }
},

_EventLoop__runHelper_next: {"": "Closure;this_0",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    P.Timer_Timer(C.Duration_0, this);
  }
},

_IsolateEvent: {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
},

_MainManagerStub: {"": "Object;"},

IsolateNatives__processWorkerMessage_closure: {"": "Closure;entryPoint_0,args_1,message_2,isSpawnUri_3,replyTo_4",
  call$0: function() {
    H.IsolateNatives__startIsolate(this.entryPoint_0, this.args_1, this.message_2, this.isSpawnUri_3, this.replyTo_4);
  }
},

_BaseSendPort: {"": "Object;", $isSendPort: true},

_NativeJsSendPort: {"": "_BaseSendPort;_receivePort,_isolateId",
  send$1: function(_, message) {
    H._waitForPendingPorts(message, new H._NativeJsSendPort_send_closure(this, message));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$is_NativeJsSendPort && J.$eq(this._receivePort, other._receivePort);
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
},

_NativeJsSendPort_send_closure: {"": "Closure;this_1,message_2",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = $globalState.isolates;
    t3 = this.this_1;
    t4 = t3._isolateId;
    isolate = t2.$index(t2, t4);
    if (isolate == null)
      return;
    if ((t3._receivePort.get$_controller()._state & 4) !== 0)
      return;
    shouldSerialize = $globalState.currentContext != null && $globalState.currentContext.id !== t4;
    msg = this.message_2;
    t1.msg_0 = msg;
    if (shouldSerialize)
      t1.msg_0 = H._serializeMessage(t1.msg_0);
    t2 = $globalState.topEventLoop;
    t4 = "receive " + H.S(msg);
    t2 = t2.events;
    t2._add$1(t2, new H._IsolateEvent(isolate, new H._NativeJsSendPort_send__closure(t1, t3, shouldSerialize), t4));
  }
},

_NativeJsSendPort_send__closure: {"": "Closure;box_0,this_3,shouldSerialize_4",
  call$0: function() {
    var t1, t2;
    t1 = this.this_3._receivePort;
    if ((t1.get$_controller()._state & 4) === 0) {
      if (this.shouldSerialize_4) {
        t2 = this.box_0;
        t2.msg_0 = H._deserializeMessage(t2.msg_0);
      }
      t1 = t1._controller;
      t2 = this.box_0.msg_0;
      if (t1._state >= 4)
        H.throwExpression(t1._badEventState$0());
      t1._async$_add$1(t1, t2);
    }
  }
},

_WorkerSendPort: {"": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
  send$1: function(_, message) {
    H._waitForPendingPorts(message, new H._WorkerSendPort_send_closure(this, message));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$is_WorkerSendPort && J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = this._workerId;
    if (typeof t1 !== "number")
      throw t1.$shl();
    t2 = this._isolateId;
    if (typeof t2 !== "number")
      throw t2.$shl();
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw H.iae(t3);
    return (t1 << 16 ^ t2 << 8 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
},

_WorkerSendPort_send_closure: {"": "Closure;this_0,message_1",
  call$0: function() {
    var t1, workerMessage, t2, manager;
    t1 = this.this_0;
    workerMessage = H._serializeMessage(H.fillLiteralMap(["command", "message", "port", t1, "msg", this.message_1], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    if ($globalState.isWorker === true) {
      $globalState.mainManager.toString;
      self.postMessage(workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1._workerId);
      if (manager != null)
        manager.postMessage(workerMessage);
    }
  }
},

ReceivePortImpl: {"": "Stream;_id<,_controller<",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1 = this._controller;
    t1.toString;
    t1 = new P._ControllerStream(t1);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  close$0: function(_) {
    var t1 = this._controller;
    if ((t1._state & 4) !== 0)
      return;
    t1.close$0(t1);
    $globalState.currentContext.unregister$1(this._id);
  },
  get$close: function(_receiver) {
    return new H.BoundClosure$i0(this, H.ReceivePortImpl.prototype.close$0, _receiver, "close$0");
  },
  ReceivePortImpl$0: function() {
    this._controller = P.StreamController_StreamController(this.get$close(this), null, null, null, true, null);
    var t1 = $globalState.currentContext;
    t1.register$2(t1, this._id, this);
  },
  static: {
"": "ReceivePortImpl__nextFreeId",
ReceivePortImpl$: function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = t1 + 1;
  t1 = new H.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
}}

},

_waitForPendingPorts_closure: {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  $is_args1: true
},

_PendingSendPortFinder: {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, list, true);
    J.forEach$1$ax(list, this.get$_dispatch());
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, map, true);
    J.forEach$1$ax(J.get$values$x(map), this.get$_dispatch());
  },
  visitSendPort$1: function(port) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = new H._JsVisitedMap(null);
  },
  static: {
_PendingSendPortFinder$: function() {
  var t1 = new H._PendingSendPortFinder([], new H._MessageTraverserVisitedMap());
  t1._PendingSendPortFinder$0();
  return t1;
}}

},

_JsSerializer: {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (!!x.$is_NativeJsSendPort)
      return ["sendport", $globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
    if (!!x.$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    throw H.wrapException("Illegal underlying port " + H.S(x));
  }
},

_JsCopier: {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (!!x.$is_NativeJsSendPort)
      return new H._NativeJsSendPort(x._receivePort, x._isolateId);
    if (!!x.$is_WorkerSendPort)
      return new H._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
    throw H.wrapException("Illegal underlying port " + H.S(x));
  }
},

_JsDeserializer: {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = J.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if (J.$eq(managerId, $globalState.currentManagerId)) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return new H._NativeJsSendPort(receivePort, isolateId);
    } else
      return new H._WorkerSendPort(managerId, receivePortId, isolateId);
  }
},

_JsVisitedMap: {"": "Object;tagged",
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  $indexSet: function(_, object, info) {
    this.tagged.push(object);
    object.__MessageTraverser__attached_info__ = info;
  },
  reset$0: function(_) {
    this.tagged = P.List_List(null, null);
  },
  cleanup$0: function() {
    var $length, i, t1;
    for ($length = this.tagged.length, i = 0; i < $length; ++i) {
      t1 = this.tagged;
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t1[i].__MessageTraverser__attached_info__ = null;
    }
    this.tagged = null;
  }
},

_MessageTraverserVisitedMap: {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
},

_MessageTraverser: {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    if (H._MessageTraverser_isPrimitive(x))
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    var t1;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    t1 = J.getInterceptor(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!t1.$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isSendPort)
      return this.visitSendPort$1(x);
    return this.visitObject$1(x);
  },
  get$_dispatch: function() {
    return new H.BoundClosure$1(this, H._MessageTraverser.prototype._dispatch$1, null, "_dispatch$1");
  },
  visitObject$1: function(x) {
    throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
  }
},

_Copier: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, t2, i, t3;
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    t1 = J.getInterceptor$asx(list);
    len = t1.get$length(list);
    copy = P.List_List(len, null);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    if (typeof len !== "number")
      throw H.iae(len);
    t2 = copy.length;
    i = 0;
    for (; i < len; ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw H.ioore(copy, i);
      copy[i] = t3;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    J.forEach$1$ax(map, new H._Copier_visitMap_closure(t1, this));
    return t1.copy_0;
  }
},

_Copier_visitMap_closure: {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1 = this.this_1;
    J.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
  },
  $is_args2: true
},

_Serializer: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    t1 = J.getInterceptor$x(map);
    return ["map", id, this._serializeList$1(J.toList$0$ax(t1.get$keys(map))), this._serializeList$1(J.toList$0$ax(t1.get$values(map)))];
  },
  _serializeList$1: function(list) {
    var t1, len, result, t2, i, t3;
    t1 = J.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = P.List_List(len, null);
    if (typeof len !== "number")
      throw H.iae(len);
    t2 = result.length;
    i = 0;
    for (; i < len; ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw H.ioore(result, i);
      result[i] = t3;
    }
    return result;
  }
},

_Deserializer: {"": "Object;",
  deserialize$1: function(x) {
    if (H._Deserializer_isPrimitive(x))
      return x;
    this._deserialized = P.HashMap_HashMap(null, null, null, null, null);
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    var t1, id;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    t1 = J.getInterceptor$asx(x);
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = J.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = J.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    if (typeof len !== "number")
      throw H.iae(len);
    i = 0;
    for (; i < len; ++i)
      t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t1 = J.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    values = t1.$index(x, 3);
    t1 = J.getInterceptor$asx(keys);
    len = t1.get$length(keys);
    if (typeof len !== "number")
      throw H.iae(len);
    t2 = J.getInterceptor$asx(values);
    i = 0;
    for (; i < len; ++i)
      result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
    return result;
  },
  deserializeObject$1: function(x) {
    throw H.wrapException("Unexpected serialized object");
  }
},

TimerImpl: {"": "Object;_once,_inEventLoop,_handle",
  TimerImpl$2: function(milliseconds, callback) {
    var t1, t2;
    if (milliseconds === 0)
      t1 = $.get$globalThis().setTimeout == null || $globalState.isWorker === true;
    else
      t1 = false;
    if (t1) {
      this._handle = 1;
      t1 = $globalState.topEventLoop;
      t2 = $globalState.currentContext;
      t1 = t1.events;
      t1._add$1(t1, new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
      this._inEventLoop = true;
    } else if ($.get$globalThis().setTimeout != null) {
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
    } else
      throw H.wrapException(P.UnsupportedError$("Timer greater than 0."));
  },
  static: {
TimerImpl$: function(milliseconds, callback) {
  var t1 = new H.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
}}

},

TimerImpl_internalCallback: {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.this_0._handle = null;
    this.callback_1.call$0();
  }
},

TimerImpl_internalCallback0: {"": "Closure;this_2,callback_3",
  call$0: function() {
    this.this_2._handle = null;
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
    this.callback_3.call$0();
  }
}}],
["_js_helper", "dart:_js_helper", , H, {
isJsIndexable: function(object, record) {
  var result, t1;
  if (record != null) {
    result = record.x;
    if (result != null)
      return result;
  }
  t1 = J.getInterceptor(object);
  return typeof object === "object" && object !== null && !!t1.$isJavaScriptIndexingBehavior;
},

S: function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = J.toString$0(value);
  if (typeof res !== "string")
    throw H.wrapException(P.ArgumentError$(value));
  return res;
},

Primitives_initializeStatics: function(id) {
  $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + H.S(id));
  $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + H.S(id));
},

Primitives_objectHashCode: function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = Math.random() * 0x3fffffff | 0;
    object.$identityHash = hash;
  }
  return hash;
},

Primitives__throwFormatException: function(string) {
  throw H.wrapException(P.FormatException$(string));
},

Primitives_parseInt: function(source, radix, handleError) {
  var match, t1;
  handleError = H.Primitives__throwFormatException$closure;
  if (typeof source !== "string")
    H.throwExpression(new P.ArgumentError(source));
  match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
  if (match != null) {
    t1 = match.length;
    if (2 >= t1)
      throw H.ioore(match, 2);
    if (match[2] != null)
      return parseInt(source, 16);
    if (3 >= t1)
      throw H.ioore(match, 3);
    if (match[3] != null)
      return parseInt(source, 10);
    return handleError.call$1(source);
  }
  if (match == null)
    return handleError.call$1(source);
  return parseInt(source, 10);
},

Primitives_objectTypeName: function(object) {
  var $name, decompiled;
  $name = C.JS_CONST_86y(J.getInterceptor(object));
  if ($name === "Object") {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  if (J.getInterceptor$s($name).codeUnitAt$1($name, 0) === 36)
    $name = C.JSString_methods.substring$1($name, 1);
  return $name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null);
},

Primitives_objectToString: function(object) {
  return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
},

Primitives_newFixedList: function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
},

Primitives__fromCharCodeApply: function(array) {
  var end, t1, result, i, subarray, t2;
  end = array.length;
  for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result += String.fromCharCode.apply(null, subarray);
  }
  return result;
},

Primitives_stringFromCodePoints: function(codePoints) {
  var a, t1, i;
  a = [];
  a.$builtinTypeInfo = [J.JSInt];
  for (t1 = new H.ListIterator(codePoints, codePoints.length, 0, null); t1.moveNext$0();) {
    i = t1._current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw H.wrapException(P.ArgumentError$(i));
    if (i <= 65535)
      a.push(i);
    else if (i <= 1114111) {
      a.push(55296 + (C.JSInt_methods.$shr(i - 65536, 10) & 1023));
      a.push(56320 + (i & 1023));
    } else
      throw H.wrapException(P.ArgumentError$(i));
  }
  return H.Primitives__fromCharCodeApply(a);
},

Primitives_stringFromCharCodes: function(charCodes) {
  var t1, i;
  for (t1 = new H.ListIterator(charCodes, charCodes.length, 0, null); t1.moveNext$0();) {
    i = t1._current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw H.wrapException(P.ArgumentError$(i));
    if (i < 0)
      throw H.wrapException(P.ArgumentError$(i));
    if (i > 65535)
      return H.Primitives_stringFromCodePoints(charCodes);
  }
  return H.Primitives__fromCharCodeApply(charCodes);
},

Primitives_lazyAsJsDate: function(receiver) {
  if (receiver.date === void 0)
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
},

Primitives_getYear: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
},

Primitives_getMonth: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
},

Primitives_getDay: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(receiver).getDate() + 0;
},

Primitives_getHours: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(receiver).getHours() + 0;
},

Primitives_getMinutes: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
},

Primitives_getSeconds: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
},

Primitives_getMilliseconds: function(receiver) {
  return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
},

Primitives_getProperty: function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw H.wrapException(new P.ArgumentError(object));
  return object[key];
},

Primitives_setProperty: function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw H.wrapException(new P.ArgumentError(object));
  object[key] = value;
},

iae: function(argument) {
  throw H.wrapException(P.ArgumentError$(argument));
},

ioore: function(receiver, index) {
  if (receiver == null)
    J.get$length$asx(receiver);
  if (typeof index !== "number" || Math.floor(index) !== index)
    H.iae(index);
  throw H.wrapException(P.RangeError$value(index));
},

wrapException: function(ex) {
  var wrapper;
  if (ex == null)
    ex = new P.NullThrownError();
  wrapper = new Error();
  wrapper.dartException = ex;
  if ("defineProperty" in Object) {
    Object.defineProperty(wrapper, "message", { get: H.toStringWrapper$closure.call$0 });
    wrapper.name = "";
  } else
    wrapper.toString = H.toStringWrapper$closure.call$0;
  return wrapper;
},

toStringWrapper: function() {
  return J.toString$0(this.dartException);
},

throwExpression: function(ex) {
  throw H.wrapException(ex);
},

unwrapException: function(ex) {
  var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
  t1 = new H.unwrapException_saveStackTrace(ex);
  if (ex == null)
    return;
  if (typeof ex !== "object")
    return ex;
  if ("dartException" in ex)
    return t1.call$1(ex.dartException);
  else if (!("message" in ex))
    return ex;
  message = ex.message;
  if ("number" in ex && typeof ex.number == "number") {
    number = ex.number;
    ieErrorCode = number & 65535;
    if ((C.JSInt_methods.$shr(number, 16) & 8191) === 10)
      switch (ieErrorCode) {
        case 438:
          return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
        case 445:
        case 5007:
          t2 = H.S(message) + " (Error " + ieErrorCode + ")";
          return t1.call$1(new H.NullError(t2, null));
        default:
      }
  }
  if (ex instanceof TypeError) {
    t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
    t3 = $.get$TypeErrorDecoder_notClosurePattern();
    t4 = $.get$TypeErrorDecoder_nullCallPattern();
    nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
    t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
    t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
    t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
    $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
    t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
    t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
    match = t2.matchTypeError$1(message);
    if (match != null)
      return t1.call$1(H.JsNoSuchMethodError$(message, match));
    else {
      match = t3.matchTypeError$1(message);
      if (match != null) {
        match.method = "call";
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      } else {
        match = t4.matchTypeError$1(message);
        if (match == null) {
          match = nullLiteralCall.matchTypeError$1(message);
          if (match == null) {
            match = t5.matchTypeError$1(message);
            if (match == null) {
              match = t6.matchTypeError$1(message);
              if (match == null) {
                match = t7.matchTypeError$1(message);
                if (match == null) {
                  match = nullLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = t8.matchTypeError$1(message);
                    if (match == null) {
                      match = t9.matchTypeError$1(message);
                      t2 = match != null;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
        } else
          t2 = true;
        if (t2) {
          t2 = match == null ? null : match.method;
          return t1.call$1(new H.NullError(message, t2));
        }
      }
    }
    t2 = typeof message === "string" ? message : "";
    return t1.call$1(new H.UnknownJsTypeError(t2));
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return new P.StackOverflowError();
    return t1.call$1(new P.ArgumentError(null));
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return new P.StackOverflowError();
  return ex;
},

objectHashCode: function(object) {
  if (object == null || typeof object != 'object')
    return J.get$hashCode$(object);
  else
    return H.Primitives_objectHashCode(object);
},

fillLiteralMap: function(keyValuePairs, result) {
  var $length, index, index0, index1;
  $length = keyValuePairs.length;
  for (index = 0; index < $length; index = index1) {
    index0 = index + 1;
    index1 = index0 + 1;
    result.$indexSet(result, keyValuePairs[index], keyValuePairs[index0]);
  }
  return result;
},

invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
  var t1 = J.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0))
    return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
  else if (t1.$eq(numberOfArguments, 1))
    return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2))
    return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
  else if (t1.$eq(numberOfArguments, 3))
    return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
  else if (t1.$eq(numberOfArguments, 4))
    return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
  else
    throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
},

convertDartClosureToJS: function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function(closure, arity, context, invoke) {  return function(a1, a2, a3, a4) {     return invoke(closure, context, arity, a1, a2, a3, a4);  };})(closure,arity,$globalState.currentContext,H.invokeClosure$closure.call$7);
  closure.$identity = $function;
  return $function;
},

propertyTypeCastError: function(value, property) {
  var t1 = J.getInterceptor$asx(property);
  throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
},

interceptedTypeCast: function(value, property) {
  var t1;
  if (value != null)
    t1 = typeof value === "object" && J.getInterceptor(value)[property];
  else
    t1 = true;
  if (t1)
    return value;
  H.propertyTypeCastError(value, property);
},

listTypeCast: function(value) {
  var t1 = J.getInterceptor(value);
  if (typeof value === "object" && value !== null && (value.constructor === Array || !!t1.$isList) || value == null)
    return value;
  throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), "List"));
},

throwCyclicInit: function(staticName) {
  throw H.wrapException(P.CyclicInitializationError$("Cyclic initialization for static " + H.S(staticName)));
},

createRuntimeType: function($name) {
  return new H.TypeImpl($name, null);
},

setRuntimeTypeInfo: function(target, typeInfo) {
  if (target != null)
    target.$builtinTypeInfo = typeInfo;
  return target;
},

getRuntimeTypeInfo: function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
},

getRuntimeTypeArguments: function(target, substitutionName) {
  return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
},

getRuntimeTypeArgument: function(target, substitutionName, index) {
  var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
  return $arguments == null ? null : $arguments[index];
},

getRuntimeTypeAsString: function(runtimeType, onTypeVariable) {
  return runtimeType[0].builtin$cls + H.joinArguments(runtimeType, 1, onTypeVariable);
},

runtimeTypeToString: function(type, onTypeVariable) {
  if (type == null)
    return "dynamic";
  else if (typeof type === "object" && type !== null && type.constructor === Array)
    return H.getRuntimeTypeAsString(type, onTypeVariable);
  else if (typeof type == "function")
    return type.builtin$cls;
  else if (typeof type === "number" && Math.floor(type) === type)
    return C.JSInt_methods.toString$0(type);
  else
    return;
},

joinArguments: function(types, startIndex, onTypeVariable) {
  var buffer, index, firstArgument, allDynamic, argument, str;
  if (types == null)
    return "";
  buffer = P.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    str = H.runtimeTypeToString(argument, onTypeVariable);
    str = typeof str === "string" ? str : H.S(str);
    buffer._contents = buffer._contents + str;
  }
  return allDynamic ? "" : "<" + H.S(buffer) + ">";
},

substitute: function(substitution, $arguments) {
  if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
    $arguments = substitution;
  else if (typeof substitution == "function") {
    substitution = H.invokeOn(substitution, null, $arguments);
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function")
      $arguments = H.invokeOn(substitution, null, $arguments);
  }
  return $arguments;
},

checkSubtype: function(object, isField, checks, asField) {
  var $arguments, interceptor;
  if (object == null)
    return false;
  $arguments = H.getRuntimeTypeInfo(object);
  interceptor = J.getInterceptor(object);
  if (interceptor[isField] == null)
    return false;
  return H.areSubtypes(H.substitute(interceptor[asField], $arguments), checks);
},

computeTypeName: function(isField, $arguments) {
  var t1 = J.getInterceptor$asx(isField);
  return t1.substring$2(isField, 3, t1.get$length(isField)) + H.joinArguments($arguments, 0, null);
},

subtypeCast: function(object, isField, checks, asField) {
  if (object != null && !H.checkSubtype(object, isField, checks, asField))
    throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(object), H.computeTypeName(isField, checks)));
  return object;
},

areSubtypes: function(s, t) {
  var len, i;
  if (s == null || t == null)
    return true;
  len = s.length;
  for (i = 0; i < len; ++i)
    if (!H.isSubtype(s[i], t[i]))
      return false;
  return true;
},

computeSignature: function(signature, context, contextName) {
  return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
},

isSubtype: function(s, t) {
  var targetSignatureFunction, t1, typeOfS, t2, typeOfT, substitution;
  if (s === t)
    return true;
  if (s == null || t == null)
    return true;
  if ("func" in t) {
    if (!("func" in s)) {
      if ("$is_" + H.S(t.func) in s)
        return true;
      targetSignatureFunction = s.$signature;
      if (targetSignatureFunction == null)
        return false;
      s = targetSignatureFunction.apply(s, null);
    }
    return H.isFunctionSubtype(s, t);
  }
  if (t.builtin$cls === "Function" && "func" in s)
    return true;
  t1 = typeof s === "object" && s !== null && s.constructor === Array;
  typeOfS = t1 ? s[0] : s;
  t2 = typeof t === "object" && t !== null && t.constructor === Array;
  typeOfT = t2 ? t[0] : t;
  if (!("$is" + H.S(H.runtimeTypeToString(typeOfT, null)) in typeOfS))
    return false;
  substitution = typeOfT !== typeOfS ? typeOfS["$as" + H.S(H.runtimeTypeToString(typeOfT, null))] : null;
  if (!t1 && substitution == null || !t2)
    return true;
  t1 = t1 ? s.slice(1) : null;
  t2 = t2 ? t.slice(1) : null;
  return H.areSubtypes(H.substitute(substitution, t1), t2);
},

isAssignable: function(s, t) {
  return H.isSubtype(s, t) || H.isSubtype(t, s);
},

areAssignable: function(s, t, allowShorter) {
  var sLength, tLength, i, t1, t2;
  if (t == null && s == null)
    return true;
  if (t == null)
    return allowShorter;
  if (s == null)
    return false;
  sLength = s.length;
  tLength = t.length;
  if (allowShorter) {
    if (sLength < tLength)
      return false;
  } else if (sLength !== tLength)
    return false;
  for (i = 0; i < tLength; ++i) {
    t1 = s[i];
    t2 = t[i];
    if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
      return false;
  }
  return true;
},

areAssignableMaps: function(s, t) {
  if (t == null)
    return true;
  if (s == null)
    return false;
  return      function (t, s, isAssignable) {
       for (var $name in t) {
         if (!s.hasOwnProperty($name)) {
           return false;
         }
         var tType = t[$name];
         var sType = s[$name];
         if (!isAssignable.call$2(sType, tType)) {
          return false;
         }
       }
       return true;
     }(t, s, H.isAssignable$closure)
  ;
},

isFunctionSubtype: function(s, t) {
  var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
  if (!("func" in s))
    return false;
  if ("void" in s) {
    if (!("void" in t) && "ret" in t)
      return false;
  } else if (!("void" in t)) {
    sReturnType = s.ret;
    tReturnType = t.ret;
    if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
      return false;
  }
  sParameterTypes = s.args;
  tParameterTypes = t.args;
  sOptionalParameterTypes = s.opt;
  tOptionalParameterTypes = t.opt;
  sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
  tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
  sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
  tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
  if (sParametersLen > tParametersLen)
    return false;
  if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
    return false;
  if (sParametersLen === tParametersLen) {
    if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
      return false;
    if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
      return false;
  } else {
    for (pos = 0; pos < sParametersLen; ++pos) {
      t1 = sParameterTypes[pos];
      t2 = tParameterTypes[pos];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
      t1 = sOptionalParameterTypes[sPos];
      t2 = tParameterTypes[tPos];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    for (sPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
      t1 = tOptionalParameterTypes[sPos];
      t2 = tOptionalParameterTypes[tPos];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
  }
  return H.areAssignableMaps(s.named, t.named);
},

invokeOn: function($function, receiver, $arguments) {
  return $function.apply(receiver, $arguments);
},

toStringForNativeObject: function(obj) {
  var t1 = $.getTagFunction;
  return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
},

hashCodeForNativeObject: function(object) {
  return H.Primitives_objectHashCode(object);
},

defineProperty: function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
},

lookupAndCacheInterceptor: function(obj) {
  var tag, record, interceptor, interceptorClass, mark, t1;
  tag = $.getTagFunction.call$1(obj);
  record = $.dispatchRecordsForInstanceTags[tag];
  if (record != null) {
    Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return record.i;
  }
  interceptor = $.interceptorsForUncacheableTags[tag];
  if (interceptor != null)
    return interceptor;
  interceptorClass = init.interceptorsByTag[tag];
  if (interceptorClass == null) {
    tag = $.alternateTagFunction.call$2(obj, tag);
    if (tag != null) {
      record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
    }
  }
  if (interceptorClass == null)
    return;
  interceptor = interceptorClass.prototype;
  mark = tag[0];
  if (mark === "!") {
    record = H.makeLeafDispatchRecord(interceptor);
    $.dispatchRecordsForInstanceTags[tag] = record;
    Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return record.i;
  }
  if (mark === "~") {
    $.interceptorsForUncacheableTags[tag] = interceptor;
    return interceptor;
  }
  if (mark === "-") {
    t1 = H.makeLeafDispatchRecord(interceptor);
    Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
    return t1.i;
  }
  if (mark === "+")
    return H.patchInteriorProto(obj, interceptor);
  if (mark === "*")
    throw H.wrapException(P.UnimplementedError$(tag));
  if (init.leafTags[tag] === true) {
    t1 = H.makeLeafDispatchRecord(interceptor);
    Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
    return t1.i;
  } else
    return H.patchInteriorProto(obj, interceptor);
},

patchInteriorProto: function(obj, interceptor) {
  var proto, record;
  proto = Object.getPrototypeOf(obj);
  record = J.makeDispatchRecord(interceptor, proto, null, null);
  Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
  return interceptor;
},

makeLeafDispatchRecord: function(interceptor) {
  return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
},

makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
  var interceptor = interceptorClass.prototype;
  if (init.leafTags[tag] === true)
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  else
    return J.makeDispatchRecord(interceptor, proto, null, null);
},

initNativeDispatch: function() {
  if (true === $.initNativeDispatchFlag)
    return;
  $.initNativeDispatchFlag = true;
  H.initNativeDispatchContinue();
},

initNativeDispatchContinue: function() {
  var map, tags, i, tag, proto, record, interceptorClass;
  $.dispatchRecordsForInstanceTags = Object.create(null);
  $.interceptorsForUncacheableTags = Object.create(null);
  H.initHooks();
  map = init.interceptorsByTag;
  tags = Object.getOwnPropertyNames(map);
  if (typeof window != "undefined") {
    window;
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      proto = $.prototypeForTagFunction.call$1(tag);
      if (proto != null) {
        record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
        if (record != null)
          Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      }
    }
  }
  for (i = 0; i < tags.length; ++i) {
    tag = tags[i];
    if (/^[A-Za-z_]/.test(tag)) {
      interceptorClass = map[tag];
      map["!" + tag] = interceptorClass;
      map["~" + tag] = interceptorClass;
      map["-" + tag] = interceptorClass;
      map["+" + tag] = interceptorClass;
      map["*" + tag] = interceptorClass;
    }
  }
},

initHooks: function() {
  var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
  hooks = C.JS_CONST_TtD();
  hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_rD3, H.applyHooksTransformer(C.JS_CONST_6qb, H.applyHooksTransformer(C.JS_CONST_Cbr(C.JS_CONST_86y), hooks))))));
  if (typeof dartNativeDispatchHooksTransformer != "undefined") {
    transformers = dartNativeDispatchHooksTransformer;
    if (typeof transformers == "function")
      transformers = [transformers];
    if (transformers.constructor == Array)
      for (i = 0; i < transformers.length; ++i) {
        transformer = transformers[i];
        if (typeof transformer == "function")
          hooks = transformer(hooks) || hooks;
      }
  }
  getTag = hooks.getTag;
  getUnknownTag = hooks.getUnknownTag;
  prototypeForTag = hooks.prototypeForTag;
  $.getTagFunction = new H.initHooks_closure(getTag);
  $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
  $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
},

applyHooksTransformer: function(transformer, hooks) {
  return transformer(hooks) || hooks;
},

TypeErrorDecoder: {"": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
  matchTypeError$1: function(message) {
    var match, result, t1;
    match = new RegExp(this._pattern).exec(message);
    if (match == null)
      return;
    result = {};
    t1 = this._arguments;
    if (t1 !== -1)
      result.arguments = match[t1 + 1];
    t1 = this._argumentsExpr;
    if (t1 !== -1)
      result.argumentsExpr = match[t1 + 1];
    t1 = this._expr;
    if (t1 !== -1)
      result.expr = match[t1 + 1];
    t1 = this._method;
    if (t1 !== -1)
      result.method = match[t1 + 1];
    t1 = this._receiver;
    if (t1 !== -1)
      result.receiver = match[t1 + 1];
    return result;
  },
  static: {
"": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern",
TypeErrorDecoder_extractPattern: function(message) {
  var match, $arguments, argumentsExpr, expr, method, receiver;
  message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
  match = message.match(/\\\$[a-zA-Z]+\\\$/g);
  if (match == null)
    match = [];
  $arguments = match.indexOf("\\$arguments\\$");
  argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
  expr = match.indexOf("\\$expr\\$");
  method = match.indexOf("\\$method\\$");
  receiver = match.indexOf("\\$receiver\\$");
  return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
},

TypeErrorDecoder_provokeCallErrorOn: function(expression) {
  return function($expr$) {
  var $argumentsExpr$ = '$arguments$'
  try {
    $expr$.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokeCallErrorOnNull: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    null.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokeCallErrorOnUndefined: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    (void 0).$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
  return function($expr$) {
  try {
    $expr$.$method$;
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokePropertyErrorOnNull: function() {
  return function() {
  try {
    null.$method$;
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOnUndefined: function() {
  return function() {
  try {
    (void 0).$method$;
  } catch (e) {
    return e.message;
  }
}();
}}

},

NullError: {"": "Error;_message,_method",
  toString$0: function(_) {
    var t1 = this._method;
    if (t1 == null)
      return "NullError: " + H.S(this._message);
    return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
  },
  $isError: true
},

JsNoSuchMethodError: {"": "Error;_message,_method,_receiver",
  toString$0: function(_) {
    var t1, t2;
    t1 = this._method;
    if (t1 == null)
      return "NoSuchMethodError: " + H.S(this._message);
    t2 = this._receiver;
    if (t2 == null)
      return "NoSuchMethodError: Cannot call \"" + t1 + "\" (" + H.S(this._message) + ")";
    return "NoSuchMethodError: Cannot call \"" + t1 + "\" on \"" + t2 + "\" (" + H.S(this._message) + ")";
  },
  $isError: true,
  static: {
JsNoSuchMethodError$: function(_message, match) {
  var t1, t2;
  t1 = match == null;
  t2 = t1 ? null : match.method;
  t1 = t1 ? null : match.receiver;
  return new H.JsNoSuchMethodError(_message, t2, t1);
}}

},

UnknownJsTypeError: {"": "Error;_message",
  toString$0: function(_) {
    var t1 = this._message;
    return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
  }
},

unwrapException_saveStackTrace: {"": "Closure;ex_0",
  call$1: function(error) {
    var t1 = J.getInterceptor(error);
    if (typeof error === "object" && error !== null && !!t1.$isError)
      if (error.$thrownJsError == null)
        error.$thrownJsError = this.ex_0;
    return error;
  },
  $is_args1: true
},

_StackTrace: {"": "Object;_exception,_trace",
  toString$0: function(_) {
    var t1, trace;
    t1 = this._trace;
    if (t1 != null)
      return t1;
    t1 = this._exception;
    trace = typeof t1 === "object" ? t1.stack : null;
    t1 = trace == null ? "" : trace;
    this._trace = t1;
    return t1;
  }
},

invokeClosure_closure: {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  }
},

invokeClosure_closure0: {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
},

invokeClosure_closure1: {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
},

invokeClosure_closure2: {"": "Closure;closure_6,arg1_7,arg2_8,arg3_9",
  call$0: function() {
    return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
  }
},

invokeClosure_closure3: {"": "Closure;closure_10,arg1_11,arg2_12,arg3_13,arg4_14",
  call$0: function() {
    return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
  }
},

Closure: {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  }
},

BoundClosure: {"": "Closure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      return true;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isBoundClosure)
      return false;
    return this._self === other._self && this.__js_helper$_target === other.__js_helper$_target && this._receiver === other._receiver;
  },
  get$hashCode: function(_) {
    var t1, receiverHashCode;
    t1 = this._receiver;
    if (t1 == null)
      receiverHashCode = H.Primitives_objectHashCode(this._self);
    else
      receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
    return (receiverHashCode ^ H.Primitives_objectHashCode(this.__js_helper$_target)) >>> 0;
  },
  $isBoundClosure: true
},

CastErrorImplementation: {"": "Error;message",
  toString$0: function(_) {
    return this.message;
  },
  $isError: true,
  static: {
CastErrorImplementation$: function(actualType, expectedType) {
  return new H.CastErrorImplementation("CastError: Casting value of type " + actualType + " to incompatible type " + H.S(expectedType));
}}

},

TypeImpl: {"": "Object;_typeName,_unmangledName",
  toString$0: function(_) {
    var t1, unmangledName, unmangledName0;
    t1 = this._unmangledName;
    if (t1 != null)
      return t1;
    unmangledName = this._typeName;
    unmangledName0 = H.unmangleGlobalNameIfPreservedAnyways(unmangledName);
    unmangledName = unmangledName0 == null ? unmangledName : unmangledName0;
    this._unmangledName = unmangledName;
    return unmangledName;
  },
  get$hashCode: function(_) {
    return J.get$hashCode$(this._typeName);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$isTypeImpl && J.$eq(this._typeName, other._typeName);
  },
  $isTypeImpl: true
},

initHooks_closure: {"": "Closure;getTag_0",
  call$1: function(o) {
    return this.getTag_0(o);
  },
  $is_args1: true
},

initHooks_closure0: {"": "Closure;getUnknownTag_1",
  call$2: function(o, tag) {
    return this.getUnknownTag_1(o, tag);
  },
  $is_args2: true
},

initHooks_closure1: {"": "Closure;prototypeForTag_2",
  call$1: function(tag) {
    return this.prototypeForTag_2(tag);
  },
  $is_args1: true
},

StringMatch: {"": "Object;start,input,pattern",
  $index: function(_, g) {
    if (!J.$eq(g, 0))
      H.throwExpression(P.RangeError$value(g));
    return this.pattern;
  }
}}],
["dart._collection.dev", "dart:_collection-dev", , H, {
Arrays_copy: function(src, srcStart, dst, dstStart, count) {
  var i, j, t1;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j) {
      if (i < 0 || i >= src.length)
        throw H.ioore(src, i);
      C.JSArray_methods.$indexSet(dst, j, src[i]);
    }
  else
    for (t1 = srcStart + count, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
      if (i < 0 || i >= src.length)
        throw H.ioore(src, i);
      C.JSArray_methods.$indexSet(dst, j, src[i]);
    }
},

Arrays_indexOf: function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw H.ioore(a, i);
    if (J.$eq(a[i], element))
      return i;
  }
  return -1;
},

IterableMixinWorkaround_forEach: function(iterable, f) {
  var t1;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
    f.call$1(t1._current);
},

IterableMixinWorkaround_any: function(iterable, f) {
  var t1;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
    if (f.call$1(t1._current) === true)
      return true;
  return false;
},

IterableMixinWorkaround_fold: function(iterable, initialValue, combine) {
  var t1;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
    initialValue = combine.call$2(initialValue, t1._current);
  return initialValue;
},

IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
  var result, i, t1;
  for (i = 0; i < $.get$IterableMixinWorkaround__toStringList().length; ++i) {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (i >= t1.length)
      throw H.ioore(t1, i);
    if (t1[i] === iterable)
      return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
  }
  result = P.StringBuffer$("");
  try {
    $.get$IterableMixinWorkaround__toStringList().push(iterable);
    J.write$1$x(result, leftDelimiter);
    result.writeAll$2(iterable, ", ");
    J.write$1$x(result, rightDelimiter);
  } finally {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1.pop();
  }
  return result.get$_contents();
},

IterableMixinWorkaround_sortList: function(list, compare) {
  H.Sort__doSort(list, 0, list.length - 1, compare);
},

IterableMixinWorkaround__rangeCheck: function(list, start, end) {
  if (start < 0 || start > list.length)
    throw H.wrapException(P.RangeError$range(start, 0, list.length));
  if (end < start || end > list.length)
    throw H.wrapException(P.RangeError$range(end, start, list.length));
},

IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
  var $length;
  H.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = end - start;
  if ($length === 0)
    return;
  if (skipCount < 0)
    throw H.wrapException(new P.ArgumentError(skipCount));
  if (skipCount + $length > from.length)
    throw H.wrapException(P.StateError$("Not enough elements"));
  H.Arrays_copy(from, skipCount, list, start, $length);
},

printToConsole: function(line) {
  if (typeof dartPrint == "function") {
    dartPrint(line);
    return;
  }
  if (typeof console == "object" && typeof console.log == "function") {
    console.log(line);
    return;
  }
  if (typeof window == "object")
    return;
  if (typeof print == "function") {
    print(line);
    return;
  }
  throw "Unable to print message: " + String(line);
},

Sort__doSort: function(a, left, right, compare) {
  if (right - left <= 32)
    H.Sort__insertionSort(a, left, right, compare);
  else
    H.Sort__dualPivotQuicksort(a, left, right, compare);
},

Sort__insertionSort: function(a, left, right, compare) {
  var i, t1, el, j, j0;
  for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
    el = t1.$index(a, i);
    j = i;
    while (true) {
      if (!(j > left && J.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
        break;
      j0 = j - 1;
      t1.$indexSet(a, j, t1.$index(a, j0));
      j = j0;
    }
    t1.$indexSet(a, j, el);
  }
},

Sort__dualPivotQuicksort: function(a, left, right, compare) {
  var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t2, great0, less0, pivots_are_equal;
  sixth = C.JSInt_methods.$tdiv(right - left + 1, 6);
  index1 = left + sixth;
  index5 = right - sixth;
  index3 = C.JSInt_methods.$tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  t1 = J.getInterceptor$asx(a);
  el1 = t1.$index(a, index1);
  el2 = t1.$index(a, index2);
  el3 = t1.$index(a, index3);
  el4 = t1.$index(a, index4);
  el5 = t1.$index(a, index5);
  if (J.$gt$n(compare.call$2(el1, el2), 0)) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if (J.$gt$n(compare.call$2(el1, el3), 0)) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el1, el4), 0)) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el3, el4), 0)) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el5), 0)) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1.$indexSet(a, index1, el1);
  t1.$indexSet(a, index3, el3);
  t1.$indexSet(a, index5, el5);
  t1.$indexSet(a, index2, t1.$index(a, left));
  t1.$indexSet(a, index4, t1.$index(a, right));
  less = left + 1;
  great = right - 1;
  if (J.$eq(compare.call$2(el2, el4), 0)) {
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      comp = compare.call$2(ak, el2);
      t2 = J.getInterceptor(comp);
      if (t2.$eq(comp, 0))
        continue;
      if (t2.$lt(comp, 0)) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else
        for (; true;) {
          comp = compare.call$2(t1.$index(a, great), el2);
          t2 = J.getInterceptor$n(comp);
          if (t2.$gt(comp, 0)) {
            --great;
            continue;
          } else {
            great0 = great - 1;
            if (t2.$lt(comp, 0)) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
              break;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              break;
            }
          }
        }
    }
    pivots_are_equal = true;
  } else {
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      if (J.$lt$n(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else if (J.$gt$n(compare.call$2(ak, el4), 0))
        for (; true;)
          if (J.$gt$n(compare.call$2(t1.$index(a, great), el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            great0 = great - 1;
            if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
    }
    pivots_are_equal = false;
  }
  t2 = less - 1;
  t1.$indexSet(a, left, t1.$index(a, t2));
  t1.$indexSet(a, t2, el2);
  t2 = great + 1;
  t1.$indexSet(a, right, t1.$index(a, t2));
  t1.$indexSet(a, t2, el4);
  H.Sort__doSort(a, left, less - 2, compare);
  H.Sort__doSort(a, great + 2, right, compare);
  if (pivots_are_equal)
    return;
  if (less < index1 && great > index5) {
    for (; J.$eq(compare.call$2(t1.$index(a, less), el2), 0);)
      ++less;
    for (; J.$eq(compare.call$2(t1.$index(a, great), el4), 0);)
      --great;
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      if (J.$eq(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else if (J.$eq(compare.call$2(ak, el4), 0))
        for (; true;)
          if (J.$eq(compare.call$2(t1.$index(a, great), el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            great0 = great - 1;
            if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
    }
    H.Sort__doSort(a, less, great, compare);
  } else
    H.Sort__doSort(a, less, great, compare);
},

Symbol_getName: function(symbol) {
  return symbol.get$_name();
},

ListIterable: {"": "IterableBase;",
  get$iterator: function(_) {
    return new H.ListIterator(this, this.get$length(this), 0, null);
  },
  forEach$1: function(_, action) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      throw H.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      action.call$1(this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw H.wrapException(P.ConcurrentModificationError$(this));
    }
  },
  map$1: function(_, f) {
    var t1 = new H.MappedListIterable(this, f);
    H.setRuntimeTypeInfo(t1, [null, null]);
    return t1;
  },
  get$map: function(_receiver) {
    return new J.BoundClosure$i10(this, H.ListIterable.prototype.map$1, _receiver, "map$1");
  },
  toList$1$growable: function(_, growable) {
    var result, i, t1;
    if (growable) {
      result = P.List_List(null, H.getRuntimeTypeArgument(this, "ListIterable", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
      C.JSArray_methods.set$length(result, this.get$length(this));
    } else {
      result = P.List_List(this.get$length(this), H.getRuntimeTypeArgument(this, "ListIterable", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
    }
    i = 0;
    while (true) {
      t1 = this.get$length(this);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      if (!(i < t1))
        break;
      t1 = this.elementAt$1(this, i);
      if (i >= result.length)
        throw H.ioore(result, i);
      result[i] = t1;
      ++i;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

ListIterator: {"": "Object;_iterable,_length,_index,_current",
  get$current: function() {
    return this._current;
  },
  moveNext$0: function() {
    var t1, t2, $length, t3;
    t1 = this._iterable;
    t2 = J.getInterceptor$asx(t1);
    $length = t2.get$length(t1);
    t3 = this._length;
    if (t3 == null ? $length != null : t3 !== $length)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    t3 = this._index;
    if (typeof $length !== "number")
      throw H.iae($length);
    if (t3 >= $length) {
      this._current = null;
      return false;
    }
    this._current = t2.elementAt$1(t1, t3);
    this._index = this._index + 1;
    return true;
  }
},

MappedIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    var t1 = this._iterable;
    t1 = t1.get$iterator(t1);
    t1 = new H.MappedIterator(null, t1, this._f);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "MappedIterable", 0), H.getRuntimeTypeArgument(this, "MappedIterable", 1)]);
    return t1;
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  $asIterableBase: function($S, $T) {
    return [$T];
  },
  static: {
MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
  var t1;
  if (!!iterable.$isEfficientLength) {
    t1 = new H.EfficientLengthMappedIterable(iterable, $function);
    H.setRuntimeTypeInfo(t1, [$S, $T]);
    return t1;
  }
  t1 = new H.MappedIterable(iterable, $function);
  H.setRuntimeTypeInfo(t1, [$S, $T]);
  return t1;
}}

},

EfficientLengthMappedIterable: {"": "MappedIterable;_iterable,_f", $asMappedIterable: null, $isEfficientLength: true},

MappedIterator: {"": "Iterator;_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0()) {
      this._current = this._f$1(t1.get$current());
      return true;
    }
    this._current = null;
    return false;
  },
  get$current: function() {
    return this._current;
  },
  $asIterator: function($S, $T) {
    return [$T];
  }
},

MappedListIterable: {"": "ListIterable;_source,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$length: function(_) {
    return J.get$length$asx(this._source);
  },
  elementAt$1: function(_, index) {
    return this._f$1(J.elementAt$1$ax(this._source, index));
  },
  $asListIterable: function($S, $T) {
    return [$T];
  },
  $isEfficientLength: true
},

FixedLengthListMixin: {"": "Object;",
  set$length: function(receiver, newLength) {
    throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
  },
  add$1: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
  },
  remove$1: function(receiver, element) {
    throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
  },
  removeAt$1: function(receiver, index) {
    throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
  }
}}],
["dart._js_names", "dart:_js_names", , H, {
unmangleGlobalNameIfPreservedAnyways: function($name) {
  return init.mangledGlobalNames[$name];
}}],
["dart.async", "dart:async", , P, {
_invokeErrorHandler: function(errorHandler, error, stackTrace) {
  var t1 = J.getInterceptor(errorHandler);
  if (!!t1.$is_args2)
    return errorHandler.call$2(error, stackTrace);
  else
    return errorHandler.call$1(error);
},

_registerErrorHandler: function(errorHandler, zone) {
  var t1 = J.getInterceptor(errorHandler);
  zone.toString;
  if (!!t1.$is_args2)
    return errorHandler;
  else
    return errorHandler;
},

Future_wait: function(futures) {
  var t1, t2, t3, future, pos, t4, t5, result, completer;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new P.Future_wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = new H.ListIterator(futures, futures.length, 0, null); t3.moveNext$0();) {
    future = t3._current;
    pos = t1.remaining_2;
    t1.remaining_2 = pos + 1;
    t4 = future.catchError$1(t2);
    t5 = $.Zone__current;
    t5.toString;
    result = new P._Future(0, t5, null, null, new P.Future_wait_closure(t1, pos), null, P._registerErrorHandler(null, t5), null);
    result.$builtinTypeInfo = [null];
    t4._addListener$1(result);
  }
  t2 = t1.remaining_2;
  if (t2 === 0)
    return P._Future$immediate(C.List_empty, null);
  t1.values_1 = P.List_List(t2, null);
  t2 = J.JSArray;
  completer = new P._AsyncCompleter(P._Future$(t2));
  H.setRuntimeTypeInfo(completer, [t2]);
  t1.completer_0 = completer;
  return t1.completer_0.future;
},

_asyncRunCallback: function() {
  var callback, t1, exception, milliseconds;
  for (; t1 = $.get$_asyncCallbacks(), t1._head !== t1._tail;) {
    callback = $.get$_asyncCallbacks().removeFirst$0();
    try {
      callback.call$0();
    } catch (exception) {
      H.unwrapException(exception);
      milliseconds = C.JSNumber_methods.$tdiv(C.Duration_0._duration, 1000);
      H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, P._asyncRunCallback$closure);
      throw exception;
    }

  }
  $._callbacksAreEnqueued = false;
},

_scheduleAsyncCallback: function(callback) {
  var t1 = $.get$_asyncCallbacks();
  t1._add$1(t1, callback);
  if (!$._callbacksAreEnqueued) {
    P._createTimer(C.Duration_0, P._asyncRunCallback$closure);
    $._callbacksAreEnqueued = true;
  }
},

scheduleMicrotask: function(callback) {
  var t1 = $.Zone__current;
  if (t1 === C.C__RootZone) {
    t1.toString;
    P._scheduleAsyncCallback(callback);
    return;
  }
  P._scheduleAsyncCallback(t1.bindCallback$2$runGuarded(callback, true));
},

StreamController_StreamController: function(onCancel, onListen, onPause, onResume, sync, $T) {
  var t1;
  if (sync) {
    t1 = new P._SyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null);
    H.setRuntimeTypeInfo(t1, [$T]);
  } else {
    t1 = new P._AsyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null);
    H.setRuntimeTypeInfo(t1, [$T]);
  }
  return t1;
},

_runGuarded: function(notificationHandler) {
  var result, e, s, t1, t2, exception;
  if (notificationHandler == null)
    return;
  try {
    result = notificationHandler.call$0();
    t1 = result;
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && !!t2.$isFuture)
      return result;
    return;
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    s = new H._StackTrace(exception, null);
    t1 = $.Zone__current;
    t1.toString;
    P._rootHandleUncaughtError(t1, null, t1, e, s);
  }

},

_nullDataHandler: function(value) {
},

_nullErrorHandler: function(error, stackTrace) {
  var t1 = $.Zone__current;
  t1.toString;
  P._rootHandleUncaughtError(t1, null, t1, error, stackTrace);
},

_nullDoneHandler: function() {
},

_runUserCode: function(userCode, onSuccess, onError) {
  var e, s, exception, t1;
  try {
    onSuccess.call$1(userCode.call$0());
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    s = new H._StackTrace(exception, null);
    onError.call$2(e, s);
  }

},

_cancelAndError: function(subscription, future, error, stackTrace) {
  var cancelFuture, t1;
  cancelFuture = subscription.cancel$0(subscription);
  t1 = J.getInterceptor(cancelFuture);
  if (typeof cancelFuture === "object" && cancelFuture !== null && !!t1.$isFuture)
    cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
  else
    future._completeError$2(error, stackTrace);
},

_cancelAndErrorClosure: function(subscription, future) {
  return new P._cancelAndErrorClosure_closure(subscription, future);
},

Timer_Timer: function(duration, callback) {
  var t1 = $.Zone__current;
  if (t1 === C.C__RootZone) {
    t1.toString;
    return P._createTimer(duration, callback);
  }
  return P._createTimer(duration, t1.bindCallback$2$runGuarded(callback, true));
},

_createTimer: function(duration, callback) {
  var milliseconds = C.JSNumber_methods.$tdiv(duration._duration, 1000);
  return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
},

_rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
  P._rootRun($self, null, $self, new P._rootHandleUncaughtError_closure(error, stackTrace));
},

_rootRun: function($self, $parent, zone, f) {
  var old, t1, t2;
  t1 = $.Zone__current;
  t2 = zone;
  if (t1 == null ? t2 == null : t1 === t2)
    return f.call$0();
  old = t1;
  try {
    $.Zone__current = zone;
    t1 = f.call$0();
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

_rootRunUnary: function($self, $parent, zone, f, arg) {
  var old, t1, t2;
  t1 = $.Zone__current;
  t2 = zone;
  if (t1 == null ? t2 == null : t1 === t2)
    return f.call$1(arg);
  old = t1;
  try {
    $.Zone__current = zone;
    t1 = f.call$1(arg);
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

_rootRunBinary: function($self, $parent, zone, f, arg1, arg2) {
  var old, t1, t2;
  t1 = $.Zone__current;
  t2 = zone;
  if (t1 == null ? t2 == null : t1 === t2)
    return f.call$2(arg1, arg2);
  old = t1;
  try {
    $.Zone__current = zone;
    t1 = f.call$2(arg1, arg2);
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

_AsyncError: {"": "Object;error>,stackTrace<", $isError: true},

Future: {"": "Object;", $isFuture: true},

Future_wait_handleError: {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1.completer_0.completeError$1(error);
    }
    return;
  },
  $is_args1: true
},

Future_wait_closure: {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    t3 = this.pos_1;
    if (t3 < 0 || t3 >= t2.length)
      throw H.ioore(t2, t3);
    t2[t3] = value;
    t1.remaining_2 = t1.remaining_2 - 1;
    if (t1.remaining_2 === 0) {
      t2 = t1.completer_0;
      t1 = t1.values_1;
      t2 = t2.future;
      if (t2._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t2._asyncComplete$1(t1);
    }
  },
  $is_args1: true
},

_Completer: {"": "Object;"},

_AsyncCompleter: {"": "_Completer;future",
  completeError$2: function(error, stackTrace) {
    var t1;
    if (error == null)
      throw H.wrapException(new P.ArgumentError("Error must not be null"));
    t1 = this.future;
    if (t1._state !== 0)
      throw H.wrapException(P.StateError$("Future already completed"));
    t1._asyncCompleteError$2(error, stackTrace);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  },
  $as_Completer: null
},

_SyncCompleter: {"": "_Completer;future",
  completeError$2: function(error, stackTrace) {
    var t1 = this.future;
    if (t1._state !== 0)
      throw H.wrapException(P.StateError$("Future already completed"));
    t1._completeError$2(error, stackTrace);
  },
  get$completeError: function() {
    return new P.BoundClosure$2(this, P._SyncCompleter.prototype.completeError$2, null, "completeError$2");
  },
  $as_Completer: null
},

_Future: {"": "Object;_state,_zone<,_resultOrListeners,_nextListener<,_onValueCallback,_errorTestCallback,_onErrorCallback,_whenCompleteActionCallback",
  get$_isComplete: function() {
    return this._state >= 4;
  },
  get$_hasError: function() {
    return this._state === 8;
  },
  set$_isChained: function(value) {
    if (value)
      this._state = 2;
    else
      this._state = 0;
  },
  get$_onValue: function() {
    return this._state === 2 ? null : this._onValueCallback;
  },
  _onValue$1: function(arg0) {
    return this.get$_onValue().call$1(arg0);
  },
  get$_whenCompleteAction: function() {
    return this._state === 2 ? null : this._whenCompleteActionCallback;
  },
  _whenCompleteAction$0: function() {
    return this.get$_whenCompleteAction().call$0();
  },
  then$2$onError: function(_, f, onError) {
    var result = P._Future$_then(f, onError, null);
    this._addListener$1(result);
    return result;
  },
  then$1: function($receiver, f) {
    return this.then$2$onError($receiver, f, null);
  },
  catchError$2$test: function(onError, test) {
    var result = P._Future$_catchError(onError, test, null);
    this._addListener$1(result);
    return result;
  },
  catchError$1: function(onError) {
    return this.catchError$2$test(onError, null);
  },
  whenComplete$1: function(action) {
    var result = P._Future$_whenComplete(action, H.getRuntimeTypeArgument(this, "_Future", 0));
    this._addListener$1(result);
    return result;
  },
  get$_async$_value: function() {
    return this._resultOrListeners;
  },
  get$_error: function() {
    return this._resultOrListeners;
  },
  _setValue$1: function(value) {
    this._state = 4;
    this._resultOrListeners = value;
  },
  _setError$2: function(error, stackTrace) {
    this._state = 8;
    this._resultOrListeners = new P._AsyncError(error, stackTrace);
  },
  _addListener$1: function(listener) {
    if (this._state >= 4) {
      this._zone.toString;
      P._scheduleAsyncCallback(new P._Future__addListener_closure(this, listener));
    } else {
      listener._nextListener = this._resultOrListeners;
      this._resultOrListeners = listener;
    }
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current._nextListener = prev;
    }
    return prev;
  },
  _complete$1: function(value) {
    var t1, listeners;
    t1 = J.getInterceptor(value);
    if (typeof value === "object" && value !== null && !!t1.$isFuture) {
      P._Future__chainFutures(value, this);
      return;
    }
    listeners = this._removeListeners$0();
    this._setValue$1(value);
    P._Future__propagateToListeners(this, listeners);
  },
  _completeError$2: function(error, stackTrace) {
    var listeners = this._removeListeners$0();
    this._setError$2(error, stackTrace);
    P._Future__propagateToListeners(this, listeners);
  },
  get$_completeError: function() {
    return new P.BoundClosure$2(this, P._Future.prototype._completeError$2, null, "_completeError$2");
  },
  _asyncComplete$1: function(value) {
    if (this._state !== 0)
      H.throwExpression(P.StateError$("Future already completed"));
    this._state = 1;
    this._zone.toString;
    P._scheduleAsyncCallback(new P._Future__asyncComplete_closure(this, value));
  },
  _asyncCompleteError$2: function(error, stackTrace) {
    if (this._state !== 0)
      H.throwExpression(P.StateError$("Future already completed"));
    this._state = 1;
    this._zone.toString;
    P._scheduleAsyncCallback(new P._Future__asyncCompleteError_closure(this, error, stackTrace));
  },
  _async$_Future$immediate$1: function(value, $T) {
    this._asyncComplete$1(value);
  },
  _async$_Future$immediateError$2: function(error, stackTrace, $T) {
    this._asyncCompleteError$2(error, stackTrace);
  },
  $is_Future: true,
  $isFuture: true,
  static: {
"": "_Future__INCOMPLETE,_Future__PENDING_COMPLETE,_Future__CHAINED,_Future__VALUE,_Future__ERROR",
_Future$: function($T) {
  var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future$immediate: function(value, $T) {
  var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._async$_Future$immediate$1(value, $T);
  return t1;
},

_Future$immediateError: function(error, stackTrace, $T) {
  var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._async$_Future$immediateError$2(error, stackTrace, $T);
  return t1;
},

_Future$_then: function(onValueCallback, onErrorCallback, $T) {
  var t1 = $.Zone__current;
  t1.toString;
  t1 = new P._Future(0, t1, null, null, onValueCallback, null, P._registerErrorHandler(onErrorCallback, t1), null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future$_catchError: function(onErrorCallback, errorTestCallback, $T) {
  var t1, t2;
  t1 = $.Zone__current;
  t2 = P._registerErrorHandler(onErrorCallback, t1);
  t1.toString;
  t2 = new P._Future(0, t1, null, null, null, errorTestCallback, t2, null);
  H.setRuntimeTypeInfo(t2, [$T]);
  return t2;
},

_Future$_whenComplete: function(whenCompleteActionCallback, $T) {
  var t1 = $.Zone__current;
  t1.toString;
  t1 = new P._Future(0, t1, null, null, null, null, null, whenCompleteActionCallback);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future__chainFutures: function(source, target) {
  var t1;
  target._state = 2;
  t1 = J.getInterceptor$x(source);
  if (typeof source === "object" && source !== null && !!t1.$is_Future)
    if (source._state >= 4)
      P._Future__propagateToListeners(source, target);
    else
      source._addListener$1(target);
  else
    t1.then$2$onError(source, new P._Future__chainFutures_closure(target), new P._Future__chainFutures_closure0(target));
},

_Future__propagateMultipleListeners: function(source, listeners) {
  var listeners0;
  do {
    listeners0 = listeners.get$_nextListener();
    listeners._nextListener = null;
    P._Future__propagateToListeners(source, listeners);
    if (listeners0 != null) {
      listeners = listeners0;
      continue;
    } else
      break;
  } while (true);
},

_Future__propagateToListeners: function(source, listeners) {
  var t1, t2, hasError, asyncError, t3, t4, t5, chainSource, listeners0;
  t1 = {};
  t1.source_4 = source;
  for (; true;) {
    t2 = {};
    if (!t1.source_4.get$_isComplete())
      return;
    hasError = t1.source_4.get$_hasError();
    if (hasError && listeners == null) {
      t2 = t1.source_4;
      asyncError = t2.get$_error();
      t2 = t2._zone;
      t3 = J.get$error$x(asyncError);
      t4 = asyncError.get$stackTrace();
      t2.toString;
      P._rootHandleUncaughtError(t2, null, t2, t3, t4);
      return;
    }
    if (listeners == null)
      return;
    if (listeners._nextListener != null) {
      P._Future__propagateMultipleListeners(t1.source_4, listeners);
      return;
    }
    if (hasError) {
      t3 = t1.source_4.get$_zone();
      t4 = listeners._zone;
      t3.toString;
      t4.toString;
      t3 = t4 == null ? t3 != null : t4 !== t3;
    } else
      t3 = false;
    if (t3) {
      t2 = t1.source_4;
      asyncError = t2.get$_error();
      t2 = t2._zone;
      t3 = J.get$error$x(asyncError);
      t4 = asyncError.get$stackTrace();
      t2.toString;
      P._rootHandleUncaughtError(t2, null, t2, t3, t4);
      return;
    }
    t3 = $.Zone__current;
    t4 = listeners._zone;
    if (t3 == null ? t4 != null : t3 !== t4) {
      t4.toString;
      P._rootRun(t4, null, t4, new P._Future__propagateToListeners_closure(t1, listeners));
      return;
    }
    t2.listenerHasValue_1 = null;
    t2.listenerValueOrError_2 = null;
    t2.isPropagationAborted_3 = false;
    t4.toString;
    P._rootRun(t4, null, t4, new P._Future__propagateToListeners_closure0(t1, t2, hasError, listeners));
    if (t2.isPropagationAborted_3)
      return;
    t3 = t2.listenerHasValue_1 === true;
    if (t3) {
      t4 = t2.listenerValueOrError_2;
      t5 = J.getInterceptor(t4);
      t5 = typeof t4 === "object" && t4 !== null && !!t5.$isFuture;
      t4 = t5;
    } else
      t4 = false;
    if (t4) {
      chainSource = t2.listenerValueOrError_2;
      t2 = J.getInterceptor(chainSource);
      if (typeof chainSource === "object" && chainSource !== null && !!t2.$is_Future && chainSource._state >= 4) {
        listeners._state = 2;
        t1.source_4 = chainSource;
        continue;
      }
      P._Future__chainFutures(chainSource, listeners);
      return;
    }
    if (t3) {
      listeners0 = listeners._removeListeners$0();
      t2 = t2.listenerValueOrError_2;
      listeners._state = 4;
      listeners._resultOrListeners = t2;
    } else {
      listeners0 = listeners._removeListeners$0();
      asyncError = t2.listenerValueOrError_2;
      t2 = J.get$error$x(asyncError);
      t3 = asyncError.get$stackTrace();
      listeners._state = 8;
      listeners._resultOrListeners = new P._AsyncError(t2, t3);
    }
    t1.source_4 = listeners;
    listeners = listeners0;
  }
}}

},

_Future__addListener_closure: {"": "Closure;this_0,listener_1",
  call$0: function() {
    P._Future__propagateToListeners(this.this_0, this.listener_1);
  }
},

_Future__chainFutures_closure: {"": "Closure;target_0",
  call$1: function(value) {
    this.target_0._complete$1(value);
  },
  $is_args1: true
},

_Future__chainFutures_closure0: {"": "Closure;target_1",
  call$2: function(error, stackTrace) {
    this.target_1._completeError$2(error, stackTrace);
  },
  call$1: function(error) {
    return this.call$2(error, null);
  },
  $is_args2: true,
  $is_args1: true
},

_Future__asyncComplete_closure: {"": "Closure;this_0,value_1",
  call$0: function() {
    this.this_0._complete$1(this.value_1);
  }
},

_Future__asyncCompleteError_closure: {"": "Closure;this_0,error_1,stackTrace_2",
  call$0: function() {
    this.this_0._completeError$2(this.error_1, this.stackTrace_2);
  }
},

_Future__propagateToListeners_closure: {"": "Closure;box_2,listener_3",
  call$0: function() {
    P._Future__propagateToListeners(this.box_2.source_4, this.listener_3);
  }
},

_Future__propagateToListeners_closure0: {"": "Closure;box_2,box_1,hasError_4,listener_5",
  call$0: function() {
    var t1, value, asyncError, test, matchesTest, errorCallback, e, s, t2, t3, t4, exception;
    t1 = {};
    try {
      t2 = this.box_2;
      if (!this.hasError_4) {
        value = t2.source_4.get$_async$_value();
        t2 = this.listener_5;
        t3 = t2._state === 2 ? null : t2._onValueCallback;
        t4 = this.box_1;
        if (t3 != null) {
          t4.listenerValueOrError_2 = t2._onValue$1(value);
          t4.listenerHasValue_1 = true;
        } else {
          t4.listenerValueOrError_2 = value;
          t4.listenerHasValue_1 = true;
        }
      } else {
        asyncError = t2.source_4.get$_error();
        t2 = this.listener_5;
        test = t2._state === 2 ? null : t2._errorTestCallback;
        matchesTest = true;
        if (test != null)
          matchesTest = test.call$1(J.get$error$x(asyncError));
        if (matchesTest === true)
          t3 = (t2._state === 2 ? null : t2._onErrorCallback) != null;
        else
          t3 = false;
        if (t3) {
          errorCallback = t2._state === 2 ? null : t2._onErrorCallback;
          t2 = this.box_1;
          t2.listenerValueOrError_2 = P._invokeErrorHandler(errorCallback, J.get$error$x(asyncError), asyncError.get$stackTrace());
          t2.listenerHasValue_1 = true;
        } else {
          t2 = this.box_1;
          t2.listenerValueOrError_2 = asyncError;
          t2.listenerHasValue_1 = false;
        }
      }
      t2 = this.listener_5;
      if ((t2._state === 2 ? null : t2._whenCompleteActionCallback) != null) {
        t1.completeResult_0 = t2._whenCompleteAction$0();
        t3 = t1.completeResult_0;
        t4 = J.getInterceptor(t3);
        if (typeof t3 === "object" && t3 !== null && !!t4.$isFuture) {
          t2.set$_isChained(true);
          J.then$2$onError$x(t1.completeResult_0, new P._Future__propagateToListeners__closure(this.box_2, t2), new P._Future__propagateToListeners__closure0(t1, t2));
          this.box_1.isPropagationAborted_3 = true;
        }
      }
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      if (this.hasError_4) {
        t1 = J.get$error$x(this.box_2.source_4.get$_error());
        t2 = e;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
      t2 = this.box_1;
      if (t1)
        t2.listenerValueOrError_2 = this.box_2.source_4.get$_error();
      else
        t2.listenerValueOrError_2 = new P._AsyncError(e, s);
      this.box_1.listenerHasValue_1 = false;
    }

  }
},

_Future__propagateToListeners__closure: {"": "Closure;box_2,listener_6",
  call$1: function(ignored) {
    P._Future__propagateToListeners(this.box_2.source_4, this.listener_6);
  },
  $is_args1: true
},

_Future__propagateToListeners__closure0: {"": "Closure;box_0,listener_7",
  call$2: function(error, stackTrace) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.completeResult_0;
    t3 = J.getInterceptor(t2);
    if (typeof t2 !== "object" || t2 === null || !t3.$is_Future) {
      t1.completeResult_0 = P._Future$(null);
      t1.completeResult_0._setError$2(error, stackTrace);
    }
    P._Future__propagateToListeners(t1.completeResult_0, this.listener_7);
  },
  call$1: function(error) {
    return this.call$2(error, null);
  },
  $is_args2: true,
  $is_args1: true
},

Stream: {"": "Object;",
  map$1: function(_, convert) {
    var t1 = new P._MapStream(convert, this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "Stream", 0), null]);
    return t1;
  },
  get$map: function(_receiver) {
    return new J.BoundClosure$i10(this, P.Stream.prototype.map$1, _receiver, "map$1");
  },
  forEach$1: function(_, action) {
    var t1, future;
    t1 = {};
    future = P._Future$(null);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
    return future;
  },
  get$length: function(_) {
    var t1, future;
    t1 = {};
    future = P._Future$(J.JSInt);
    t1.count_0 = 0;
    this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
    return future;
  },
  toList$0: function(_) {
    var result, future;
    result = [];
    H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(this, "Stream", 0)]);
    future = P._Future$([J.JSArray, H.getRuntimeTypeArgument(this, "Stream", 0)]);
    this.listen$4$cancelOnError$onDone$onError(new P.Stream_toList_closure(this, result), true, new P.Stream_toList_closure0(result, future), future.get$_completeError());
    return future;
  }
},

Stream_forEach_closure: {"": "Closure;box_0,this_1,action_2,future_3",
  call$1: function(element) {
    P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this.box_0.subscription_0, this.future_3));
  },
  $is_args1: true
},

Stream_forEach__closure: {"": "Closure;action_4,element_5",
  call$0: function() {
    return this.action_4.call$1(this.element_5);
  }
},

Stream_forEach__closure0: {"": "Closure;",
  call$1: function(_) {
  },
  $is_args1: true
},

Stream_forEach_closure0: {"": "Closure;future_6",
  call$0: function() {
    this.future_6._complete$1(null);
  }
},

Stream_length_closure: {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = t1.count_0 + 1;
  },
  $is_args1: true
},

Stream_length_closure0: {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._complete$1(this.box_0.count_0);
  }
},

Stream_toList_closure: {"": "Closure;this_0,result_1",
  call$1: function(data) {
    this.result_1.push(data);
  },
  $is_args1: true
},

Stream_toList_closure0: {"": "Closure;result_2,future_3",
  call$0: function() {
    this.future_3._complete$1(this.result_2);
  }
},

StreamSubscription: {"": "Object;"},

_StreamController: {"": "Object;",
  get$_pendingEvents: function() {
    if ((this._state & 8) === 0)
      return this._varData;
    return this._varData.get$varData();
  },
  _ensurePendingEvents$0: function() {
    if ((this._state & 8) === 0) {
      if (this._varData == null)
        this._varData = new P._StreamImplEvents(null, null, 0);
      return this._varData;
    }
    var t1 = this._varData.get$varData();
    return t1;
  },
  get$_subscription: function() {
    if ((this._state & 8) !== 0)
      return this._varData.get$varData();
    return this._varData;
  },
  _badEventState$0: function() {
    if ((this._state & 4) !== 0)
      return new P.StateError("Cannot add event after closing");
    return new P.StateError("Cannot add event while adding a stream");
  },
  _ensureDoneFuture$0: function() {
    if (this._doneFuture == null) {
      this._doneFuture = P._Future$(null);
      if ((this._state & 2) !== 0)
        this._doneFuture._complete$1(null);
    }
    return this._doneFuture;
  },
  add$1: function(_, value) {
    if (this._state >= 4)
      throw H.wrapException(this._badEventState$0());
    this._async$_add$1(this, value);
  },
  close$0: function(_) {
    var t1 = this._state;
    if ((t1 & 4) !== 0)
      return this._doneFuture;
    if (t1 >= 4)
      throw H.wrapException(this._badEventState$0());
    this._state = (t1 | 4) >>> 0;
    this._ensureDoneFuture$0();
    t1 = this._state;
    if ((t1 & 1) !== 0)
      this._sendDone$0();
    else if ((t1 & 3) === 0) {
      t1 = this._ensurePendingEvents$0();
      t1.add$1(t1, C.C__DelayedDone);
    }
    return this._doneFuture;
  },
  _async$_add$1: function(_, value) {
    var t1 = this._state;
    if ((t1 & 1) !== 0)
      this._sendData$1(value);
    else if ((t1 & 3) === 0) {
      t1 = this._ensurePendingEvents$0();
      t1.add$1(t1, new P._DelayedData(value, null));
    }
  },
  _addError$2: function(error, stackTrace) {
    var t1 = this._state;
    if ((t1 & 1) !== 0)
      this._sendError$2(error, stackTrace);
    else if ((t1 & 3) === 0) {
      t1 = this._ensurePendingEvents$0();
      t1.add$1(t1, new P._DelayedError(error, stackTrace, null));
    }
  },
  _subscribe$1: function(cancelOnError) {
    var t1, t2, subscription, pendingEvents, addState;
    if ((this._state & 3) !== 0)
      throw H.wrapException(P.StateError$("Stream has already been listened to."));
    t1 = $.Zone__current;
    t2 = cancelOnError ? 1 : 0;
    subscription = new P._ControllerSubscription(this, null, null, null, t1, t2, null, null);
    H.setRuntimeTypeInfo(subscription, [null]);
    pendingEvents = this.get$_pendingEvents();
    this._state = (this._state | 1) >>> 0;
    if ((this._state & 8) !== 0) {
      addState = this._varData;
      addState.set$varData(subscription);
      addState.resume$0(addState);
    } else
      this._varData = subscription;
    subscription._setPendingEvents$1(pendingEvents);
    subscription._guardCallback$1(new P._StreamController__subscribe_closure(this));
    return subscription;
  },
  _recordCancel$1: function(subscription) {
    var addState, t1, future;
    if ((this._state & 8) !== 0) {
      addState = this._varData;
      addState.cancel$0(addState);
    }
    this._varData = null;
    this._state = (this._state & 4294967286 | 2) >>> 0;
    t1 = new P._StreamController__recordCancel_complete(this);
    future = P._runGuarded(this.get$_onCancel());
    if (future != null)
      future = future.whenComplete$1(t1);
    else
      t1.call$0();
    return future;
  }
},

_StreamController__subscribe_closure: {"": "Closure;this_0",
  call$0: function() {
    P._runGuarded(this.this_0.get$_onListen());
  }
},

_StreamController__recordCancel_complete: {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0._doneFuture;
    if (t1 != null && t1._state === 0)
      t1._asyncComplete$1(null);
  }
},

_SyncStreamControllerDispatch: {"": "Object;",
  _sendData$1: function(data) {
    var t1 = this.get$_subscription();
    t1._async$_add$1(t1, data);
  },
  _sendError$2: function(error, stackTrace) {
    this.get$_subscription()._addError$2(error, stackTrace);
  },
  _sendDone$0: function() {
    this.get$_subscription()._close$0();
  }
},

_AsyncStreamControllerDispatch: {"": "Object;",
  _sendData$1: function(data) {
    this.get$_subscription()._addPending$1(new P._DelayedData(data, null));
  },
  _sendError$2: function(error, stackTrace) {
    this.get$_subscription()._addPending$1(new P._DelayedError(error, stackTrace, null));
  },
  _sendDone$0: function() {
    this.get$_subscription()._addPending$1(C.C__DelayedDone);
  }
},

_AsyncStreamController: {"": "_StreamController__AsyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"},

_StreamController__AsyncStreamControllerDispatch: {"": "_StreamController+_AsyncStreamControllerDispatch;"},

_SyncStreamController: {"": "_StreamController__SyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"},

_StreamController__SyncStreamControllerDispatch: {"": "_StreamController+_SyncStreamControllerDispatch;"},

_ControllerStream: {"": "_StreamImpl;_async$_controller",
  _createSubscription$1: function(cancelOnError) {
    return this._async$_controller._subscribe$1(cancelOnError);
  },
  get$hashCode: function(_) {
    return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      return true;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$is_ControllerStream)
      return false;
    return other._async$_controller === this._async$_controller;
  },
  $is_ControllerStream: true,
  $as_StreamImpl: null
},

_ControllerSubscription: {"": "_BufferingStreamSubscription;_async$_controller,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
  _onCancel$0: function() {
    return this._async$_controller._recordCancel$1(this);
  },
  _onPause$0: function() {
    var t1, addState;
    t1 = this._async$_controller;
    if ((t1._state & 8) !== 0) {
      addState = t1._varData;
      addState.pause$0(addState);
    }
    P._runGuarded(t1.get$_onPause());
  },
  get$_onPause: function() {
    return new P.BoundClosure$0(this, P._ControllerSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
    var t1, addState;
    t1 = this._async$_controller;
    if ((t1._state & 8) !== 0) {
      addState = t1._varData;
      addState.resume$0(addState);
    }
    P._runGuarded(t1.get$_onResume());
  },
  get$_onResume: function() {
    return new P.BoundClosure$0(this, P._ControllerSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  $as_BufferingStreamSubscription: null
},

_EventSink: {"": "Object;"},

_BufferingStreamSubscription: {"": "Object;_async$_onData,_onError,_onDone,_zone<,_state,_cancelFuture,_pending",
  _setPendingEvents$1: function(pendingEvents) {
    if (pendingEvents == null)
      return;
    this._pending = pendingEvents;
    if (!pendingEvents.get$isEmpty(pendingEvents)) {
      this._state = (this._state | 64) >>> 0;
      this._pending.schedule$1(this);
    }
  },
  onData$1: function(handleData) {
    $.Zone__current.toString;
    this._async$_onData = handleData;
  },
  onError$1: function(_, handleError) {
    this._onError = P._registerErrorHandler(handleError, $.Zone__current);
  },
  onDone$1: function(handleDone) {
    $.Zone__current.toString;
    this._onDone = handleDone;
  },
  pause$1: function(_, resumeSignal) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 + 128 | 4) >>> 0;
    if (t1 < 128 && this._pending != null)
      this._pending.cancelSchedule$0();
    if ((t1 & 4) === 0 && (this._state & 32) === 0)
      this._guardCallback$1(this.get$_onPause());
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  resume$0: function(_) {
    var t1, t2;
    t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 >= 128) {
      this._state = t1 - 128;
      t1 = this._state;
      if (t1 < 128) {
        if ((t1 & 64) !== 0) {
          t2 = this._pending;
          t2 = !t2.get$isEmpty(t2);
        } else
          t2 = false;
        if (t2)
          this._pending.schedule$1(this);
        else {
          this._state = (t1 & 4294967291) >>> 0;
          if ((this._state & 32) === 0)
            this._guardCallback$1(this.get$_onResume());
        }
      }
    }
  },
  cancel$0: function(_) {
    this._state = (this._state & 4294967279) >>> 0;
    if ((this._state & 8) !== 0)
      return this._cancelFuture;
    this._cancel$0();
    return this._cancelFuture;
  },
  get$_mayResumeInput: function() {
    if (this._state < 128) {
      var t1 = this._pending;
      t1 = t1 == null || t1.get$isEmpty(t1);
    } else
      t1 = false;
    return t1;
  },
  _cancel$0: function() {
    this._state = (this._state | 8) >>> 0;
    if ((this._state & 64) !== 0)
      this._pending.cancelSchedule$0();
    if ((this._state & 32) === 0)
      this._pending = null;
    this._cancelFuture = this._onCancel$0();
  },
  _async$_add$1: function(_, data) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 < 32)
      this._sendData$1(data);
    else
      this._addPending$1(new P._DelayedData(data, null));
  },
  _addError$2: function(error, stackTrace) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 < 32)
      this._sendError$2(error, stackTrace);
    else
      this._addPending$1(new P._DelayedError(error, stackTrace, null));
  },
  _close$0: function() {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 | 2) >>> 0;
    if (this._state < 32)
      this._sendDone$0();
    else
      this._addPending$1(C.C__DelayedDone);
  },
  _onPause$0: function() {
  },
  get$_onPause: function() {
    return new P.BoundClosure$0(this, P._BufferingStreamSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
  },
  get$_onResume: function() {
    return new P.BoundClosure$0(this, P._BufferingStreamSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  _onCancel$0: function() {
  },
  _addPending$1: function($event) {
    var pending, t1;
    pending = this._pending;
    if (pending == null) {
      pending = new P._StreamImplEvents(null, null, 0);
      this._pending = pending;
    }
    pending.add$1(pending, $event);
    t1 = this._state;
    if ((t1 & 64) === 0) {
      this._state = (t1 | 64) >>> 0;
      if (this._state < 128)
        this._pending.schedule$1(this);
    }
  },
  _sendData$1: function(data) {
    var t1 = this._state;
    this._state = (t1 | 32) >>> 0;
    this._zone.runUnaryGuarded$2(this._async$_onData, data);
    this._state = (this._state & 4294967263) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  _sendError$2: function(error, stackTrace) {
    var t1, t2, t3;
    t1 = this._state;
    t2 = new P._BufferingStreamSubscription__sendError_sendError(this, error, stackTrace);
    if ((t1 & 1) !== 0) {
      this._state = (t1 | 16) >>> 0;
      this._cancel$0();
      t1 = this._cancelFuture;
      t3 = J.getInterceptor(t1);
      if (typeof t1 === "object" && t1 !== null && !!t3.$isFuture)
        t1.whenComplete$1(t2);
      else
        t2.call$0();
    } else {
      t2.call$0();
      this._checkState$1((t1 & 4) !== 0);
    }
  },
  _sendDone$0: function() {
    var t1, t2, t3;
    t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
    this._cancel$0();
    this._state = (this._state | 16) >>> 0;
    t2 = this._cancelFuture;
    t3 = J.getInterceptor(t2);
    if (typeof t2 === "object" && t2 !== null && !!t3.$isFuture)
      t2.whenComplete$1(t1);
    else
      t1.call$0();
  },
  _guardCallback$1: function(callback) {
    var t1 = this._state;
    this._state = (t1 | 32) >>> 0;
    callback.call$0();
    this._state = (this._state & 4294967263) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  _checkState$1: function(wasInputPaused) {
    var t1, t2, isInputPaused;
    t1 = this._state;
    if ((t1 & 64) !== 0) {
      t2 = this._pending;
      t2 = t2.get$isEmpty(t2);
    } else
      t2 = false;
    if (t2) {
      this._state = (t1 & 4294967231) >>> 0;
      if ((this._state & 4) !== 0 && this.get$_mayResumeInput())
        this._state = (this._state & 4294967291) >>> 0;
    }
    for (; true; wasInputPaused = isInputPaused) {
      t1 = this._state;
      if ((t1 & 8) !== 0) {
        this._pending = null;
        return;
      }
      isInputPaused = (t1 & 4) !== 0;
      if (wasInputPaused === isInputPaused)
        break;
      this._state = (t1 ^ 32) >>> 0;
      if (isInputPaused)
        this._onPause$0();
      else
        this._onResume$0();
      this._state = (this._state & 4294967263) >>> 0;
    }
    t1 = this._state;
    if ((t1 & 64) !== 0 && t1 < 128)
      this._pending.schedule$1(this);
  },
  static: {
"": "_BufferingStreamSubscription__STATE_CANCEL_ON_ERROR,_BufferingStreamSubscription__STATE_CLOSED,_BufferingStreamSubscription__STATE_INPUT_PAUSED,_BufferingStreamSubscription__STATE_CANCELED,_BufferingStreamSubscription__STATE_WAIT_FOR_CANCEL,_BufferingStreamSubscription__STATE_IN_CALLBACK,_BufferingStreamSubscription__STATE_HAS_PENDING,_BufferingStreamSubscription__STATE_PAUSE_COUNT,_BufferingStreamSubscription__STATE_PAUSE_COUNT_SHIFT",
}

},

_BufferingStreamSubscription__sendError_sendError: {"": "Closure;this_0,error_1,stackTrace_2",
  call$0: function() {
    var t1, t2, t3, t4, t5;
    t1 = this.this_0;
    t2 = t1._state;
    if ((t2 & 8) !== 0 && (t2 & 16) === 0)
      return;
    t1._state = (t2 | 32) >>> 0;
    t2 = t1._zone;
    t3 = $.Zone__current;
    t2.toString;
    t3.toString;
    if (t3 == null ? t2 != null : t3 !== t2)
      P._rootHandleUncaughtError(t3, null, t3, this.error_1, this.stackTrace_2);
    else {
      t3 = t1._onError;
      t4 = J.getInterceptor(t3);
      t5 = this.error_1;
      if (!!t4.$is_args2)
        t2.runBinaryGuarded$3(t3, t5, this.stackTrace_2);
      else
        t2.runUnaryGuarded$2(t3, t5);
    }
    t1._state = (t1._state & 4294967263) >>> 0;
  }
},

_BufferingStreamSubscription__sendDone_sendDone: {"": "Closure;this_0",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1._state;
    if ((t2 & 16) === 0)
      return;
    t1._state = (t2 | 42) >>> 0;
    t1._zone.runGuarded$1(t1._onDone);
    t1._state = (t1._state & 4294967263) >>> 0;
  }
},

_StreamImpl: {"": "Stream;",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var subscription = this._createSubscription$1(true === cancelOnError);
    subscription.onData$1(onData);
    subscription.onError$1(subscription, onError);
    subscription.onDone$1(onDone);
    return subscription;
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  _createSubscription$1: function(cancelOnError) {
    var t1, t2;
    t1 = $.Zone__current;
    t2 = cancelOnError ? 1 : 0;
    return new P._BufferingStreamSubscription(null, null, null, t1, t2, null, null);
  },
  $asStream: null
},

_DelayedEvent: {"": "Object;next*"},

_DelayedData: {"": "_DelayedEvent;value>,next",
  perform$1: function(dispatch) {
    dispatch._sendData$1(this.value);
  }
},

_DelayedError: {"": "_DelayedEvent;error>,stackTrace<,next",
  perform$1: function(dispatch) {
    dispatch._sendError$2(this.error, this.stackTrace);
  }
},

_DelayedDone: {"": "Object;",
  perform$1: function(dispatch) {
    dispatch._sendDone$0();
  },
  get$next: function(_) {
    return;
  },
  set$next: function(_, _0) {
    throw H.wrapException(P.StateError$("No events after a done."));
  }
},

_PendingEvents: {"": "Object;",
  schedule$1: function(dispatch) {
    var t1 = this._state;
    if (t1 === 1)
      return;
    if (t1 >= 1) {
      this._state = 1;
      return;
    }
    P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
    this._state = 1;
  },
  cancelSchedule$0: function() {
    if (this._state === 1)
      this._state = 3;
  }
},

_PendingEvents_schedule_closure: {"": "Closure;this_0,dispatch_1",
  call$0: function() {
    var t1, oldState;
    t1 = this.this_0;
    oldState = t1._state;
    t1._state = 0;
    if (oldState === 3)
      return;
    t1.handleNext$1(this.dispatch_1);
  }
},

_StreamImplEvents: {"": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
  get$isEmpty: function(_) {
    return this.lastPendingEvent == null;
  },
  add$1: function(_, $event) {
    var t1 = this.lastPendingEvent;
    if (t1 == null) {
      this.lastPendingEvent = $event;
      this.firstPendingEvent = $event;
    } else {
      J.set$next$x(t1, $event);
      this.lastPendingEvent = $event;
    }
  },
  handleNext$1: function(dispatch) {
    var $event = this.firstPendingEvent;
    this.firstPendingEvent = J.get$next$x($event);
    if (this.firstPendingEvent == null)
      this.lastPendingEvent = null;
    $event.perform$1(dispatch);
  }
},

_cancelAndError_closure: {"": "Closure;future_0,error_1,stackTrace_2",
  call$0: function() {
    return this.future_0._completeError$2(this.error_1, this.stackTrace_2);
  }
},

_cancelAndErrorClosure_closure: {"": "Closure;subscription_0,future_1",
  call$2: function(error, stackTrace) {
    return P._cancelAndError(this.subscription_0, this.future_1, error, stackTrace);
  },
  $is_args2: true
},

_ForwardingStream: {"": "Stream;",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var result = P._ForwardingStreamSubscription$(this, true === cancelOnError, H.getRuntimeTypeArgument(this, "_ForwardingStream", 0), H.getRuntimeTypeArgument(this, "_ForwardingStream", 1));
    result.onData$1(onData);
    result.onError$1(result, onError);
    result.onDone$1(onDone);
    return result;
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  _handleData$2: function(data, sink) {
    sink._async$_add$1(sink, data);
  },
  $asStream: function($S, $T) {
    return [$T];
  }
},

_ForwardingStreamSubscription: {"": "_BufferingStreamSubscription;_stream,_subscription,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
  _async$_add$1: function(_, data) {
    if ((this._state & 2) !== 0)
      return;
    P._BufferingStreamSubscription.prototype._async$_add$1.call(this, this, data);
  },
  _addError$2: function(error, stackTrace) {
    if ((this._state & 2) !== 0)
      return;
    P._BufferingStreamSubscription.prototype._addError$2.call(this, error, stackTrace);
  },
  _onPause$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      return;
    t1.pause$0(t1);
  },
  get$_onPause: function() {
    return new P.BoundClosure$0(this, P._ForwardingStreamSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      return;
    t1.resume$0(t1);
  },
  get$_onResume: function() {
    return new P.BoundClosure$0(this, P._ForwardingStreamSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  _onCancel$0: function() {
    var t1 = this._subscription;
    if (t1 != null) {
      this._subscription = null;
      t1.cancel$0(t1);
    }
    return;
  },
  _handleData$1: function(data) {
    this._stream._handleData$2(data, this);
  },
  get$_handleData: function() {
    return new H.BoundClosure$1(this, P._ForwardingStreamSubscription.prototype._handleData$1, null, "_handleData$1");
  },
  _handleError$2: function(error, stackTrace) {
    this._addError$2(error, stackTrace);
  },
  get$_handleError: function() {
    return new P.BoundClosure$20(this, P._ForwardingStreamSubscription.prototype._handleError$2, null, "_handleError$2");
  },
  _handleDone$0: function() {
    this._close$0();
  },
  get$_handleDone: function() {
    return new P.BoundClosure$0(this, P._ForwardingStreamSubscription.prototype._handleDone$0, null, "_handleDone$0");
  },
  _ForwardingStreamSubscription$2: function(_stream, cancelOnError, $S, $T) {
    var t1, t2;
    t1 = this.get$_handleData();
    t2 = this.get$_handleError();
    this._subscription = this._stream._async$_source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
  },
  $as_BufferingStreamSubscription: function($S, $T) {
    return [$T];
  },
  static: {
_ForwardingStreamSubscription$: function(_stream, cancelOnError, $S, $T) {
  var t1, t2;
  t1 = $.Zone__current;
  t2 = cancelOnError ? 1 : 0;
  t2 = new P._ForwardingStreamSubscription(_stream, null, null, null, null, t1, t2, null, null);
  H.setRuntimeTypeInfo(t2, [$S, $T]);
  t2._ForwardingStreamSubscription$2(_stream, cancelOnError, $S, $T);
  return t2;
}}

},

_MapStream: {"": "_ForwardingStream;_transform,_async$_source",
  _transform$1: function(arg0) {
    return this._transform.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var outputEvent, e, s, exception, t1;
    outputEvent = null;
    try {
      outputEvent = this._transform$1(inputEvent);
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      sink._addError$2(e, s);
      return;
    }

    J._async$_add$1$x(sink, outputEvent);
  },
  $as_ForwardingStream: null
},

_BaseZone: {"": "Object;",
  runGuarded$1: function(f) {
    var e, s, t1, exception;
    try {
      t1 = this.run$1(f);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return this.handleUncaughtError$2(e, s);
    }

  },
  runUnaryGuarded$2: function(f, arg) {
    var e, s, t1, exception;
    try {
      t1 = this.runUnary$2(f, arg);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return this.handleUncaughtError$2(e, s);
    }

  },
  runBinaryGuarded$3: function(f, arg1, arg2) {
    var e, s, t1, exception;
    try {
      t1 = this.runBinary$3(f, arg1, arg2);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return this.handleUncaughtError$2(e, s);
    }

  },
  bindCallback$2$runGuarded: function(f, runGuarded) {
    var registered = this.registerCallback$1(f);
    if (runGuarded)
      return new P._BaseZone_bindCallback_closure(this, registered);
    else
      return new P._BaseZone_bindCallback_closure0(this, registered);
  },
  bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
    var registered = this.registerUnaryCallback$1(f);
    if (runGuarded)
      return new P._BaseZone_bindUnaryCallback_closure(this, registered);
    else
      return new P._BaseZone_bindUnaryCallback_closure0(this, registered);
  }
},

_BaseZone_bindCallback_closure: {"": "Closure;this_0,registered_1",
  call$0: function() {
    return this.this_0.runGuarded$1(this.registered_1);
  }
},

_BaseZone_bindCallback_closure0: {"": "Closure;this_2,registered_3",
  call$0: function() {
    return this.this_2.run$1(this.registered_3);
  }
},

_BaseZone_bindUnaryCallback_closure: {"": "Closure;this_0,registered_1",
  call$1: function(arg) {
    return this.this_0.runUnaryGuarded$2(this.registered_1, arg);
  },
  $is_args1: true
},

_BaseZone_bindUnaryCallback_closure0: {"": "Closure;this_2,registered_3",
  call$1: function(arg) {
    return this.this_2.runUnary$2(this.registered_3, arg);
  },
  $is_args1: true
},

_rootHandleUncaughtError_closure: {"": "Closure;error_0,stackTrace_1",
  call$0: function() {
    P._scheduleAsyncCallback(new P._rootHandleUncaughtError__closure(this.error_0, this.stackTrace_1));
  }
},

_rootHandleUncaughtError__closure: {"": "Closure;error_2,stackTrace_3",
  call$0: function() {
    var t1, trace, t2;
    t1 = this.error_2;
    P.print("Uncaught Error: " + H.S(t1));
    trace = this.stackTrace_3;
    if (trace == null) {
      t2 = J.getInterceptor(t1);
      t2 = typeof t1 === "object" && t1 !== null && !!t2.$isError;
    } else
      t2 = false;
    if (t2)
      trace = t1.get$stackTrace();
    if (trace != null)
      P.print("Stack Trace: \n" + H.S(trace) + "\n");
    throw H.wrapException(t1);
  }
},

_RootZone: {"": "_BaseZone;",
  get$parent: function(_) {
    return;
  },
  $index: function(_, key) {
    return;
  },
  handleUncaughtError$2: function(error, stackTrace) {
    return P._rootHandleUncaughtError(this, null, this, error, stackTrace);
  },
  run$1: function(f) {
    return P._rootRun(this, null, this, f);
  },
  runUnary$2: function(f, arg) {
    return P._rootRunUnary(this, null, this, f, arg);
  },
  runBinary$3: function(f, arg1, arg2) {
    return P._rootRunBinary(this, null, this, f, arg1, arg2);
  },
  registerCallback$1: function(f) {
    return f;
  },
  registerUnaryCallback$1: function(f) {
    return f;
  }
}}],
["dart.collection", "dart:collection", , P, {
_defaultEquals: function(a, b) {
  return J.$eq(a, b);
},

_defaultHashCode: function(a) {
  return J.get$hashCode$(a);
},

HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
  var t1 = new P._HashMap(0, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$K, $V]);
  return t1;
},

HashSet_HashSet$identity: function($E) {
  var t1 = new P._IdentityHashSet(0, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$E]);
  return t1;
},

_iterableToString: function(iterable) {
  var parts, t1;
  t1 = $.get$_toStringVisiting();
  if (t1.contains$1(t1, iterable))
    return "(...)";
  t1 = $.get$_toStringVisiting();
  t1.add$1(t1, iterable);
  parts = [];
  try {
    P._iterablePartsToStrings(iterable, parts);
  } finally {
    t1 = $.get$_toStringVisiting();
    t1.remove$1(t1, iterable);
  }
  t1 = P.StringBuffer$("(");
  t1.writeAll$2(parts, ", ");
  t1.write$1(t1, ")");
  return t1._contents;
},

_iterablePartsToStrings: function(iterable, parts) {
  var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
  it = iterable.get$iterator(iterable);
  $length = 0;
  count = 0;
  while (true) {
    if (!($length < 80 || count < 3))
      break;
    if (!it.moveNext$0())
      return;
    next = H.S(it.get$current());
    parts.push(next);
    $length += next.length + 2;
    ++count;
  }
  if (!it.moveNext$0()) {
    if (count <= 5)
      return;
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    ultimateString = parts.pop();
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    penultimateString = parts.pop();
  } else {
    penultimate = it.get$current();
    ++count;
    if (!it.moveNext$0()) {
      if (count <= 4) {
        parts.push(H.S(penultimate));
        return;
      }
      ultimateString = H.S(penultimate);
      if (0 >= parts.length)
        throw H.ioore(parts, 0);
      penultimateString = parts.pop();
      $length += ultimateString.length + 2;
    } else {
      ultimate = it.get$current();
      ++count;
      for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
        ultimate0 = it.get$current();
        ++count;
        if (count > 100) {
          while (true) {
            if (!($length > 75 && count > 3))
              break;
            if (0 >= parts.length)
              throw H.ioore(parts, 0);
            $length -= parts.pop().length + 2;
            --count;
          }
          parts.push("...");
          return;
        }
      }
      penultimateString = H.S(penultimate);
      ultimateString = H.S(ultimate);
      $length += ultimateString.length + penultimateString.length + 4;
    }
  }
  if (count > parts.length + 2) {
    $length += 5;
    elision = "...";
  } else
    elision = null;
  while (true) {
    if (!($length > 80 && parts.length > 3))
      break;
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    $length -= parts.pop().length + 2;
    if (elision == null) {
      $length += 5;
      elision = "...";
    }
  }
  if (elision != null)
    parts.push(elision);
  parts.push(penultimateString);
  parts.push(ultimateString);
},

LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
  var t1 = new P._LinkedHashMap(0, null, null, null, null, null, 0);
  H.setRuntimeTypeInfo(t1, [$K, $V]);
  return t1;
},

Maps_mapToString: function(m) {
  var t1, result, i, t2;
  t1 = {};
  for (i = 0; i < $.get$Maps__toStringList().length; ++i) {
    t2 = $.get$Maps__toStringList();
    if (i >= t2.length)
      throw H.ioore(t2, i);
    if (t2[i] === m)
      return "{...}";
  }
  result = P.StringBuffer$("");
  try {
    $.get$Maps__toStringList().push(m);
    J.write$1$x(result, "{");
    t1.first_0 = true;
    J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
    J.write$1$x(result, "}");
  } finally {
    t1 = $.get$Maps__toStringList();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1.pop();
  }
  return result.get$_contents();
},

_HashMap: {"": "Object;_collection$_length,_strings,_nums,_rest,_keys",
  get$length: function(_) {
    return this._collection$_length;
  },
  get$keys: function(_) {
    var t1 = new P.HashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_HashMap", 0)]);
    return t1;
  },
  get$values: function(_) {
    var t1 = new P.HashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_HashMap", 0)]);
    return H.MappedIterable_MappedIterable(t1, new P._HashMap_values_closure(this), H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
  },
  $index: function(_, key) {
    var strings, t1, entry, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      return t1;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      return t1;
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    }
  },
  $indexSet: function(_, key, value) {
    var strings, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        strings = P._HashMap__newHashTable();
        this._strings = strings;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        nums = P._HashMap__newHashTable();
        this._nums = nums;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        rest = P._HashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        P._HashMap__setTableEntry(rest, hash, [key, value]);
        this._collection$_length = this._collection$_length + 1;
        this._keys = null;
      } else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._collection$_length = this._collection$_length + 1;
          this._keys = null;
        }
      }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      this._collection$_length = this._collection$_length - 1;
      this._keys = null;
      return bucket.splice(index, 2)[1];
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    keys = this._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw H.wrapException(P.ConcurrentModificationError$(this));
    }
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = P.List_List(this._collection$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._keys = result;
    return result;
  },
  _addHashTableEntry$3: function(table, key, value) {
    if (table[key] == null) {
      this._collection$_length = this._collection$_length + 1;
      this._keys = null;
    }
    P._HashMap__setTableEntry(table, key, value);
  },
  _removeHashTableEntry$2: function(table, key) {
    var value;
    if (table != null && table[key] != null) {
      value = P._HashMap__getTableEntry(table, key);
      delete table[key];
      this._collection$_length = this._collection$_length - 1;
      this._keys = null;
      return value;
    } else
      return;
  },
  _computeHashCode$1: function(key) {
    return J.get$hashCode$(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; i += 2)
      if (J.$eq(bucket[i], key))
        return i;
    return -1;
  },
  $isMap: true,
  $asMap: null,
  static: {
_HashMap__getTableEntry: function(table, key) {
  var entry = table[key];
  return entry === table ? null : entry;
},

_HashMap__setTableEntry: function(table, key, value) {
  if (value == null)
    table[key] = table;
  else
    table[key] = value;
},

_HashMap__newHashTable: function() {
  var table = Object.create(null);
  P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
  delete table["<non-identifier-key>"];
  return table;
}}

},

_HashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    var t1 = this.this_0;
    return t1.$index(t1, each);
  },
  $is_args1: true
},

HashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._collection$_length;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
  },
  forEach$1: function(_, f) {
    var t1, keys, $length, i;
    t1 = this._map;
    keys = t1._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      f.call$1(keys[i]);
      if (keys !== t1._keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
    }
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

HashMapKeyIterator: {"": "Object;_map,_keys,_offset,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._offset;
    t1 = this._map;
    if (keys !== t1._keys)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else if (offset >= keys.length) {
      this._collection$_current = null;
      return false;
    } else {
      this._collection$_current = keys[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

_LinkedHashMap: {"": "Object;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
  get$length: function(_) {
    return this._collection$_length;
  },
  get$keys: function(_) {
    var t1 = new P.LinkedHashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_LinkedHashMap", 0)]);
    return t1;
  },
  get$values: function(_) {
    var t1 = new P.LinkedHashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_LinkedHashMap", 0)]);
    return H.MappedIterable_MappedIterable(t1, new P._LinkedHashMap_values_closure(this), H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
  },
  containsKey$1: function(_, key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return false;
      return strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    }
  },
  $index: function(_, key) {
    var strings, cell, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return;
      cell = strings[key];
      return cell == null ? null : cell.get$_value();
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return;
      cell = nums[key];
      return cell == null ? null : cell.get$_value();
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_value();
    }
  },
  $indexSet: function(_, key, value) {
    var strings, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        strings = P._LinkedHashMap__newHashTable();
        this._strings = strings;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        nums = P._LinkedHashMap__newHashTable();
        this._nums = nums;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].set$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index, cell;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_value();
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$2(cell._key, cell._value);
      if (modifications !== this._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(this));
      cell = cell._next;
    }
  },
  _addHashTableEntry$3: function(table, key, value) {
    var cell = table[key];
    if (cell == null)
      table[key] = this._newLinkedCell$2(key, value);
    else
      cell.set$_value(value);
  },
  _removeHashTableEntry$2: function(table, key) {
    var cell;
    if (table == null)
      return;
    cell = table[key];
    if (cell == null)
      return;
    this._unlinkCell$1(cell);
    delete table[key];
    return cell.get$_value();
  },
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = new P.LinkedHashMapCell(key, value, null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last._next = cell;
      this._last = cell;
    }
    this._collection$_length = this._collection$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_previous();
    next = cell._next;
    if (previous == null)
      this._first = next;
    else
      previous._next = next;
    if (next == null)
      this._last = previous;
    else
      next._previous = previous;
    this._collection$_length = this._collection$_length - 1;
    this._modifications = this._modifications + 1 & 67108863;
  },
  _computeHashCode$1: function(key) {
    return J.get$hashCode$(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(J.get$_key$x(bucket[i]), key))
        return i;
    return -1;
  },
  toString$0: function(_) {
    return P.Maps_mapToString(this);
  },
  $isMap: true,
  $asMap: null,
  static: {
_LinkedHashMap__newHashTable: function() {
  var table = Object.create(null);
  table["<non-identifier-key>"] = table;
  delete table["<non-identifier-key>"];
  return table;
}}

},

_LinkedHashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    var t1 = this.this_0;
    return t1.$index(t1, each);
  },
  $is_args1: true
},

LinkedHashMapCell: {"": "Object;_key>,_value@,_next,_previous<"},

LinkedHashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._collection$_length;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    t1 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
    t1._cell = t1._map._first;
    return t1;
  },
  forEach$1: function(_, f) {
    var t1, cell, modifications;
    t1 = this._map;
    cell = t1._first;
    modifications = t1._modifications;
    for (; cell != null;) {
      f.call$1(cell._key);
      if (modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      cell = cell._next;
    }
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

LinkedHashMapKeyIterator: {"": "Object;_map,_modifications,_cell,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var t1 = this._map;
    if (this._modifications !== t1._modifications)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = t1._key;
        this._cell = this._cell._next;
        return true;
      }
    }
  }
},

_HashSet: {"": "_HashSetBase;",
  get$iterator: function(_) {
    return new P.HashSetIterator(this, this._computeElements$0(), 0, null);
  },
  get$length: function(_) {
    return this._collection$_length;
  },
  contains$1: function(_, object) {
    var strings, nums, rest;
    if (typeof object === "string" && object !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[object] != null;
    } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
      nums = this._nums;
      return nums == null ? false : nums[object] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    }
  },
  lookup$1: function(object) {
    var t1, rest, bucket, index;
    if (!(typeof object === "string" && object !== "__proto__"))
      t1 = typeof object === "number" && (object & 0x3ffffff) === object;
    else
      t1 = true;
    if (t1)
      return this.contains$1(this, object) ? object : null;
    rest = this._rest;
    if (rest == null)
      return;
    bucket = rest[this._computeHashCode$1(object)];
    index = this._findBucketIndex$2(bucket, object);
    if (index < 0)
      return;
    return J.$index$asx(bucket, index);
  },
  add$1: function(_, element) {
    var strings, table, nums, rest, hash, bucket;
    if (typeof element === "string" && element !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      return this._addHashTableEntry$2(strings, element);
    } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      return this._addHashTableEntry$2(nums, element);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [element];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(element);
      }
      this._collection$_length = this._collection$_length + 1;
      this._elements = null;
      return true;
    }
  },
  remove$1: function(_, object) {
    var rest, bucket, index;
    if (typeof object === "string" && object !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, object);
    else if (typeof object === "number" && (object & 0x3ffffff) === object)
      return this._removeHashTableEntry$2(this._nums, object);
    else {
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      this._collection$_length = this._collection$_length - 1;
      this._elements = null;
      bucket.splice(index, 1);
      return true;
    }
  },
  _computeElements$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._elements;
    if (t1 != null)
      return t1;
    result = P.List_List(this._collection$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; ++i0) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._elements = result;
    return result;
  },
  _addHashTableEntry$2: function(table, element) {
    if (table[element] != null)
      return false;
    table[element] = 0;
    this._collection$_length = this._collection$_length + 1;
    this._elements = null;
    return true;
  },
  _removeHashTableEntry$2: function(table, element) {
    if (table != null && table[element] != null) {
      delete table[element];
      this._collection$_length = this._collection$_length - 1;
      this._elements = null;
      return true;
    } else
      return false;
  },
  _computeHashCode$1: function(element) {
    return J.get$hashCode$(element) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i], element))
        return i;
    return -1;
  },
  $as_HashSetBase: null,
  $isEfficientLength: true
},

_IdentityHashSet: {"": "_HashSet;_collection$_length,_strings,_nums,_rest,_elements",
  _computeHashCode$1: function(key) {
    return H.objectHashCode(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i, t1;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i) {
      t1 = bucket[i];
      if (t1 == null ? element == null : t1 === element)
        return i;
    }
    return -1;
  },
  $as_HashSet: null
},

HashSetIterator: {"": "Object;_set,_elements,_offset,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var elements, offset, t1;
    elements = this._elements;
    offset = this._offset;
    t1 = this._set;
    if (elements !== t1._elements)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else if (offset >= elements.length) {
      this._collection$_current = null;
      return false;
    } else {
      this._collection$_current = elements[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

_HashSetBase: {"": "IterableBase;",
  toList$1$growable: function(_, growable) {
    var result, t1, i, element, i0;
    if (growable) {
      result = P.List_List(null, H.getRuntimeTypeArgument(this, "_HashSetBase", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(this, "_HashSetBase", 0)]);
      C.JSArray_methods.set$length(result, this.get$length(this));
    } else {
      result = P.List_List(this.get$length(this), H.getRuntimeTypeArgument(this, "_HashSetBase", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(this, "_HashSetBase", 0)]);
    }
    for (t1 = this.get$iterator(this), i = 0; t1.moveNext$0(); i = i0) {
      element = t1._collection$_current;
      i0 = i + 1;
      if (i >= result.length)
        throw H.ioore(result, i);
      result[i] = element;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  toString$0: function(_) {
    return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

IterableBase: {"": "Object;",
  map$1: function(_, f) {
    return H.MappedIterable_MappedIterable(this, f, H.getRuntimeTypeArgument(this, "IterableBase", 0), null);
  },
  get$map: function(_receiver) {
    return new J.BoundClosure$i10(this, P.IterableBase.prototype.map$1, _receiver, "map$1");
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
  },
  any$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      if (f.call$1(t1.get$current()) === true)
        return true;
    return false;
  },
  toList$1$growable: function(_, growable) {
    return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "IterableBase", 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0();)
      ++count;
    return count;
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element;
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
      element = t1.get$current();
      if (remaining === 0)
        return element;
      --remaining;
    }
    throw H.wrapException(P.RangeError$value(index));
  },
  toString$0: function(_) {
    return P._iterableToString(this);
  }
},

ListBase: {"": "Object+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

ListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return new H.ListIterator(receiver, this.get$length(receiver), 0, null);
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  forEach$1: function(receiver, action) {
    var $length, i;
    $length = this.get$length(receiver);
    if (typeof $length !== "number")
      throw H.iae($length);
    i = 0;
    for (; i < $length; ++i) {
      action.call$1(this.$index(receiver, i));
      if ($length !== this.get$length(receiver))
        throw H.wrapException(P.ConcurrentModificationError$(receiver));
    }
  },
  map$1: function(receiver, f) {
    var t1 = new H.MappedListIterable(receiver, f);
    H.setRuntimeTypeInfo(t1, [null, null]);
    return t1;
  },
  get$map: function(_receiver) {
    return new J.BoundClosure$i10(this, P.ListMixin.prototype.map$1, _receiver, "map$1");
  },
  toList$1$growable: function(receiver, growable) {
    var result, i, t1;
    if (growable) {
      result = P.List_List(null, H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      C.JSArray_methods.set$length(result, this.get$length(receiver));
    } else {
      result = P.List_List(this.get$length(receiver), H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
      H.setRuntimeTypeInfo(result, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    }
    i = 0;
    while (true) {
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      if (!(i < t1))
        break;
      t1 = this.$index(receiver, i);
      if (i >= result.length)
        throw H.ioore(result, i);
      result[i] = t1;
      ++i;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, element) {
    var t1 = this.get$length(receiver);
    if (typeof t1 !== "number")
      throw t1.$add();
    this.set$length(receiver, t1 + 1);
    this.$indexSet(receiver, t1, element);
  },
  remove$1: function(receiver, element) {
    var i, t1;
    i = 0;
    while (true) {
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      if (!(i < t1))
        break;
      if (J.$eq(this.$index(receiver, i), element)) {
        t1 = this.get$length(receiver);
        if (typeof t1 !== "number")
          throw t1.$sub();
        this.setRange$4(receiver, i, t1 - 1, receiver, i + 1);
        t1 = this.get$length(receiver);
        if (typeof t1 !== "number")
          throw t1.$sub();
        this.set$length(receiver, t1 - 1);
        return true;
      }
      ++i;
    }
    return false;
  },
  sort$1: function(receiver, compare) {
    var t1 = this.get$length(receiver);
    if (typeof t1 !== "number")
      throw t1.$sub();
    H.Sort__doSort(receiver, 0, t1 - 1, compare);
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    var t1, $length, t2, i;
    if (!(start < 0)) {
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      t1 = start > t1;
    } else
      t1 = true;
    if (t1)
      H.throwExpression(P.RangeError$range(start, 0, this.get$length(receiver)));
    if (!(end < start)) {
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      t1 = end > t1;
    } else
      t1 = true;
    if (t1)
      H.throwExpression(P.RangeError$range(end, start, this.get$length(receiver)));
    $length = end - start;
    if ($length === 0)
      return;
    if (skipCount < 0)
      throw H.wrapException(new P.ArgumentError(skipCount));
    t1 = J.getInterceptor$asx(iterable);
    t2 = t1.get$length(iterable);
    if (typeof t2 !== "number")
      throw H.iae(t2);
    if (skipCount + $length > t2)
      throw H.wrapException(P.StateError$("Not enough elements"));
    if (skipCount < start)
      for (i = $length - 1; i >= 0; --i)
        this.$indexSet(receiver, start + i, t1.$index(iterable, skipCount + i));
    else
      for (i = 0; i < $length; ++i)
        this.$indexSet(receiver, start + i, t1.$index(iterable, skipCount + i));
  },
  indexOf$2: function(receiver, element, startIndex) {
    var t1, i;
    t1 = this.get$length(receiver);
    if (typeof t1 !== "number")
      throw H.iae(t1);
    if (startIndex >= t1)
      return -1;
    if (startIndex < 0)
      startIndex = 0;
    i = startIndex;
    while (true) {
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      if (!(i < t1))
        break;
      if (J.$eq(this.$index(receiver, i), element))
        return i;
      ++i;
    }
    return -1;
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeAt$1: function(receiver, index) {
    var result, t1;
    result = this.$index(receiver, index);
    t1 = this.get$length(receiver);
    if (typeof t1 !== "number")
      throw t1.$sub();
    this.setRange$4(receiver, index, t1 - 1, receiver, index + 1);
    t1 = this.get$length(receiver);
    if (typeof t1 !== "number")
      throw t1.$sub();
    this.set$length(receiver, t1 - 1);
    return result;
  },
  toString$0: function(receiver) {
    var result, t1;
    t1 = $.get$_toStringVisiting();
    if (t1.contains$1(t1, receiver))
      return "[...]";
    result = P.StringBuffer$("");
    try {
      t1 = $.get$_toStringVisiting();
      t1.add$1(t1, receiver);
      J.write$1$x(result, "[");
      result.writeAll$2(receiver, ", ");
      J.write$1$x(result, "]");
    } finally {
      t1 = $.get$_toStringVisiting();
      t1.remove$1(t1, receiver);
    }
    return result.get$_contents();
  },
  $isList: true,
  $asList: null,
  $isEfficientLength: true
},

Maps_mapToString_closure: {"": "Closure;box_0,result_1",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (!t1.first_0) {
      t2 = this.result_1;
      t2.write$1(t2, ", ");
    }
    t1.first_0 = false;
    t1 = this.result_1;
    t1.write$1(t1, k);
    t1.write$1(t1, ": ");
    t1.write$1(t1, v);
  },
  $is_args2: true
},

ListQueue: {"": "IterableBase;_table,_head,_tail,_modificationCount",
  get$iterator: function(_) {
    return P._ListQueueIterator$(this);
  },
  forEach$1: function(_, action) {
    var modificationCount, i, t1;
    modificationCount = this._modificationCount;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw H.ioore(t1, i);
      action.call$1(t1[i]);
      if (modificationCount !== this._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(this));
    }
  },
  get$length: function(_) {
    return (this._tail - this._head & this._table.length - 1) >>> 0;
  },
  toList$1$growable: function(_, growable) {
    var list;
    if (growable) {
      list = P.List_List(null, H.getRuntimeTypeArgument(this, "ListQueue", 0));
      H.setRuntimeTypeInfo(list, [H.getRuntimeTypeArgument(this, "ListQueue", 0)]);
      C.JSArray_methods.set$length(list, this.get$length(this));
    } else {
      list = P.List_List(this.get$length(this), H.getRuntimeTypeArgument(this, "ListQueue", 0));
      H.setRuntimeTypeInfo(list, [H.getRuntimeTypeArgument(this, "ListQueue", 0)]);
    }
    this._writeToList$1(list);
    return list;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(_, element) {
    this._add$1(this, element);
  },
  remove$1: function(_, object) {
    var i, t1;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw H.ioore(t1, i);
      if (J.$eq(t1[i], object)) {
        this._remove$1(this, i);
        this._modificationCount = this._modificationCount + 1;
        return true;
      }
    }
    return false;
  },
  toString$0: function(_) {
    return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw H.wrapException(P.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t1, t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  _add$1: function(_, element) {
    var t1, t2, t3;
    t1 = this._table;
    t2 = this._tail;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t1, t2);
    t1[t2] = element;
    this._tail = (t2 + 1 & t3 - 1) >>> 0;
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _remove$1: function(_, offset) {
    var t1, t2, mask, t3, t4, i, prevOffset, nextOffset;
    t1 = this._table;
    t2 = t1.length;
    mask = t2 - 1;
    t3 = this._head;
    t4 = this._tail;
    if ((offset - t3 & mask) >>> 0 < (t4 - offset & mask) >>> 0) {
      for (i = offset; i !== t3; i = prevOffset) {
        prevOffset = (i - 1 & mask) >>> 0;
        if (prevOffset < 0 || prevOffset >= t2)
          throw H.ioore(t1, prevOffset);
        t4 = t1[prevOffset];
        if (i < 0 || i >= t2)
          throw H.ioore(t1, i);
        t1[i] = t4;
      }
      if (t3 < 0 || t3 >= t2)
        throw H.ioore(t1, t3);
      t1[t3] = null;
      this._head = (t3 + 1 & mask) >>> 0;
      return (offset + 1 & mask) >>> 0;
    } else {
      this._tail = (t4 - 1 & mask) >>> 0;
      for (t1 = this._tail, t2 = this._table, t3 = t2.length, i = offset; i !== t1; i = nextOffset) {
        nextOffset = (i + 1 & mask) >>> 0;
        if (nextOffset < 0 || nextOffset >= t3)
          throw H.ioore(t2, nextOffset);
        t4 = t2[nextOffset];
        if (i < 0 || i >= t3)
          throw H.ioore(t2, i);
        t2[i] = t4;
      }
      if (t1 < 0 || t1 >= t3)
        throw H.ioore(t2, t1);
      t2[t1] = null;
      return offset;
    }
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = P.List_List(this._table.length * 2, H.getRuntimeTypeArgument(this, "ListQueue", 0));
    H.setRuntimeTypeInfo(newTable, [H.getRuntimeTypeArgument(this, "ListQueue", 0)]);
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    H.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
    t1 = this._head;
    t2 = this._table;
    H.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  _writeToList$1: function(target) {
    var t1, t2, t3, $length, firstPartSize;
    t1 = this._head;
    t2 = this._tail;
    t3 = this._table;
    if (t1 <= t2) {
      $length = t2 - t1;
      H.IterableMixinWorkaround_setRangeList(target, 0, $length, t3, t1);
      return $length;
    } else {
      firstPartSize = t3.length - t1;
      H.IterableMixinWorkaround_setRangeList(target, 0, firstPartSize, t3, t1);
      t1 = this._tail;
      t2 = this._table;
      H.IterableMixinWorkaround_setRangeList(target, firstPartSize, firstPartSize + t1, t2, 0);
      return this._tail + firstPartSize;
    }
  },
  ListQueue$1: function(initialCapacity, $E) {
    var t1 = P.List_List(8, $E);
    H.setRuntimeTypeInfo(t1, [$E]);
    this._table = t1;
  },
  $asIterableBase: null,
  $isEfficientLength: true,
  static: {
"": "ListQueue__INITIAL_CAPACITY",
ListQueue$: function(initialCapacity, $E) {
  var t1 = new P.ListQueue(null, 0, 0, 0);
  H.setRuntimeTypeInfo(t1, [$E]);
  t1.ListQueue$1(initialCapacity, $E);
  return t1;
}}

},

_ListQueueIterator: {"": "Object;_queue,_end,_modificationCount,_collection$_position,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    if (this._modificationCount !== t1._modificationCount)
      H.throwExpression(P.ConcurrentModificationError$(t1));
    t2 = this._collection$_position;
    if (t2 === this._end) {
      this._collection$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw H.ioore(t3, t2);
    this._collection$_current = t3[t2];
    this._collection$_position = (this._collection$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  },
  static: {
_ListQueueIterator$: function(queue) {
  return new P._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, null);
}}

}}],
["dart.core", "dart:core", , P, {
_symbolToString: function(symbol) {
  return H.Symbol_getName(symbol);
},

Comparable_compare: function(a, b) {
  return J.compareTo$1$ns(a, b);
},

Error_safeToString: function(object) {
  var buffer, t1, i, codeUnit, t2, charCodes;
  if (typeof object === "number" || typeof object === "boolean" || null == object)
    return J.toString$0(object);
  if (typeof object === "string") {
    buffer = new P.StringBuffer("");
    buffer._contents = "\"";
    for (t1 = object.length, i = 0; i < t1; ++i) {
      codeUnit = C.JSString_methods.codeUnitAt$1(object, i);
      if (codeUnit <= 31)
        if (codeUnit === 10)
          buffer._contents = buffer._contents + "\\n";
        else if (codeUnit === 13)
          buffer._contents = buffer._contents + "\\r";
        else if (codeUnit === 9)
          buffer._contents = buffer._contents + "\\t";
        else {
          buffer._contents = buffer._contents + "\\x";
          if (codeUnit < 16)
            buffer._contents = buffer._contents + "0";
          else {
            buffer._contents = buffer._contents + "1";
            codeUnit -= 16;
          }
          t2 = codeUnit < 10 ? 48 + codeUnit : 87 + codeUnit;
          charCodes = P.List_List$filled(1, t2, J.JSInt);
          charCodes.$builtinTypeInfo = [J.JSInt];
          t2 = H.Primitives_stringFromCharCodes(charCodes);
          buffer._contents = buffer._contents + t2;
        }
      else if (codeUnit === 92)
        buffer._contents = buffer._contents + "\\\\";
      else if (codeUnit === 34)
        buffer._contents = buffer._contents + "\\\"";
      else {
        charCodes = P.List_List$filled(1, codeUnit, J.JSInt);
        charCodes.$builtinTypeInfo = [J.JSInt];
        t2 = H.Primitives_stringFromCharCodes(charCodes);
        buffer._contents = buffer._contents + t2;
      }
    }
    buffer._contents = buffer._contents + "\"";
    return buffer._contents;
  }
  return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
},

Exception_Exception: function(message) {
  return new P._ExceptionImplementation(message);
},

identical: function(a, b) {
  return a == null ? b == null : a === b;
},

identityHashCode: function(object) {
  return H.objectHashCode(object);
},

List_List: function($length, $E) {
  var result;
  if ($length == null)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw H.wrapException(P.ArgumentError$("Length must be a positive integer: " + H.S($length) + "."));
  result = new Array($length);
  result.fixed$length = true;
  return result;
},

List_List$filled: function($length, fill, $E) {
  var result, t1, i;
  if ($length < 0)
    throw H.wrapException(P.ArgumentError$("Length must be a positive integer: " + $length + "."));
  result = H.Primitives_newFixedList($length);
  if ($length !== 0 && true)
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
},

List_List$from: function(other, growable, $E) {
  var list, t1, $length, fixedList, i;
  list = P.List_List(null, $E);
  H.setRuntimeTypeInfo(list, [$E]);
  for (t1 = J.get$iterator$ax(other); t1.moveNext$0();)
    list.push(t1.get$current());
  if (growable)
    return list;
  $length = list.length;
  fixedList = P.List_List($length, $E);
  H.setRuntimeTypeInfo(fixedList, [$E]);
  for (t1 = list.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw H.ioore(list, i);
    fixedList[i] = list[i];
  }
  return fixedList;
},

print: function(object) {
  var line = J.toString$0(object);
  H.printToConsole(line);
},

NoSuchMethodError_toString_closure: {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1, t2;
    t1 = this.box_0;
    if (t1.i_1 > 0) {
      t2 = t1.sb_0;
      t2.write$1(t2, ", ");
    }
    t1 = t1.sb_0;
    t1.write$1(t1, P._symbolToString(key));
  },
  $is_args2: true
},

Comparable: {"": "Object;"},

DateTime: {"": "Object;millisecondsSinceEpoch<,isUtc",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isDateTime)
      return false;
    return this.millisecondsSinceEpoch === other.millisecondsSinceEpoch && this.isUtc === other.isUtc;
  },
  compareTo$1: function(_, other) {
    return C.JSNumber_methods.compareTo$1(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
  },
  get$hashCode: function(_) {
    return this.millisecondsSinceEpoch;
  },
  toString$0: function(_) {
    var t1, y, m, d, h, min, sec, ms;
    t1 = new P.DateTime_toString_twoDigits();
    y = new P.DateTime_toString_fourDigits().call$1(H.Primitives_getYear(this));
    m = t1.call$1(H.Primitives_getMonth(this));
    d = t1.call$1(H.Primitives_getDay(this));
    h = t1.call$1(H.Primitives_getHours(this));
    min = t1.call$1(H.Primitives_getMinutes(this));
    sec = t1.call$1(H.Primitives_getSeconds(this));
    ms = new P.DateTime_toString_threeDigits().call$1(H.Primitives_getMilliseconds(this));
    if (this.isUtc)
      return H.S(y) + "-" + H.S(m) + "-" + H.S(d) + " " + H.S(h) + ":" + H.S(min) + ":" + H.S(sec) + "." + H.S(ms) + "Z";
    else
      return H.S(y) + "-" + H.S(m) + "-" + H.S(d) + " " + H.S(h) + ":" + H.S(min) + ":" + H.S(sec) + "." + H.S(ms);
  },
  add$1: function(_, duration) {
    return P.DateTime$fromMillisecondsSinceEpoch(this.millisecondsSinceEpoch + duration.get$inMilliseconds(), this.isUtc);
  },
  DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
    if (Math.abs(millisecondsSinceEpoch) > 8640000000000000)
      throw H.wrapException(new P.ArgumentError(millisecondsSinceEpoch));
  },
  DateTime$_now$0: function() {
    H.Primitives_lazyAsJsDate(this);
  },
  $isDateTime: true,
  static: {
"": "DateTime_MONDAY,DateTime_TUESDAY,DateTime_WEDNESDAY,DateTime_THURSDAY,DateTime_FRIDAY,DateTime_SATURDAY,DateTime_SUNDAY,DateTime_DAYS_PER_WEEK,DateTime_JANUARY,DateTime_FEBRUARY,DateTime_MARCH,DateTime_APRIL,DateTime_MAY,DateTime_JUNE,DateTime_JULY,DateTime_AUGUST,DateTime_SEPTEMBER,DateTime_OCTOBER,DateTime_NOVEMBER,DateTime_DECEMBER,DateTime_MONTHS_PER_YEAR,DateTime__MAX_MILLISECONDS_SINCE_EPOCH",
DateTime$fromMillisecondsSinceEpoch: function(millisecondsSinceEpoch, isUtc) {
  var t1 = new P.DateTime(millisecondsSinceEpoch, isUtc);
  t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
  return t1;
},

DateTime$_now: function() {
  var t1 = new P.DateTime(Date.now(), false);
  t1.DateTime$_now$0();
  return t1;
}}

},

DateTime_toString_fourDigits: {"": "Closure;",
  call$1: function(n) {
    var absN, sign;
    absN = J.abs$0$n(n);
    sign = n < 0 ? "-" : "";
    if (absN >= 1000)
      return H.S(n);
    if (absN >= 100)
      return sign + "0" + H.S(absN);
    if (absN >= 10)
      return sign + "00" + H.S(absN);
    return sign + "000" + H.S(absN);
  },
  $is_args1: true
},

DateTime_toString_threeDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor$n(n);
    if (t1.$ge(n, 100))
      return H.S(n);
    if (t1.$ge(n, 10))
      return "0" + H.S(n);
    return "00" + H.S(n);
  },
  $is_args1: true
},

DateTime_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if (J.$ge$n(n, 10))
      return H.S(n);
    return "0" + H.S(n);
  },
  $is_args1: true
},

Duration: {"": "Object;_duration<",
  $add: function(_, other) {
    return P.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
  },
  $sub: function(_, other) {
    return P.Duration$(0, 0, this._duration - other.get$_duration(), 0, 0, 0);
  },
  $mul: function(_, factor) {
    if (typeof factor !== "number")
      throw H.iae(factor);
    return P.Duration$(0, 0, C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(this._duration * factor)), 0, 0, 0);
  },
  $lt: function(_, other) {
    return C.JSNumber_methods.$lt(this._duration, other.get$_duration());
  },
  $gt: function(_, other) {
    return C.JSNumber_methods.$gt(this._duration, other.get$_duration());
  },
  $ge: function(_, other) {
    return C.JSNumber_methods.$ge(this._duration, other.get$_duration());
  },
  get$inMilliseconds: function() {
    return C.JSNumber_methods.$tdiv(this._duration, 1000);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isDuration)
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return this._duration & 0x1FFFFFFF;
  },
  compareTo$1: function(_, other) {
    return C.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
  },
  toString$0: function(_) {
    var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new P.Duration_toString_twoDigits();
    t2 = this._duration;
    if (t2 < 0)
      return "-" + H.S(P.Duration$(0, 0, -t2, 0, 0, 0));
    twoDigitMinutes = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 60000000), 60));
    twoDigitSeconds = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 1000000), 60));
    sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSNumber_methods.remainder$1(t2, 1000000));
    return H.S(C.JSNumber_methods.$tdiv(t2, 3600000000)) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
  },
  $isDuration: true,
  static: {
"": "Duration_MICROSECONDS_PER_MILLISECOND,Duration_MILLISECONDS_PER_SECOND,Duration_SECONDS_PER_MINUTE,Duration_MINUTES_PER_HOUR,Duration_HOURS_PER_DAY,Duration_MICROSECONDS_PER_SECOND,Duration_MICROSECONDS_PER_MINUTE,Duration_MICROSECONDS_PER_HOUR,Duration_MICROSECONDS_PER_DAY,Duration_MILLISECONDS_PER_MINUTE,Duration_MILLISECONDS_PER_HOUR,Duration_MILLISECONDS_PER_DAY,Duration_SECONDS_PER_HOUR,Duration_SECONDS_PER_DAY,Duration_MINUTES_PER_DAY,Duration_ZERO",
Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
  return new P.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
}}

},

Duration_toString_sixDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor$n(n);
    if (t1.$ge(n, 100000))
      return H.S(n);
    if (t1.$ge(n, 10000))
      return "0" + H.S(n);
    if (t1.$ge(n, 1000))
      return "00" + H.S(n);
    if (t1.$ge(n, 100))
      return "000" + H.S(n);
    if (t1.$gt(n, 10))
      return "0000" + H.S(n);
    return "00000" + H.S(n);
  },
  $is_args1: true
},

Duration_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if (J.$ge$n(n, 10))
      return H.S(n);
    return "0" + H.S(n);
  },
  $is_args1: true
},

Error: {"": "Object;",
  get$stackTrace: function() {
    return new H._StackTrace(this.$thrownJsError, null);
  },
  $isError: true
},

NullThrownError: {"": "Error;",
  toString$0: function(_) {
    return "Throw of null.";
  }
},

ArgumentError: {"": "Error;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + H.S(t1);
    return "Illegal argument(s)";
  },
  static: {
ArgumentError$: function(message) {
  return new P.ArgumentError(message);
}}

},

RangeError: {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + H.S(this.message);
  },
  static: {
RangeError$value: function(value) {
  return new P.RangeError("value " + H.S(value));
},

RangeError$range: function(value, start, end) {
  return new P.RangeError("value " + H.S(value) + " not in range " + H.S(start) + ".." + H.S(end));
}}

},

UnsupportedError: {"": "Error;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  },
  static: {
UnsupportedError$: function(message) {
  return new P.UnsupportedError(message);
}}

},

UnimplementedError: {"": "Error;message",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
  },
  $isError: true,
  static: {
UnimplementedError$: function(message) {
  return new P.UnimplementedError(message);
}}

},

StateError: {"": "Error;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  },
  static: {
StateError$: function(message) {
  return new P.StateError(message);
}}

},

ConcurrentModificationError: {"": "Error;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
  },
  static: {
ConcurrentModificationError$: function(modifiedObject) {
  return new P.ConcurrentModificationError(modifiedObject);
}}

},

StackOverflowError: {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  },
  get$stackTrace: function() {
    return;
  },
  $isError: true
},

CyclicInitializationError: {"": "Error;variableName",
  toString$0: function(_) {
    return "Reading static variable '" + this.variableName + "' during its initialization";
  },
  static: {
CyclicInitializationError$: function(variableName) {
  return new P.CyclicInitializationError(variableName);
}}

},

_ExceptionImplementation: {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + H.S(t1);
  }
},

FormatException: {"": "Object;message",
  toString$0: function(_) {
    return "FormatException: " + H.S(this.message);
  },
  static: {
FormatException$: function(message) {
  return new P.FormatException(message);
}}

},

Expando: {"": "Object;name",
  toString$0: function(_) {
    return "Expando:" + H.S(this.name);
  },
  $index: function(_, object) {
    var values = H.Primitives_getProperty(object, "expando$values");
    return values == null ? null : H.Primitives_getProperty(values, this._getKey$0(this));
  },
  $indexSet: function(_, object, value) {
    var values = H.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = new P.Object();
      H.Primitives_setProperty(object, "expando$values", values);
    }
    H.Primitives_setProperty(values, this._getKey$0(this), value);
  },
  _getKey$0: function(_) {
    var key, t1;
    key = H.Primitives_getProperty(this, "expando$key");
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = t1 + 1;
      key = "expando$key$" + t1;
      H.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  },
  static: {
"": "Expando__KEY_PROPERTY_NAME,Expando__EXPANDO_PROPERTY_NAME,Expando__keyCount",
}

},

Function: {"": "Object;"},

Iterable: {"": "Object;"},

Iterator: {"": "Object;"},

Map: {"": "Object;", $isMap: true, $asMap: null},

Null: {"": "Object;",
  toString$0: function(_) {
    return "null";
  }
},

Object: {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return H.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return H.Primitives_objectToString(this);
  }
},

StackTrace: {"": "Object;"},

StringBuffer: {"": "Object;_contents<",
  get$length: function(_) {
    return this._contents.length;
  },
  write$1: function(_, obj) {
    var str = typeof obj === "string" ? obj : H.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    iterator = J.get$iterator$ax(objects);
    if (!iterator.moveNext$0())
      return;
    if (separator.length === 0)
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0());
    else {
      this.write$1(this, iterator.get$current());
      for (; iterator.moveNext$0();) {
        this._contents = this._contents + separator;
        str = iterator.get$current();
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  },
  static: {
StringBuffer$: function($content) {
  var t1 = new P.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
}}

},

Symbol: {"": "Object;"}}],
["dart.dom.html", "dart:html", , W, {
CanvasElement_CanvasElement: function(height, width) {
  var e = document.createElement("canvas", null);
  return e;
},

_ElementFactoryProvider_createElement_tag: function(tag, typeExtension) {
  return document.createElement(tag);
},

ImageElement_ImageElement: function(height, src, width) {
  var e = document.createElement("img", null);
  return e;
},

_JenkinsSmiHash_combine: function(hash, value) {
  hash = 536870911 & hash + value;
  hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
  return (hash ^ C.JSInt_methods.$shr(hash, 6)) >>> 0;
},

_JenkinsSmiHash_finish: function(hash) {
  hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash = (hash ^ C.JSInt_methods.$shr(hash, 11)) >>> 0;
  return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
},

_convertNativeToDart_Window: function(win) {
  if (win == null)
    return;
  return W._DOMWindowCrossFrame__createSafe(win);
},

_wrapZone: function(callback) {
  var t1 = $.Zone__current;
  if (t1 === C.C__RootZone)
    return callback;
  return t1.bindUnaryCallback$2$runGuarded(callback, true);
},

HtmlElement: {"": "Element;", "%": "HTMLAppletElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBaseFontElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLDivElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLabelElement|HTMLLegendElement|HTMLMarqueeElement|HTMLMenuElement|HTMLModElement|HTMLOptGroupElement|HTMLParagraphElement|HTMLPreElement|HTMLQuoteElement|HTMLShadowElement|HTMLSpanElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTitleElement|HTMLUListElement|HTMLUnknownElement;HTMLElement"},

_EntryArray: {"": "Interceptor;", $isList: true,
  $asList: function() {
    return [W.Entry];
  },
  $isEfficientLength: true,
  "%": "EntryArray"
},

AesKeyGenParams: {"": "Algorithm;length=", "%": "AesKeyGenParams"},

Algorithm: {"": "Interceptor;", "%": "AesCbcParams|HmacParams|RsaKeyGenParams|RsaSsaParams;Algorithm"},

AnchorElement: {"": "HtmlElement;type=",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "HTMLAnchorElement"
},

BarProp: {"": "Interceptor;visible=", "%": "BarProp"},

Blob: {"": "Interceptor;type=", $isBlob: true, "%": ";Blob"},

BodyElement: {"": "HtmlElement;",
  get$onError: function(receiver) {
    var t1 = new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_error._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  get$onLoad: function(receiver) {
    var t1 = new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_load._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "%": "HTMLBodyElement"
},

ButtonElement: {"": "HtmlElement;name=,type=,value%", "%": "HTMLButtonElement"},

CanvasElement: {"": "HtmlElement;height%,width%",
  getContext$2: function(receiver, contextId, attrs) {
    return receiver.getContext(contextId, P.convertDartToNative_Dictionary(attrs));
  },
  getContext3d$6$alpha$antialias$depth$premultipliedAlpha$preserveDrawingBuffer$stencil: function(receiver, alpha, antialias, depth, premultipliedAlpha, preserveDrawingBuffer, stencil) {
    var options, context;
    options = H.fillLiteralMap(["alpha", alpha, "depth", depth, "stencil", stencil, "antialias", antialias, "premultipliedAlpha", premultipliedAlpha, "preserveDrawingBuffer", preserveDrawingBuffer], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    context = this.getContext$2(receiver, "webgl", options);
    return context == null ? this.getContext$2(receiver, "experimental-webgl", options) : context;
  },
  getContext3d$5$alpha$antialias$premultipliedAlpha$preserveDrawingBuffer$stencil: function($receiver, alpha, antialias, premultipliedAlpha, preserveDrawingBuffer, stencil) {
    return this.getContext3d$6$alpha$antialias$depth$premultipliedAlpha$preserveDrawingBuffer$stencil($receiver, alpha, antialias, true, premultipliedAlpha, preserveDrawingBuffer, stencil);
  },
  $isCanvasElement: true,
  "%": "HTMLCanvasElement"
},

CanvasRenderingContext: {"": "Interceptor;", "%": ";CanvasRenderingContext"},

CanvasRenderingContext2D: {"": "CanvasRenderingContext;",
  lineWidth$1: function($receiver, arg0) {
    return this.lineWidth.call$1(arg0);
  },
  "%": "CanvasRenderingContext2D"
},

CharacterData: {"": "Node;length=", "%": "CDATASection|CharacterData|Comment|ProcessingInstruction|Text"},

CryptoKey: {"": "Interceptor;type=", "%": "Key"},

CssRule: {"": "Interceptor;type=", "%": "CSSCharsetRule|CSSFontFaceRule|CSSHostRule|CSSImportRule|CSSKeyframeRule|CSSKeyframesRule|CSSMediaRule|CSSPageRule|CSSRule|CSSStyleRule|CSSSupportsRule|CSSUnknownRule|CSSViewportRule|MozCSSKeyframeRule|MozCSSKeyframesRule|WebKitCSSFilterRule|WebKitCSSKeyframeRule|WebKitCSSKeyframesRule|WebKitCSSRegionRule"},

CssStyleDeclaration: {"": "Interceptor_CssStyleDeclarationBase;length=",
  getPropertyValue$1: function(receiver, propertyName) {
    var propValue = receiver.getPropertyValue(propertyName);
    return propValue != null ? propValue : "";
  },
  setProperty$3: function(receiver, propertyName, value, priority) {
    var exception;
    try {
      if (priority == null)
        priority = "";
      receiver.setProperty(propertyName, value, priority);
      if (!!receiver.setAttribute)
        receiver.setAttribute(propertyName, value);
    } catch (exception) {
      H.unwrapException(exception);
    }

  },
  "%": "CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties"
},

DataTransferItem: {"": "Interceptor;type=", "%": "DataTransferItem"},

DataTransferItemList: {"": "Interceptor;length=",
  add$2: function(receiver, data_OR_file, type) {
    return receiver.add(data_OR_file, type);
  },
  add$1: function($receiver, data_OR_file) {
    return $receiver.add(data_OR_file);
  },
  remove$1: function(receiver, index) {
    return receiver.remove(index);
  },
  "%": "DataTransferItemList"
},

DeviceAcceleration: {"": "Interceptor;x=,y=,z=", "%": "DeviceAcceleration"},

DomException: {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "DOMException"
},

DomSettableTokenList: {"": "DomTokenList;value%", "%": "DOMSettableTokenList"},

DomStringList: {"": "Interceptor_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [J.JSString];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "DOMStringList"
},

DomTokenList: {"": "Interceptor;length=",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": ";DOMTokenList"
},

Element: {"": "Node;id=",
  get$attributes: function(receiver) {
    return new W._ElementAttributeMap(receiver);
  },
  toString$0: function(receiver) {
    return receiver.localName;
  },
  get$onError: function(receiver) {
    var t1 = new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_error._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  get$onLoad: function(receiver) {
    var t1 = new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_load._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  "%": ";Element"
},

EmbedElement: {"": "HtmlElement;height%,name=,src},type=,width%", "%": "HTMLEmbedElement"},

Entry: {"": "Interceptor;", "%": "DirectoryEntry|Entry|FileEntry"},

ErrorEvent: {"": "Event;error=", "%": "ErrorEvent"},

Event: {"": "Interceptor;type=", "%": "AudioProcessingEvent|AutocompleteErrorEvent|BeforeLoadEvent|BeforeUnloadEvent|CSSFontFaceLoadEvent|CloseEvent|CompositionEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|DragEvent|FocusEvent|HashChangeEvent|IDBVersionChangeEvent|KeyboardEvent|MIDIConnectionEvent|MIDIMessageEvent|MSPointerEvent|MediaKeyEvent|MediaKeyMessageEvent|MediaKeyNeededEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MouseEvent|MouseScrollEvent|MouseWheelEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PointerEvent|PopStateEvent|ProgressEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|ResourceProgressEvent|SVGZoomEvent|SecurityPolicyViolationEvent|SpeechInputEvent|SpeechRecognitionEvent|SpeechSynthesisEvent|StorageEvent|TextEvent|TouchEvent|TrackEvent|TransitionEvent|UIEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent|WheelEvent|XMLHttpRequestProgressEvent;Event"},

EventTarget: {"": "Interceptor;",
  addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
  },
  removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
  },
  "%": "ApplicationCache|AudioContext|DOMApplicationCache|DedicatedWorkerGlobalScope|EventSource|FontFaceSet|IDBDatabase|MIDIAccess|MediaController|MediaSource|MessagePort|Notification|OfflineAudioContext|OfflineResourceList|Performance|RTCDTMFSender|RTCPeerConnection|SharedWorker|SharedWorkerGlobalScope|SpeechRecognition|SpeechSynthesisUtterance|WebKitMediaSource|WebKitNamedFlow|WebKitSourceBufferList|Worker|WorkerGlobalScope|mozRTCPeerConnection|webkitAudioContext;EventTarget;EventTarget_ListMixin|EventTarget_ListMixin_ImmutableListMixin|EventTarget_ListMixin0|EventTarget_ListMixin_ImmutableListMixin0"
},

FieldSetElement: {"": "HtmlElement;name=,type=", "%": "HTMLFieldSetElement"},

File: {"": "Blob;", $isFile: true, "%": "File"},

FileList: {"": "Interceptor_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $isFileList: true,
  $asList: function() {
    return [W.File];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "FileList"
},

FileReader: {"": "EventTarget;error=", "%": "FileReader"},

FileStream: {"": "Interceptor;type=", "%": "Stream"},

FileWriter: {"": "EventTarget;error=,length=",
  write$1: function(receiver, data) {
    return receiver.write(data);
  },
  "%": "FileWriter"
},

FormElement: {"": "HtmlElement;length=,name=", "%": "HTMLFormElement"},

Gamepad: {"": "Interceptor;id=", "%": "Gamepad"},

History: {"": "Interceptor;length=", "%": "History"},

HmacKeyParams: {"": "Algorithm;length=", "%": "HmacKeyParams"},

HtmlCollection: {"": "Interceptor_ListMixin_ImmutableListMixin1;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Node];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
},

HttpRequest: {"": "HttpRequestEventTarget;",
  send$1: function(receiver, data) {
    return receiver.send(data);
  },
  "%": "XMLHttpRequest"
},

HttpRequestEventTarget: {"": "EventTarget;", "%": "XMLHttpRequestEventTarget|XMLHttpRequestUpload;XMLHttpRequestEventTarget"},

IFrameElement: {"": "HtmlElement;height%,name=,src},width%", "%": "HTMLIFrameElement"},

ImageData: {"": "Interceptor;", $isImageData: true, "%": "ImageData"},

ImageElement: {"": "HtmlElement;crossOrigin},height%,src},width%", $isImageElement: true, "%": "HTMLImageElement"},

InputElement: {"": "HtmlElement;height%,name=,src},type=,value%,width%", $isNode: true, "%": "HTMLInputElement"},

KeygenElement: {"": "HtmlElement;name=,type=", "%": "HTMLKeygenElement"},

LIElement: {"": "HtmlElement;value%", "%": "HTMLLIElement"},

LinkElement: {"": "HtmlElement;type=", "%": "HTMLLinkElement"},

Location: {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "Location"
},

MapElement: {"": "HtmlElement;name=", "%": "HTMLMapElement"},

MediaElement: {"": "HtmlElement;error=,src}", "%": "HTMLAudioElement;HTMLMediaElement"},

MediaKeySession: {"": "EventTarget;error=", "%": "MediaKeySession"},

MediaList: {"": "Interceptor;length=", "%": "MediaList"},

MediaStream: {"": "EventTarget;id=", "%": "MediaStream"},

MediaStreamTrack: {"": "EventTarget;id=", "%": "MediaStreamTrack"},

MetaElement: {"": "HtmlElement;content=,name=", "%": "HTMLMetaElement"},

MeterElement: {"": "HtmlElement;value%", "%": "HTMLMeterElement"},

MidiOutput: {"": "MidiPort;",
  send$2: function(receiver, data, timestamp) {
    return receiver.send(data, timestamp);
  },
  send$1: function($receiver, data) {
    return $receiver.send(data);
  },
  "%": "MIDIOutput"
},

MidiPort: {"": "EventTarget;id=,type=", "%": "MIDIInput;MIDIPort"},

MimeType: {"": "Interceptor;type=", "%": "MimeType"},

MimeTypeArray: {"": "Interceptor_ListMixin_ImmutableListMixin2;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.MimeType];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "MimeTypeArray"
},

MutationRecord: {"": "Interceptor;type=", "%": "MutationRecord"},

NamedFlowCollection: {"": "Interceptor;length=", "%": "WebKitNamedFlowCollection"},

Node: {"": "EventTarget;parent:parentElement=",
  get$nodes: function(receiver) {
    return new W._ChildNodeListLazy(receiver);
  },
  toString$0: function(receiver) {
    var t1 = receiver.nodeValue;
    return t1 == null ? J.Interceptor.prototype.toString$0.call(this, receiver) : t1;
  },
  $isNode: true,
  "%": "Document|DocumentFragment|DocumentType|Entity|HTMLDocument|Notation|SVGDocument|ShadowRoot;Node"
},

NodeList: {"": "Interceptor_ListMixin_ImmutableListMixin3;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Node];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "NodeList|RadioNodeList"
},

OListElement: {"": "HtmlElement;type=", "%": "HTMLOListElement"},

ObjectElement: {"": "HtmlElement;height%,name=,type=,width%", "%": "HTMLObjectElement"},

OptionElement: {"": "HtmlElement;value%", "%": "HTMLOptionElement"},

OutputElement: {"": "HtmlElement;name=,type=,value%", "%": "HTMLOutputElement"},

ParamElement: {"": "HtmlElement;name=,value%", "%": "HTMLParamElement"},

PerformanceNavigation: {"": "Interceptor;type=", "%": "PerformanceNavigation"},

Plugin: {"": "Interceptor;length=", "%": "Plugin"},

PluginArray: {"": "Interceptor_ListMixin_ImmutableListMixin4;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Plugin];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "PluginArray"
},

ProgressElement: {"": "HtmlElement;value%", "%": "HTMLProgressElement"},

Range: {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "Range"
},

RtcDataChannel: {"": "EventTarget;id=",
  send$1: function(receiver, data) {
    return receiver.send(data);
  },
  "%": "DataChannel|RTCDataChannel"
},

RtcSessionDescription: {"": "Interceptor;type=", "%": "RTCSessionDescription|mozRTCSessionDescription"},

RtcStatsReport: {"": "Interceptor;id=,type=", "%": "RTCStatsReport"},

ScriptElement: {"": "HtmlElement;crossOrigin},src},type=", "%": "HTMLScriptElement"},

SelectElement: {"": "HtmlElement;length%,name=,type=,value%", "%": "HTMLSelectElement"},

Selection: {"": "Interceptor;type=",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "Selection"
},

SourceBuffer: {"": "EventTarget;", "%": "SourceBuffer"},

SourceBufferList: {"": "EventTarget_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.SourceBuffer];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "SourceBufferList"
},

SourceElement: {"": "HtmlElement;src},type=", "%": "HTMLSourceElement"},

SourceInfo: {"": "Interceptor;id=", "%": "SourceInfo"},

SpeechGrammar: {"": "Interceptor;", "%": "SpeechGrammar"},

SpeechGrammarList: {"": "Interceptor_ListMixin_ImmutableListMixin5;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.SpeechGrammar];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "SpeechGrammarList"
},

SpeechInputResult: {"": "Interceptor;", "%": "SpeechInputResult"},

SpeechRecognitionError: {"": "Event;error=", "%": "SpeechRecognitionError"},

SpeechRecognitionResult: {"": "Interceptor;length=", "%": "SpeechRecognitionResult"},

Storage: {"": "Interceptor;",
  $index: function(receiver, key) {
    return receiver.getItem(key);
  },
  $indexSet: function(receiver, key, value) {
    receiver.setItem(key, value);
  },
  remove$1: function(receiver, key) {
    var value = receiver.getItem(key);
    receiver.removeItem(key);
    return value;
  },
  forEach$1: function(receiver, f) {
    var i, key;
    for (i = 0; true; ++i) {
      key = receiver.key(i);
      if (key == null)
        return;
      f.call$2(key, receiver.getItem(key));
    }
  },
  get$keys: function(receiver) {
    var keys = [];
    this.forEach$1(receiver, new W.Storage_keys_closure(keys));
    return keys;
  },
  get$values: function(receiver) {
    var values = [];
    this.forEach$1(receiver, new W.Storage_values_closure(values));
    return values;
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $isMap: true,
  $asMap: function() {
    return [J.JSString, J.JSString];
  },
  "%": "Storage"
},

StyleElement: {"": "HtmlElement;type=", "%": "HTMLStyleElement"},

StyleMedia: {"": "Interceptor;type=", "%": "StyleMedia"},

StyleSheet: {"": "Interceptor;type=", "%": "CSSStyleSheet|StyleSheet"},

TemplateElement: {"": "HtmlElement;content=", "%": "HTMLTemplateElement"},

TextAreaElement: {"": "HtmlElement;name=,type=,value%", "%": "HTMLTextAreaElement"},

TextTrack: {"": "EventTarget;", "%": "TextTrack"},

TextTrackCue: {"": "EventTarget;id=", "%": "TextTrackCue"},

TextTrackCueList: {"": "Interceptor_ListMixin_ImmutableListMixin6;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.TextTrackCue];
  },
  $isJavaScriptIndexingBehavior: true,
  $isList: true,
  $isEfficientLength: true,
  "%": "TextTrackCueList"
},

TextTrackList: {"": "EventTarget_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.TextTrack];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "TextTrackList"
},

TimeRanges: {"": "Interceptor;length=", "%": "TimeRanges"},

Touch: {"": "Interceptor;", "%": "Touch"},

TouchList: {"": "Interceptor_ListMixin_ImmutableListMixin7;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Touch];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "TouchList"
},

TrackElement: {"": "HtmlElement;src}", "%": "HTMLTrackElement"},

VideoElement: {"": "MediaElement;height%,width%", $isVideoElement: true, "%": "HTMLVideoElement"},

WebSocket: {"": "EventTarget;",
  send$1: function(receiver, data) {
    return receiver.send(data);
  },
  "%": "WebSocket"
},

Window: {"": "EventTarget;",
  _requestAnimationFrame$1: function(receiver, callback) {
    return receiver.requestAnimationFrame(H.convertDartClosureToJS(callback, 1));
  },
  _ensureRequestAnimationFrame$0: function(receiver) {
    if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
      return;
      (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(receiver);
  },
  get$parent: function(receiver) {
    return W._convertNativeToDart_Window(receiver.parent);
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "DOMWindow|Window"
},

_Attr: {"": "Node;name=,value%", "%": "Attr"},

_CSSValue: {"": "Interceptor;", "%": "CSSPrimitiveValue;CSSValue;_CSSValue_ListMixin|_CSSValue_ListMixin_ImmutableListMixin"},

_ClientRect: {"": "Interceptor;height=,left=,top=,width=",
  toString$0: function(receiver) {
    return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
  },
  $eq: function(receiver, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    t1 = J.getInterceptor$x(other);
    if (typeof other !== "object" || other === null || !t1.$isRectangle)
      return false;
    t2 = receiver.left;
    t3 = t1.get$left(other);
    if (t2 == null ? t3 == null : t2 === t3) {
      t2 = receiver.top;
      t3 = t1.get$top(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = receiver.width;
        t3 = t1.get$width(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.height;
          t1 = t1.get$height(other);
          t1 = t2 == null ? t1 == null : t2 === t1;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(receiver) {
    var t1, t2, t3, t4;
    t1 = J.get$hashCode$(receiver.left);
    t2 = J.get$hashCode$(receiver.top);
    t3 = J.get$hashCode$(receiver.width);
    t4 = J.get$hashCode$(receiver.height);
    return W._JenkinsSmiHash_finish(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4));
  },
  $isRectangle: true,
  $asRectangle: function() {
    return [null];
  },
  "%": "ClientRect|DOMRect"
},

_ClientRectList: {"": "Interceptor_ListMixin_ImmutableListMixin8;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [P.Rectangle];
  },
  $isJavaScriptIndexingBehavior: true,
  $isList: true,
  $isEfficientLength: true,
  "%": "ClientRectList"
},

_CssRuleList: {"": "Interceptor_ListMixin_ImmutableListMixin9;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.CssRule];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "CSSRuleList"
},

_CssValueList: {"": "_CSSValue_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W._CSSValue];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "CSSValueList|WebKitCSSFilterValue|WebKitCSSMixFunctionValue|WebKitCSSTransformValue"
},

_DomPoint: {"": "Interceptor;x=,y=", "%": "WebKitPoint"},

_GamepadList: {"": "Interceptor_ListMixin_ImmutableListMixin10;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Gamepad];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "GamepadList"
},

_NamedNodeMap: {"": "Interceptor_ListMixin_ImmutableListMixin11;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Node];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "MozNamedAttrMap|NamedNodeMap"
},

_SpeechInputResultList: {"": "Interceptor_ListMixin_ImmutableListMixin12;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.SpeechInputResult];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "SpeechInputResultList"
},

_SpeechRecognitionResultList: {"": "Interceptor_ListMixin_ImmutableListMixin13;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.SpeechRecognitionResult];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "SpeechRecognitionResultList"
},

_StyleSheetList: {"": "Interceptor_ListMixin_ImmutableListMixin14;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.StyleSheet];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "StyleSheetList"
},

Interceptor_CssStyleDeclarationBase: {"": "Interceptor+CssStyleDeclarationBase;"},

CssStyleDeclarationBase: {"": "Object;",
  get$color: function(receiver) {
    return this.getPropertyValue$1(receiver, "color");
  },
  get$content: function(receiver) {
    return this.getPropertyValue$1(receiver, "content");
  },
  set$height: function(receiver, value) {
    this.setProperty$3(receiver, "height", value, "");
  },
  set$width: function(receiver, value) {
    this.setProperty$3(receiver, "width", value, "");
  }
},

Interceptor_ListMixin: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin: {"": "Interceptor_ListMixin+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin0: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin0: {"": "Interceptor_ListMixin0+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin1: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin1: {"": "Interceptor_ListMixin1+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin2: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin2: {"": "Interceptor_ListMixin2+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

_ChildNodeListLazy: {"": "ListBase;_this",
  add$1: function(_, value) {
    this._this.appendChild(value);
  },
  removeAt$1: function(_, index) {
    var t1, t2, result;
    t1 = this._this;
    t2 = t1.childNodes;
    if (index >>> 0 !== index || index >= t2.length)
      throw H.ioore(t2, index);
    result = t2[index];
    t1.removeChild(result);
    return result;
  },
  remove$1: function(_, object) {
    var t1 = J.getInterceptor(object);
    if (typeof object !== "object" || object === null || !t1.$isNode)
      return false;
    t1 = this._this;
    if (t1 !== object.parentNode)
      return false;
    t1.removeChild(object);
    return true;
  },
  $indexSet: function(_, index, value) {
    var t1, t2;
    t1 = this._this;
    t2 = t1.childNodes;
    if (index >>> 0 !== index || index >= t2.length)
      throw H.ioore(t2, index);
    t1.replaceChild(value, t2[index]);
  },
  get$iterator: function(_) {
    return C.NodeList_methods.get$iterator(this._this.childNodes);
  },
  sort$1: function(_, compare) {
    throw H.wrapException(P.UnsupportedError$("Cannot sort Node list"));
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw H.wrapException(P.UnsupportedError$("Cannot setRange on Node list"));
  },
  get$length: function(_) {
    return this._this.childNodes.length;
  },
  set$length: function(_, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot set length on immutable List."));
  },
  $index: function(_, index) {
    var t1 = this._this.childNodes;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  $asList: function() {
    return [W.Node];
  }
},

Interceptor_ListMixin3: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin3: {"": "Interceptor_ListMixin3+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin4: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin4: {"": "Interceptor_ListMixin4+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

EventTarget_ListMixin: {"": "EventTarget+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

EventTarget_ListMixin_ImmutableListMixin: {"": "EventTarget_ListMixin+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin5: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin5: {"": "Interceptor_ListMixin5+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Storage_keys_closure: {"": "Closure;keys_0",
  call$2: function(k, v) {
    return this.keys_0.push(k);
  },
  $is_args2: true
},

Storage_values_closure: {"": "Closure;values_0",
  call$2: function(k, v) {
    return this.values_0.push(v);
  },
  $is_args2: true
},

Interceptor_ListMixin6: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin6: {"": "Interceptor_ListMixin6+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

EventTarget_ListMixin0: {"": "EventTarget+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

EventTarget_ListMixin_ImmutableListMixin0: {"": "EventTarget_ListMixin0+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin7: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin7: {"": "Interceptor_ListMixin7+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin8: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin8: {"": "Interceptor_ListMixin8+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin9: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin9: {"": "Interceptor_ListMixin9+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

_CSSValue_ListMixin: {"": "_CSSValue+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

_CSSValue_ListMixin_ImmutableListMixin: {"": "_CSSValue_ListMixin+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin10: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin10: {"": "Interceptor_ListMixin10+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin11: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin11: {"": "Interceptor_ListMixin11+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin12: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin12: {"": "Interceptor_ListMixin12+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin13: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin13: {"": "Interceptor_ListMixin13+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin14: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin14: {"": "Interceptor_ListMixin14+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

_AttributeMap: {"": "Object;",
  forEach$1: function(_, f) {
    var t1, key;
    for (t1 = this.get$keys(this), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
      key = t1._current;
      f.call$2(key, this.$index(this, key));
    }
  },
  get$keys: function(_) {
    var attributes, keys, len, i, t1;
    attributes = this._element.attributes;
    keys = P.List_List(null, J.JSString);
    H.setRuntimeTypeInfo(keys, [J.JSString]);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw H.ioore(attributes, i);
      t1 = attributes[i];
      if (this._matches$1(t1))
        keys.push(J.get$name$x(t1));
    }
    return keys;
  },
  get$values: function(_) {
    var attributes, values, len, i, t1;
    attributes = this._element.attributes;
    values = P.List_List(null, J.JSString);
    H.setRuntimeTypeInfo(values, [J.JSString]);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw H.ioore(attributes, i);
      t1 = attributes[i];
      if (this._matches$1(t1))
        values.push(J.get$value$x(t1));
    }
    return values;
  },
  $isMap: true,
  $asMap: function() {
    return [J.JSString, J.JSString];
  }
},

_ElementAttributeMap: {"": "_AttributeMap;_element",
  $index: function(_, key) {
    return this._element.getAttribute(key);
  },
  $indexSet: function(_, key, value) {
    this._element.setAttribute(key, value);
  },
  remove$1: function(_, key) {
    var t1, value;
    t1 = this._element;
    value = t1.getAttribute(key);
    t1.removeAttribute(key);
    return value;
  },
  get$length: function(_) {
    return this.get$keys(this).length;
  },
  _matches$1: function(node) {
    return node.namespaceURI == null;
  }
},

EventStreamProvider: {"": "Object;_eventType"},

_EventStream: {"": "Stream;_target,_eventType,_useCapture",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1 = new W._EventStreamSubscription(0, this._target, this._eventType, W._wrapZone(onData), this._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_EventStream", 0)]);
    t1._tryResume$0();
    return t1;
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  $asStream: null
},

_ElementEventStreamImpl: {"": "_EventStream;_target,_eventType,_useCapture", $as_EventStream: null},

_EventStreamSubscription: {"": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
  cancel$0: function(_) {
    if (this._target == null)
      return;
    this._unlisten$0();
    this._target = null;
    this._onData = null;
  },
  pause$1: function(_, resumeSignal) {
    if (this._target == null)
      return;
    this._pauseCount = this._pauseCount + 1;
    this._unlisten$0();
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  resume$0: function(_) {
    if (this._target == null || this._pauseCount <= 0)
      return;
    this._pauseCount = this._pauseCount - 1;
    this._tryResume$0();
  },
  _tryResume$0: function() {
    var t1 = this._onData;
    if (t1 != null && this._pauseCount <= 0)
      J.addEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
  },
  _unlisten$0: function() {
    var t1 = this._onData;
    if (t1 != null)
      J.removeEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
  },
  $asStreamSubscription: null
},

ImmutableListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return W.FixedSizeListIterator$(receiver);
  },
  add$1: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
  },
  sort$1: function(receiver, compare) {
    throw H.wrapException(P.UnsupportedError$("Cannot sort immutable List."));
  },
  removeAt$1: function(receiver, pos) {
    throw H.wrapException(P.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw H.wrapException(P.UnsupportedError$("Cannot remove from immutable List."));
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw H.wrapException(P.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: true,
  $asList: null,
  $isEfficientLength: true
},

FixedSizeListIterator: {"": "Object;_array,_html$_length,_position,_html$_current",
  moveNext$0: function() {
    var t1, nextPosition;
    t1 = this._position;
    if (typeof t1 !== "number")
      throw t1.$add();
    nextPosition = t1 + 1;
    t1 = this._html$_length;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    if (nextPosition < t1) {
      this._html$_current = J.$index$asx(this._array, nextPosition);
      this._position = nextPosition;
      return true;
    }
    this._html$_current = null;
    this._position = t1;
    return false;
  },
  get$current: function() {
    return this._html$_current;
  },
  static: {
FixedSizeListIterator$: function(array) {
  return new W.FixedSizeListIterator(array, J.get$length$asx(array), -1, null);
}}

},

_DOMWindowCrossFrame: {"": "Object;_window",
  get$parent: function(_) {
    return W._DOMWindowCrossFrame__createSafe(this._window.parent);
  },
  static: {
_DOMWindowCrossFrame__createSafe: function(w) {
  if (w === window)
    return w;
  else
    return new W._DOMWindowCrossFrame(w);
}}

}}],
["dart.dom.indexed_db", "dart:indexed_db", , P, {
_completeRequest: function(request) {
  var t1, completer, t2;
  t1 = null;
  completer = new P._SyncCompleter(P._Future$(t1));
  H.setRuntimeTypeInfo(completer, [t1]);
  request.toString;
  t1 = new W._EventStream(request, C.EventStreamProvider_success._eventType, false);
  H.setRuntimeTypeInfo(t1, [null]);
  t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new P._completeRequest_closure(request, completer)), t1._useCapture);
  H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
  t2._tryResume$0();
  t2 = new W._EventStream(request, C.EventStreamProvider_error._eventType, false);
  H.setRuntimeTypeInfo(t2, [null]);
  t1 = completer.get$completeError();
  t1 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(t1), t2._useCapture);
  H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
  t1._tryResume$0();
  return completer.future;
},

Cursor: {"": "Interceptor;",
  next$1: function(receiver, key) {
    if (key == null)
      receiver.continue();
    else
      receiver.continue(key);
  },
  get$next: function(_receiver) {
    return new P.BoundClosure$i1(this, P.Cursor.prototype.next$1, _receiver, "next$1");
  },
  "%": ";IDBCursor"
},

CursorWithValue: {"": "Cursor;",
  get$value: function(receiver) {
    return P.convertNativeToDart_AcceptStructuredClone(receiver.value, false);
  },
  "%": "IDBCursorWithValue"
},

Index: {"": "Interceptor;", "%": "IDBIndex"},

ObjectStore: {"": "Interceptor;",
  add$2: function(receiver, value, key) {
    var request, e, stacktrace, t1, exception;
    try {
      request = null;
      if (key != null)
        request = this._indexed_db$_add$2(receiver, value, key);
      else
        request = this._indexed_db$_add$1(receiver, value);
      t1 = P._completeRequest(request);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      stacktrace = new H._StackTrace(exception, null);
      return P._Future$immediateError(e, stacktrace, null);
    }

  },
  add$1: function($receiver, value) {
    return this.add$2($receiver, value, null);
  },
  _indexed_db$_add$2: function(receiver, value, key) {
    return receiver.add(P._convertDartToNative_PrepareForStructuredClone(value));
  },
  _indexed_db$_add$1: function($receiver, value) {
    return this._indexed_db$_add$2($receiver, value, null);
  },
  "%": "IDBObjectStore"
},

Request: {"": "EventTarget;error=", "%": "IDBOpenDBRequest|IDBRequest|IDBVersionChangeRequest"},

Transaction: {"": "EventTarget;error=", "%": "IDBTransaction"},

_completeRequest_closure: {"": "Closure;request_0,completer_1",
  call$1: function(e) {
    var t1, t2;
    t1 = P.convertNativeToDart_AcceptStructuredClone(this.request_0.result, false);
    t2 = this.completer_1.future;
    if (t2._state !== 0)
      H.throwExpression(P.StateError$("Future already completed"));
    t2._complete$1(t1);
  },
  $is_args1: true
}}],
["dart.dom.svg", "dart:svg", , P, {
Angle: {"": "Interceptor;value%", "%": "SVGAngle"},

CircleElement: {"": "GraphicsElement;r=", "%": "SVGCircleElement"},

ElementInstance: {"": "EventTarget;", "%": "SVGElementInstance"},

FEBlendElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEBlendElement"},

FEColorMatrixElement: {"": "SvgElement;type=,height=,width=,x=,y=", "%": "SVGFEColorMatrixElement"},

FEComponentTransferElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEComponentTransferElement"},

FECompositeElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFECompositeElement"},

FEConvolveMatrixElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEConvolveMatrixElement"},

FEDiffuseLightingElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEDiffuseLightingElement"},

FEDisplacementMapElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEDisplacementMapElement"},

FEFloodElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEFloodElement"},

FEGaussianBlurElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEGaussianBlurElement"},

FEImageElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEImageElement"},

FEMergeElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEMergeElement"},

FEMorphologyElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEMorphologyElement"},

FEOffsetElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFEOffsetElement"},

FEPointLightElement: {"": "SvgElement;x=,y=,z=", "%": "SVGFEPointLightElement"},

FESpecularLightingElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFESpecularLightingElement"},

FESpotLightElement: {"": "SvgElement;x=,y=,z=", "%": "SVGFESpotLightElement"},

FETileElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFETileElement"},

FETurbulenceElement: {"": "SvgElement;type=,height=,width=,x=,y=", "%": "SVGFETurbulenceElement"},

FilterElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGFilterElement"},

ForeignObjectElement: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGForeignObjectElement"},

GraphicsElement: {"": "SvgElement;", "%": "SVGAElement|SVGClipPathElement|SVGDefsElement|SVGEllipseElement|SVGGElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement|SVGSwitchElement;SVGGraphicsElement"},

ImageElement0: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGImageElement"},

Length: {"": "Interceptor;value%", "%": "SVGLength"},

LengthList: {"": "Interceptor_ListMixin_ImmutableListMixin15;",
  $index: function(receiver, index) {
    var t1 = receiver.numberOfItems;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver.getItem(index);
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $asList: function() {
    return [P.Length];
  },
  $isList: true,
  $isEfficientLength: true,
  "%": "SVGLengthList"
},

MaskElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGMaskElement"},

Matrix: {"": "Interceptor;", "%": "SVGMatrix"},

Number: {"": "Interceptor;value%", "%": "SVGNumber"},

NumberList: {"": "Interceptor_ListMixin_ImmutableListMixin16;",
  $index: function(receiver, index) {
    var t1 = receiver.numberOfItems;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver.getItem(index);
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $asList: function() {
    return [P.Number];
  },
  $isList: true,
  $isEfficientLength: true,
  "%": "SVGNumberList"
},

PathSeg: {"": "Interceptor;", "%": "SVGPathSegClosePath;SVGPathSeg"},

PathSegArcAbs: {"": "PathSeg;x=,y=", "%": "SVGPathSegArcAbs"},

PathSegArcRel: {"": "PathSeg;x=,y=", "%": "SVGPathSegArcRel"},

PathSegCurvetoCubicAbs: {"": "PathSeg;x=,y=", "%": "SVGPathSegCurvetoCubicAbs"},

PathSegCurvetoCubicRel: {"": "PathSeg;x=,y=", "%": "SVGPathSegCurvetoCubicRel"},

PathSegCurvetoCubicSmoothAbs: {"": "PathSeg;x=,y=", "%": "SVGPathSegCurvetoCubicSmoothAbs"},

PathSegCurvetoCubicSmoothRel: {"": "PathSeg;x=,y=", "%": "SVGPathSegCurvetoCubicSmoothRel"},

PathSegCurvetoQuadraticAbs: {"": "PathSeg;x=,y=", "%": "SVGPathSegCurvetoQuadraticAbs"},

PathSegCurvetoQuadraticRel: {"": "PathSeg;x=,y=", "%": "SVGPathSegCurvetoQuadraticRel"},

PathSegCurvetoQuadraticSmoothAbs: {"": "PathSeg;x=,y=", "%": "SVGPathSegCurvetoQuadraticSmoothAbs"},

PathSegCurvetoQuadraticSmoothRel: {"": "PathSeg;x=,y=", "%": "SVGPathSegCurvetoQuadraticSmoothRel"},

PathSegLinetoAbs: {"": "PathSeg;x=,y=", "%": "SVGPathSegLinetoAbs"},

PathSegLinetoHorizontalAbs: {"": "PathSeg;x=", "%": "SVGPathSegLinetoHorizontalAbs"},

PathSegLinetoHorizontalRel: {"": "PathSeg;x=", "%": "SVGPathSegLinetoHorizontalRel"},

PathSegLinetoRel: {"": "PathSeg;x=,y=", "%": "SVGPathSegLinetoRel"},

PathSegLinetoVerticalAbs: {"": "PathSeg;y=", "%": "SVGPathSegLinetoVerticalAbs"},

PathSegLinetoVerticalRel: {"": "PathSeg;y=", "%": "SVGPathSegLinetoVerticalRel"},

PathSegList: {"": "Interceptor_ListMixin_ImmutableListMixin17;",
  $index: function(receiver, index) {
    var t1 = receiver.numberOfItems;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver.getItem(index);
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $asList: function() {
    return [P.PathSeg];
  },
  $isList: true,
  $isEfficientLength: true,
  "%": "SVGPathSegList"
},

PathSegMovetoAbs: {"": "PathSeg;x=,y=", "%": "SVGPathSegMovetoAbs"},

PathSegMovetoRel: {"": "PathSeg;x=,y=", "%": "SVGPathSegMovetoRel"},

PatternElement: {"": "SvgElement;height=,width=,x=,y=", "%": "SVGPatternElement"},

Point: {"": "Interceptor;x=,y=", "%": "SVGPoint"},

RadialGradientElement: {"": "_GradientElement;r=", "%": "SVGRadialGradientElement"},

Rect: {"": "Interceptor;x=,y=", "%": "SVGRect"},

RectElement: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGRectElement"},

ScriptElement0: {"": "SvgElement;type=", "%": "SVGScriptElement"},

StringList: {"": "Interceptor_ListMixin_ImmutableListMixin18;",
  $index: function(receiver, index) {
    var t1 = receiver.numberOfItems;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver.getItem(index);
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $asList: function() {
    return [J.JSString];
  },
  $isList: true,
  $isEfficientLength: true,
  "%": "SVGStringList"
},

StyleElement0: {"": "SvgElement;type=", "%": "SVGStyleElement"},

SvgElement: {"": "Element;", "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGComponentTransferFunctionElement|SVGCursorElement|SVGDescElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGGlyphRefElement|SVGHKernElement|SVGMPathElement|SVGMarkerElement|SVGMetadataElement|SVGMissingGlyphElement|SVGSetElement|SVGStopElement|SVGSymbolElement|SVGTitleElement|SVGVKernElement|SVGViewElement;SVGElement"},

SvgSvgElement: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGSVGElement"},

TextContentElement: {"": "GraphicsElement;", "%": "SVGTextPathElement;SVGTextContentElement"},

TextPositioningElement: {"": "TextContentElement;x=,y=", "%": "SVGAltGlyphElement|SVGTSpanElement|SVGTextElement|SVGTextPositioningElement"},

Transform: {"": "Interceptor;type=", "%": "SVGTransform"},

TransformList: {"": "Interceptor_ListMixin_ImmutableListMixin19;",
  $index: function(receiver, index) {
    var t1 = receiver.numberOfItems;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver.getItem(index);
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $asList: function() {
    return [P.Transform];
  },
  $isList: true,
  $isEfficientLength: true,
  "%": "SVGTransformList"
},

UseElement: {"": "GraphicsElement;height=,width=,x=,y=", "%": "SVGUseElement"},

_ElementInstanceList: {"": "Interceptor_ListMixin_ImmutableListMixin20;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.wrapException(P.RangeError$range(index, 0, receiver.length));
    return receiver.item(index);
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $asList: function() {
    return [P.ElementInstance];
  },
  $isList: true,
  $isEfficientLength: true,
  "%": "SVGElementInstanceList"
},

_GradientElement: {"": "SvgElement;", "%": "SVGLinearGradientElement;SVGGradientElement"},

Interceptor_ListMixin15: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin15: {"": "Interceptor_ListMixin15+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin16: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin16: {"": "Interceptor_ListMixin16+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin17: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin17: {"": "Interceptor_ListMixin17+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin18: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin18: {"": "Interceptor_ListMixin18+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin19: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin19: {"": "Interceptor_ListMixin19+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Interceptor_ListMixin20: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin20: {"": "Interceptor_ListMixin20+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true}}],
["dart.dom.web_audio", "dart:web_audio", , P, {
AudioBuffer: {"": "Interceptor;length=", "%": "AudioBuffer"},

AudioNode: {"": "EventTarget;", "%": "AnalyserNode|AudioChannelMerger|AudioChannelSplitter|AudioDestinationNode|AudioGainNode|AudioPannerNode|ChannelMergerNode|ChannelSplitterNode|ConvolverNode|DelayNode|DynamicsCompressorNode|GainNode|JavaScriptAudioNode|MediaStreamAudioDestinationNode|PannerNode|RealtimeAnalyserNode|ScriptProcessorNode|WaveShaperNode;AudioNode"},

AudioParam: {"": "Interceptor;value%", "%": "AudioParam"},

AudioSourceNode: {"": "AudioNode;", "%": "AudioBufferSourceNode|MediaElementAudioSourceNode|MediaStreamAudioSourceNode;AudioSourceNode"},

BiquadFilterNode: {"": "AudioNode;type=", "%": "BiquadFilterNode"},

OscillatorNode: {"": "AudioSourceNode;type=", "%": "Oscillator|OscillatorNode"}}],
["dart.dom.web_gl", "dart:web_gl", , P, {
ActiveInfo: {"": "Interceptor;type=", "%": "WebGLActiveInfo"},

RenderingContext: {"": "CanvasRenderingContext;",
  activeTexture$1: function(receiver, texture) {
    return receiver.activeTexture(texture);
  },
  attachShader$2: function(receiver, program, shader) {
    return receiver.attachShader(program, shader);
  },
  bindBuffer$2: function(receiver, target, buffer) {
    return receiver.bindBuffer(target, buffer);
  },
  bindFramebuffer$2: function(receiver, target, framebuffer) {
    return receiver.bindFramebuffer(target, framebuffer);
  },
  bindRenderbuffer$2: function(receiver, target, renderbuffer) {
    return receiver.bindRenderbuffer(target, renderbuffer);
  },
  bindTexture$2: function(receiver, target, texture) {
    return receiver.bindTexture(target, texture);
  },
  blendEquation$1: function(receiver, mode) {
    return receiver.blendEquation(mode);
  },
  blendEquationSeparate$2: function(receiver, modeRGB, modeAlpha) {
    return receiver.blendEquationSeparate(modeRGB, modeAlpha);
  },
  blendFunc$2: function(receiver, sfactor, dfactor) {
    return receiver.blendFunc(sfactor, dfactor);
  },
  blendFuncSeparate$4: function(receiver, srcRGB, dstRGB, srcAlpha, dstAlpha) {
    return receiver.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);
  },
  bufferDataTyped$3: function(receiver, target, data, usage) {
    return receiver.bufferData(target, data, usage);
  },
  clear$1: function(receiver, mask) {
    return receiver.clear(mask);
  },
  clearColor$4: function(receiver, red, green, blue, alpha) {
    return receiver.clearColor(red, green, blue, alpha);
  },
  clearDepth$1: function(receiver, depth) {
    return receiver.clearDepth(depth);
  },
  clearStencil$1: function(receiver, s) {
    return receiver.clearStencil(s);
  },
  compileShader$1: function(receiver, shader) {
    return receiver.compileShader(shader);
  },
  createBuffer$0: function(receiver) {
    return receiver.createBuffer();
  },
  createFramebuffer$0: function(receiver) {
    return receiver.createFramebuffer();
  },
  createProgram$0: function(receiver) {
    return receiver.createProgram();
  },
  createRenderbuffer$0: function(receiver) {
    return receiver.createRenderbuffer();
  },
  createShader$1: function(receiver, type) {
    return receiver.createShader(type);
  },
  createTexture$0: function(receiver) {
    return receiver.createTexture();
  },
  cullFace$1: function(receiver, mode) {
    return receiver.cullFace(mode);
  },
  deleteProgram$1: function(receiver, program) {
    return receiver.deleteProgram(program);
  },
  deleteShader$1: function(receiver, shader) {
    return receiver.deleteShader(shader);
  },
  depthFunc$1: function(receiver, func) {
    return receiver.depthFunc(func);
  },
  depthMask$1: function(receiver, flag) {
    return receiver.depthMask(flag);
  },
  disable$1: function(receiver, cap) {
    return receiver.disable(cap);
  },
  disableVertexAttribArray$1: function(receiver, index) {
    return receiver.disableVertexAttribArray(index);
  },
  drawArrays$3: function(receiver, mode, first, count) {
    return receiver.drawArrays(mode, first, count);
  },
  enable$1: function(receiver, cap) {
    return receiver.enable(cap);
  },
  enableVertexAttribArray$1: function(receiver, index) {
    return receiver.enableVertexAttribArray(index);
  },
  framebufferRenderbuffer$4: function(receiver, target, attachment, renderbuffertarget, renderbuffer) {
    return receiver.framebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
  },
  framebufferTexture2D$5: function(receiver, target, attachment, textarget, texture, level) {
    return receiver.framebufferTexture2D(target, attachment, textarget, texture, level);
  },
  frontFace$1: function(receiver, mode) {
    return receiver.frontFace(mode);
  },
  generateMipmap$1: function(receiver, target) {
    return receiver.generateMipmap(target);
  },
  getAttribLocation$2: function(receiver, program, $name) {
    return receiver.getAttribLocation(program, $name);
  },
  getError$0: function(receiver) {
    return receiver.getError();
  },
  getExtension$1: function(receiver, $name) {
    return receiver.getExtension($name);
  },
  getParameter$1: function(receiver, pname) {
    return receiver.getParameter(pname);
  },
  getProgramParameter$2: function(receiver, program, pname) {
    return receiver.getProgramParameter(program, pname);
  },
  getShaderInfoLog$1: function(receiver, shader) {
    return receiver.getShaderInfoLog(shader);
  },
  getShaderParameter$2: function(receiver, shader, pname) {
    return receiver.getShaderParameter(shader, pname);
  },
  getShaderPrecisionFormat$2: function(receiver, shadertype, precisiontype) {
    return receiver.getShaderPrecisionFormat(shadertype, precisiontype);
  },
  getUniformLocation$2: function(receiver, program, $name) {
    return receiver.getUniformLocation(program, $name);
  },
  lineWidth$1: function(receiver, width) {
    return receiver.lineWidth(width);
  },
  linkProgram$1: function(receiver, program) {
    return receiver.linkProgram(program);
  },
  pixelStorei$2: function(receiver, pname, param) {
    return receiver.pixelStorei(pname, param);
  },
  polygonOffset$2: function(receiver, factor, units) {
    return receiver.polygonOffset(factor, units);
  },
  renderbufferStorage$4: function(receiver, target, internalformat, width, height) {
    return receiver.renderbufferStorage(target, internalformat, width, height);
  },
  shaderSource$2: function(receiver, shader, string) {
    return receiver.shaderSource(shader, string);
  },
  texImage2D$9: function(receiver, target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video, format, type, pixels) {
    var t1, t2;
    t1 = J.getInterceptor(border_OR_canvas_OR_image_OR_pixels_OR_video);
    if (typeof border_OR_canvas_OR_image_OR_pixels_OR_video === "object" && border_OR_canvas_OR_image_OR_pixels_OR_video !== null && !!t1.$isImageData || border_OR_canvas_OR_image_OR_pixels_OR_video == null)
      t2 = true;
    else
      t2 = false;
    if (t2) {
      receiver.texImage2D(target, level, internalformat, format_OR_width, height_OR_type, P.convertDartToNative_ImageData(border_OR_canvas_OR_image_OR_pixels_OR_video));
      return;
    }
    if (typeof border_OR_canvas_OR_image_OR_pixels_OR_video === "object" && border_OR_canvas_OR_image_OR_pixels_OR_video !== null && !!t1.$isImageElement || border_OR_canvas_OR_image_OR_pixels_OR_video == null)
      t2 = true;
    else
      t2 = false;
    if (t2) {
      receiver.texImage2D(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video);
      return;
    }
    if (typeof border_OR_canvas_OR_image_OR_pixels_OR_video === "object" && border_OR_canvas_OR_image_OR_pixels_OR_video !== null && !!t1.$isCanvasElement || border_OR_canvas_OR_image_OR_pixels_OR_video == null)
      t2 = true;
    else
      t2 = false;
    if (t2) {
      receiver.texImage2D(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video);
      return;
    }
    if (typeof border_OR_canvas_OR_image_OR_pixels_OR_video === "object" && border_OR_canvas_OR_image_OR_pixels_OR_video !== null && !!t1.$isVideoElement || border_OR_canvas_OR_image_OR_pixels_OR_video == null)
      t1 = true;
    else
      t1 = false;
    if (t1) {
      receiver.texImage2D(target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video);
      return;
    }
    throw H.wrapException(new P.ArgumentError("Incorrect number or type of arguments"));
  },
  texImage2D$6: function($receiver, target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video) {
    return this.texImage2D$9($receiver, target, level, internalformat, format_OR_width, height_OR_type, border_OR_canvas_OR_image_OR_pixels_OR_video, null, null, null);
  },
  texImage2DCanvas$6: function(receiver, target, level, internalformat, format, type, canvas) {
    return receiver.texImage2D(target, level, internalformat, format, type, canvas);
  },
  texImage2DImage$6: function(receiver, target, level, internalformat, format, type, image) {
    return receiver.texImage2D(target, level, internalformat, format, type, image);
  },
  texImage2DVideo$6: function(receiver, target, level, internalformat, format, type, video) {
    return receiver.texImage2D(target, level, internalformat, format, type, video);
  },
  texParameterf$3: function(receiver, target, pname, param) {
    return receiver.texParameterf(target, pname, param);
  },
  texParameteri$3: function(receiver, target, pname, param) {
    return receiver.texParameteri(target, pname, param);
  },
  uniform1f$2: function(receiver, $location, x) {
    return receiver.uniform1f($location, x);
  },
  uniform1fv$2: function(receiver, $location, v) {
    return receiver.uniform1fv($location, v);
  },
  uniform1i$2: function(receiver, $location, x) {
    return receiver.uniform1i($location, x);
  },
  uniform1iv$2: function(receiver, $location, v) {
    return receiver.uniform1iv($location, v);
  },
  uniform2f$3: function(receiver, $location, x, y) {
    return receiver.uniform2f($location, x, y);
  },
  uniform2fv$2: function(receiver, $location, v) {
    return receiver.uniform2fv($location, v);
  },
  uniform3f$4: function(receiver, $location, x, y, z) {
    return receiver.uniform3f($location, x, y, z);
  },
  uniform3fv$2: function(receiver, $location, v) {
    return receiver.uniform3fv($location, v);
  },
  uniform3iv$2: function(receiver, $location, v) {
    return receiver.uniform3iv($location, v);
  },
  uniform4f$5: function(receiver, $location, x, y, z, w) {
    return receiver.uniform4f($location, x, y, z, w);
  },
  uniform4fv$2: function(receiver, $location, v) {
    return receiver.uniform4fv($location, v);
  },
  uniformMatrix2fv$3: function(receiver, $location, transpose, array) {
    return receiver.uniformMatrix2fv($location, transpose, array);
  },
  uniformMatrix3fv$3: function(receiver, $location, transpose, array) {
    return receiver.uniformMatrix3fv($location, transpose, array);
  },
  uniformMatrix4fv$3: function(receiver, $location, transpose, array) {
    return receiver.uniformMatrix4fv($location, transpose, array);
  },
  useProgram$1: function(receiver, program) {
    return receiver.useProgram(program);
  },
  vertexAttribPointer$6: function(receiver, indx, size, type, normalized, stride, offset) {
    return receiver.vertexAttribPointer(indx, size, type, normalized, stride, offset);
  },
  viewport$4: function(receiver, x, y, width, height) {
    return receiver.viewport(x, y, width, height);
  },
  texImage2DTyped$9: function(receiver, targetTexture, levelOfDetail, internalFormat, width, height, border, format, type, data) {
    return receiver.texImage2D(targetTexture, levelOfDetail, internalFormat, width, height, border, format, type, data);
  },
  "%": "WebGLRenderingContext"
}}],
["dart.dom.web_sql", "dart:web_sql", , P, {
SqlResultSetRowList: {"": "Interceptor_ListMixin_ImmutableListMixin21;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw H.wrapException(P.RangeError$range(index, 0, receiver.length));
    return P.convertNativeToDart_Dictionary(receiver.item(index));
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  $asList: function() {
    return [P.Map];
  },
  $isList: true,
  $isEfficientLength: true,
  "%": "SQLResultSetRowList"
},

Interceptor_ListMixin21: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin21: {"": "Interceptor_ListMixin21+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true}}],
["dart.isolate", "dart:isolate", , P, {
ReceivePort: {"": "Object;"}}],
["dart.math", "dart:math", , P, {
_JenkinsSmiHash_combine0: function(hash, value) {
  hash = 536870911 & hash + value;
  hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
  return (hash ^ C.JSInt_methods.$shr(hash, 6)) >>> 0;
},

_JenkinsSmiHash_finish0: function(hash) {
  hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash = (hash ^ C.JSInt_methods.$shr(hash, 11)) >>> 0;
  return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
},

min: function(a, b) {
  if (typeof b !== "number")
    throw H.wrapException(new P.ArgumentError(b));
  if (a > b)
    return b;
  if (a < b)
    return a;
  if (typeof b === "number") {
    if (typeof a === "number")
      if (a === 0)
        return (a + b) * a * b;
    if (a === 0 && C.JSNumber_methods.get$isNegative(b) || isNaN(b))
      return b;
    return a;
  }
  return a;
},

max: function(a, b) {
  if (typeof a !== "number")
    throw H.wrapException(new P.ArgumentError(a));
  if (a > b)
    return a;
  if (a < b)
    return b;
  if (typeof b === "number") {
    if (typeof a === "number")
      if (a === 0)
        return a + b;
    if (isNaN(b))
      return b;
    return a;
  }
  if (b === 0 && C.JSNumber_methods.get$isNegative(a))
    return b;
  return a;
},

_Random: {"": "Object;"},

_RectangleBase: {"": "Object;",
  toString$0: function(_) {
    return "Rectangle (" + H.S(this.get$left(this)) + ", " + H.S(this.top) + ") " + H.S(this.width) + " x " + H.S(this.height);
  },
  $eq: function(_, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    t1 = J.getInterceptor$x(other);
    if (typeof other !== "object" || other === null || !t1.$isRectangle)
      return false;
    t2 = this.get$left(this);
    t3 = t1.get$left(other);
    if (t2 == null ? t3 == null : t2 === t3) {
      t2 = this.top;
      t3 = t1.get$top(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = this.width;
        t3 = t1.get$width(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = this.height;
          t1 = t1.get$height(other);
          t1 = t2 == null ? t1 == null : t2 === t1;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3, t4;
    t1 = J.get$hashCode$(this.get$left(this));
    t2 = J.get$hashCode$(this.top);
    t3 = J.get$hashCode$(this.width);
    t4 = J.get$hashCode$(this.height);
    return P._JenkinsSmiHash_finish0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2), t3), t4));
  }
},

Rectangle: {"": "_RectangleBase;left>,top>,width>,height>", $isRectangle: true, $asRectangle: null, $as_RectangleBase: null}}],
["dart.typed_data", "dart:typed_data", , P, {
ByteBuffer: {"": "Interceptor;", $isByteBuffer: true, "%": "ArrayBuffer"},

TypedData: {"": "Interceptor;",
  _invalidIndex$2: function(receiver, index, $length) {
    var t1 = J.getInterceptor$n(index);
    if (t1.$lt(index, 0) || t1.$ge(index, $length))
      throw H.wrapException(P.RangeError$range(index, 0, $length));
    else
      throw H.wrapException(P.ArgumentError$("Invalid list index " + H.S(index)));
  },
  $isTypedData: true,
  "%": "DataView;ArrayBufferView;TypedData_ListMixin|TypedData_ListMixin_FixedLengthListMixin|TypedData_ListMixin0|TypedData_ListMixin_FixedLengthListMixin0|TypedData_ListMixin1|TypedData_ListMixin_FixedLengthListMixin1|TypedData_ListMixin2|TypedData_ListMixin_FixedLengthListMixin2|TypedData_ListMixin3|TypedData_ListMixin_FixedLengthListMixin3|TypedData_ListMixin4|TypedData_ListMixin_FixedLengthListMixin4|TypedData_ListMixin5|TypedData_ListMixin_FixedLengthListMixin5|TypedData_ListMixin6|TypedData_ListMixin_FixedLengthListMixin6|TypedData_ListMixin7|TypedData_ListMixin_FixedLengthListMixin7|Int64List|Uint64List"
},

Float32List: {"": "TypedData_ListMixin_FixedLengthListMixin;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $isFloat32List: true,
  $asList: function() {
    return [J.JSDouble];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Float32Array"
},

Float64List: {"": "TypedData_ListMixin_FixedLengthListMixin0;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSDouble];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Float64Array"
},

Int16List: {"": "TypedData_ListMixin_FixedLengthListMixin1;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Int16Array"
},

Int32List: {"": "TypedData_ListMixin_FixedLengthListMixin2;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $isInt32List: true,
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Int32Array"
},

Int8List: {"": "TypedData_ListMixin_FixedLengthListMixin3;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Int8Array"
},

Uint16List: {"": "TypedData_ListMixin_FixedLengthListMixin4;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Uint16Array"
},

Uint32List: {"": "TypedData_ListMixin_FixedLengthListMixin5;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Uint32Array"
},

Uint8ClampedList: {"": "TypedData_ListMixin_FixedLengthListMixin6;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "CanvasPixelArray|Uint8ClampedArray"
},

Uint8List: {"": "TypedData_ListMixin_FixedLengthListMixin7;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": ";Uint8Array"
},

TypedData_ListMixin: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin: {"": "TypedData_ListMixin+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin0: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin0: {"": "TypedData_ListMixin0+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin1: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin1: {"": "TypedData_ListMixin1+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin2: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin2: {"": "TypedData_ListMixin2+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin3: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin3: {"": "TypedData_ListMixin3+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin4: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin4: {"": "TypedData_ListMixin4+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin5: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin5: {"": "TypedData_ListMixin5+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin6: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin6: {"": "TypedData_ListMixin6+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin7: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin7: {"": "TypedData_ListMixin7+FixedLengthListMixin;", $asList: null},

Int64List: {"": "TypedData;", $isList: true,
  $asList: function() {
    return [J.JSInt];
  },
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  static: {
"": "Int64List_BYTES_PER_ELEMENT",
}

},

Uint64List: {"": "TypedData;", $isList: true,
  $asList: function() {
    return [J.JSInt];
  },
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  static: {
"": "Uint64List_BYTES_PER_ELEMENT",
}

}}],
["html_common", "dart:html_common", , P, {
convertNativeToDart_Dictionary: function(object) {
  var dict, keys, t1, key;
  if (object == null)
    return;
  dict = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  keys = Object.getOwnPropertyNames(object);
  for (t1 = new H.ListIterator(keys, keys.length, 0, null); t1.moveNext$0();) {
    key = t1._current;
    dict.$indexSet(dict, key, object[key]);
  }
  return dict;
},

convertDartToNative_Dictionary: function(dict) {
  var object = {};
  dict.forEach$1(dict, new P.convertDartToNative_Dictionary_closure(object));
  return object;
},

convertNativeToDart_DateTime: function(date) {
  return P.DateTime$fromMillisecondsSinceEpoch(date.getTime(), true);
},

_convertDartToNative_PrepareForStructuredClone: function(value) {
  var copies, copy;
  copies = [];
  copy = new P._convertDartToNative_PrepareForStructuredClone_walk(new P._convertDartToNative_PrepareForStructuredClone_findSlot([], copies), new P._convertDartToNative_PrepareForStructuredClone_readSlot(copies), new P._convertDartToNative_PrepareForStructuredClone_writeSlot(copies)).call$1(value);
  new P._convertDartToNative_PrepareForStructuredClone_cleanupSlots().call$0();
  return copy;
},

convertNativeToDart_AcceptStructuredClone: function(object, mustCopy) {
  var copies = [];
  return new P.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new P.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new P.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new P.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
},

convertDartToNative_ImageData: function(imageData) {
  return imageData;
},

convertDartToNative_Dictionary_closure: {"": "Closure;object_0",
  call$2: function(key, value) {
    this.object_0[key] = value;
  },
  $is_args2: true
},

_convertDartToNative_PrepareForStructuredClone_findSlot: {"": "Closure;values_1,copies_2",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_1;
    $length = t1.length;
    for (i = 0; i < $length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t1.push(value);
    this.copies_2.push(null);
    return $length;
  },
  $is_args1: true
},

_convertDartToNative_PrepareForStructuredClone_readSlot: {"": "Closure;copies_3",
  call$1: function(i) {
    var t1 = this.copies_3;
    if (i >>> 0 !== i || i >= t1.length)
      throw H.ioore(t1, i);
    return t1[i];
  },
  $is_args1: true
},

_convertDartToNative_PrepareForStructuredClone_writeSlot: {"": "Closure;copies_4",
  call$2: function(i, x) {
    var t1 = this.copies_4;
    if (i >>> 0 !== i || i >= t1.length)
      throw H.ioore(t1, i);
    t1[i] = x;
  },
  $is_args2: true
},

_convertDartToNative_PrepareForStructuredClone_cleanupSlots: {"": "Closure;",
  call$0: function() {
  }
},

_convertDartToNative_PrepareForStructuredClone_walk: {"": "Closure;findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var t1, t2, slot, t3, $length, copy, i;
    t1 = {};
    if (e == null)
      return e;
    if (typeof e === "boolean")
      return e;
    if (typeof e === "number")
      return e;
    if (typeof e === "string")
      return e;
    t2 = J.getInterceptor(e);
    if (typeof e === "object" && e !== null && !!t2.$isDateTime)
      return new Date(e.millisecondsSinceEpoch);
    if (typeof e === "object" && e !== null && !!t2.$isFile)
      return e;
    if (typeof e === "object" && e !== null && !!t2.$isBlob)
      return e;
    if (typeof e === "object" && e !== null && !!t2.$isFileList)
      return e;
    if (typeof e === "object" && e !== null && !!t2.$isImageData)
      return e;
    if (typeof e === "object" && e !== null && !!t2.$isByteBuffer)
      return e;
    if (typeof e === "object" && e !== null && !!t2.$isTypedData)
      return e;
    if (typeof e === "object" && e !== null && !!t2.$isMap) {
      slot = this.findSlot_5.call$1(e);
      t1.copy_0 = this.readSlot_6.call$1(slot);
      t3 = t1.copy_0;
      if (t3 != null)
        return t3;
      t1.copy_0 = {};
      this.writeSlot_7.call$2(slot, t1.copy_0);
      t2.forEach$1(e, new P._convertDartToNative_PrepareForStructuredClone_walk_closure(t1, this));
      return t1.copy_0;
    }
    if (typeof e === "object" && e !== null && (e.constructor === Array || !!t2.$isList)) {
      $length = t2.get$length(e);
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null) {
        if (true === copy) {
          copy = new Array($length);
          this.writeSlot_7.call$2(slot, copy);
        }
        return copy;
      }
      copy = new Array($length);
      this.writeSlot_7.call$2(slot, copy);
      if (typeof $length !== "number")
        throw H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        t1 = this.call$1(t2.$index(e, i));
        if (i >= copy.length)
          throw H.ioore(copy, i);
        copy[i] = t1;
      }
      return copy;
    }
    throw H.wrapException(P.UnimplementedError$("structured clone of other type"));
  },
  $is_args1: true
},

_convertDartToNative_PrepareForStructuredClone_walk_closure: {"": "Closure;box_0,walk_8",
  call$2: function(key, value) {
    this.box_0.copy_0[key] = this.walk_8.call$1(value);
  },
  $is_args2: true
},

convertNativeToDart_AcceptStructuredClone_findSlot: {"": "Closure;values_0,copies_1",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_0;
    $length = t1.length;
    for (i = 0; i < $length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t1.push(value);
    this.copies_1.push(null);
    return $length;
  },
  $is_args1: true
},

convertNativeToDart_AcceptStructuredClone_readSlot: {"": "Closure;copies_2",
  call$1: function(i) {
    var t1 = this.copies_2;
    if (i >>> 0 !== i || i >= t1.length)
      throw H.ioore(t1, i);
    return t1[i];
  },
  $is_args1: true
},

convertNativeToDart_AcceptStructuredClone_writeSlot: {"": "Closure;copies_3",
  call$2: function(i, x) {
    var t1 = this.copies_3;
    if (i >>> 0 !== i || i >= t1.length)
      throw H.ioore(t1, i);
    t1[i] = x;
  },
  $is_args2: true
},

convertNativeToDart_AcceptStructuredClone_walk: {"": "Closure;mustCopy_4,findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var slot, copy, t1, key, $length, t2, i;
    if (e == null)
      return e;
    if (typeof e === "boolean")
      return e;
    if (typeof e === "number")
      return e;
    if (typeof e === "string")
      return e;
    if (e instanceof Date)
      return P.convertNativeToDart_DateTime(e);
    if (e instanceof RegExp)
      throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
    if (Object.getPrototypeOf(e) === Object.prototype) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      copy = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      this.writeSlot_7.call$2(slot, copy);
      for (t1 = Object.keys(e), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        key = t1._current;
        copy.$indexSet(copy, key, this.call$1(e[key]));
      }
      return copy;
    }
    if (e instanceof Array) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      t1 = J.getInterceptor$asx(e);
      $length = t1.get$length(e);
      copy = this.mustCopy_4 ? new Array($length) : e;
      this.writeSlot_7.call$2(slot, copy);
      if (typeof $length !== "number")
        throw H.iae($length);
      t2 = J.getInterceptor$ax(copy);
      i = 0;
      for (; i < $length; ++i)
        t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
      return copy;
    }
    return e;
  },
  $is_args1: true
}}],
["three", "package:three/three.dart", , S, {
makeLookAt: function(m, eye, center, up) {
  var t1, z, x, y, t2, t3;
  t1 = eye.$sub(eye, center);
  z = t1.normalize$0(t1);
  if (z.get$length(z) === 0)
    z.storage[2] = 1;
  t1 = up.cross$1(z);
  x = t1.normalize$0(t1);
  if (x.get$length(x) === 0) {
    t1 = z.storage;
    t1[0] = t1[0] + 0.0001;
    t1 = up.cross$1(z);
    x = t1.normalize$0(t1);
  }
  t1 = z.cross$1(x);
  y = t1.normalize$0(t1);
  t1 = x.storage;
  t2 = y.storage;
  t3 = z.storage;
  m.setValues$16(t1[0], t1[1], t1[2], 0, t2[0], t2[1], t2[2], 0, t3[0], t3[1], t3[2], 0, 0, 0, 0, 1);
  return m;
},

setRotationFromEuler: function(m, v, order) {
  var t1, x, y, z, a, b, c, d, e, f, ce, t2, t3, cf, de, df, t4, af, be, bf, ad, bc, bd;
  t1 = v.storage;
  x = t1[0];
  y = t1[1];
  z = t1[2];
  a = Math.cos(x);
  b = Math.sin(x);
  c = Math.cos(y);
  d = Math.sin(y);
  e = Math.cos(z);
  f = Math.sin(z);
  t1 = a * e;
  ce = c * e;
  t2 = m.storage;
  t3 = a * c;
  switch (order) {
    case "YXZ":
      cf = c * f;
      de = d * e;
      df = d * f;
      t2[0] = ce + df * b;
      t2[4] = de * b - cf;
      t2[8] = a * d;
      t2[1] = a * f;
      t2[5] = t1;
      t2[9] = -b;
      t2[2] = cf * b - de;
      t2[6] = df + ce * b;
      t2[10] = t3;
      break;
    case "ZXY":
      cf = c * f;
      de = d * e;
      df = d * f;
      t2[0] = ce - df * b;
      t4 = -a;
      t2[4] = t4 * f;
      t2[8] = de + cf * b;
      t2[1] = cf + de * b;
      t2[5] = t1;
      t2[9] = df - ce * b;
      t2[2] = t4 * d;
      t2[6] = b;
      t2[10] = t3;
      break;
    case "ZYX":
      af = a * f;
      be = b * e;
      bf = b * f;
      t2[0] = ce;
      t2[4] = be * d - af;
      t2[8] = t1 * d + bf;
      t2[1] = c * f;
      t2[5] = bf * d + t1;
      t2[9] = af * d - be;
      t2[2] = -d;
      t2[6] = b * c;
      t2[10] = t3;
      break;
    case "YZX":
      ad = a * d;
      bc = b * c;
      bd = b * d;
      t2[0] = ce;
      t2[4] = bd - t3 * f;
      t2[8] = bc * f + ad;
      t2[1] = f;
      t2[5] = t1;
      t2[9] = -b * e;
      t2[2] = -d * e;
      t2[6] = ad * f + bc;
      t2[10] = t3 - bd * f;
      break;
    case "XZY":
      ad = a * d;
      bc = b * c;
      bd = b * d;
      t2[0] = ce;
      t2[4] = -f;
      t2[8] = d * e;
      t2[1] = t3 * f + bd;
      t2[5] = t1;
      t2[9] = ad * f - bc;
      t2[2] = bc * f - ad;
      t2[6] = b * e;
      t2[10] = bd * f + t3;
      break;
    default:
      af = a * f;
      be = b * e;
      bf = b * f;
      t2[0] = ce;
      t2[4] = -c * f;
      t2[8] = d;
      t2[1] = af + be * d;
      t2[5] = t1 - bf * d;
      t2[9] = -b * c;
      t2[2] = bf - t1 * d;
      t2[6] = be + af * d;
      t2[10] = t3;
      break;
  }
  return m;
},

setRotationFromQuaternion: function(m, q) {
  var t1, x, y, z, w, x2, y2, z2, xx, xy, xz, yy, yz, zz, wx, wy, wz;
  t1 = q.storage;
  x = t1[0];
  y = t1[1];
  z = t1[2];
  w = t1[3];
  x2 = x + x;
  y2 = y + y;
  z2 = z + z;
  xx = x * x2;
  xy = x * y2;
  xz = x * z2;
  yy = y * y2;
  yz = y * z2;
  zz = z * z2;
  wx = w * x2;
  wy = w * y2;
  wz = w * z2;
  t1 = m.storage;
  t1[0] = 1 - (yy + zz);
  t1[4] = xy - wz;
  t1[8] = xz + wy;
  t1[1] = xy + wz;
  t1[5] = 1 - (xx + zz);
  t1[9] = yz - wx;
  t1[2] = xz - wy;
  t1[6] = yz + wx;
  t1[10] = 1 - (xx + yy);
  return m;
},

calcMaxScaleOnAxis: function(te) {
  var t1 = P.max(te.$index(te, 0) * te.$index(te, 0) + te.$index(te, 1) * te.$index(te, 1) + te.$index(te, 2) * te.$index(te, 2), P.max(te.$index(te, 4) * te.$index(te, 4) + te.$index(te, 5) * te.$index(te, 5) + te.$index(te, 6) * te.$index(te, 6), te.$index(te, 8) * te.$index(te, 8) + te.$index(te, 9) * te.$index(te, 9) + te.$index(te, 10) * te.$index(te, 10)));
  return Math.sqrt(t1);
},

calcInverse: function(m) {
  var a11, t1, t2, t3, t4, t5, t6, t7, t8, a12, t9, t10, t11, t12, t13, t14, t15, t16, a13, t17, t18, t19, t20, t21, t22, t23, t24, det, idet, t25;
  a11 = m.$index(m, 10) * m.$index(m, 5) - m.$index(m, 6) * m.$index(m, 9);
  t1 = m.$index(m, 10);
  t2 = m.$index(m, 1);
  t3 = m.$index(m, 2);
  t4 = m.$index(m, 9);
  t5 = m.$index(m, 6);
  t6 = m.$index(m, 1);
  t7 = m.$index(m, 2);
  t8 = m.$index(m, 5);
  a12 = -m.$index(m, 10) * m.$index(m, 4) + m.$index(m, 6) * m.$index(m, 8);
  t9 = m.$index(m, 10);
  t10 = m.$index(m, 0);
  t11 = m.$index(m, 2);
  t12 = m.$index(m, 8);
  t13 = m.$index(m, 6);
  t14 = m.$index(m, 0);
  t15 = m.$index(m, 2);
  t16 = m.$index(m, 4);
  a13 = m.$index(m, 9) * m.$index(m, 4) - m.$index(m, 5) * m.$index(m, 8);
  t17 = m.$index(m, 9);
  t18 = m.$index(m, 0);
  t19 = m.$index(m, 1);
  t20 = m.$index(m, 8);
  t21 = m.$index(m, 5);
  t22 = m.$index(m, 0);
  t23 = m.$index(m, 1);
  t24 = m.$index(m, 4);
  det = m.$index(m, 0) * a11 + m.$index(m, 1) * a12 + m.$index(m, 2) * a13;
  if (det === 0)
    P.print("Matrix3.getInverse(): determinant == 0");
  idet = 1 / det;
  t25 = new Float32Array(9);
  t25.$dartCachedLength = t25.length;
  t25 = new T.Matrix3(t25);
  t25.setValues$9(idet * a11, idet * (-t1 * t2 + t3 * t4), idet * (t5 * t6 - t7 * t8), idet * a12, idet * (t9 * t10 - t11 * t12), idet * (-t13 * t14 + t15 * t16), idet * a13, idet * (-t17 * t18 + t19 * t20), idet * (t21 * t22 - t23 * t24));
  return t25;
},

decompose: function(m, translation, rotation, scale) {
  var te, t1, t2, t3, t4, x, y, z, matrix;
  te = m.get$storage();
  t1 = C.JS_CONST_ZYJ(te);
  if (0 >= t1)
    throw H.ioore(te, 0);
  t2 = te[0];
  if (1 >= t1)
    throw H.ioore(te, 1);
  t3 = te[1];
  if (2 >= t1)
    throw H.ioore(te, 2);
  t1 = te[2];
  t4 = new Float32Array(3);
  t4.$dartCachedLength = t4.length;
  x = new T.Vector3(t4);
  x.setValues$3(t2, t3, t1);
  t1 = C.JS_CONST_ZYJ(te);
  if (4 >= t1)
    throw H.ioore(te, 4);
  t3 = te[4];
  if (5 >= t1)
    throw H.ioore(te, 5);
  t2 = te[5];
  if (6 >= t1)
    throw H.ioore(te, 6);
  t1 = te[6];
  t4 = new Float32Array(3);
  t4.$dartCachedLength = t4.length;
  y = new T.Vector3(t4);
  y.setValues$3(t3, t2, t1);
  t1 = C.JS_CONST_ZYJ(te);
  if (8 >= t1)
    throw H.ioore(te, 8);
  t2 = te[8];
  if (9 >= t1)
    throw H.ioore(te, 9);
  t3 = te[9];
  if (10 >= t1)
    throw H.ioore(te, 10);
  t1 = te[10];
  t4 = new Float32Array(3);
  t4.$dartCachedLength = t4.length;
  z = new T.Vector3(t4);
  z.setValues$3(t2, t3, t1);
  t1 = scale.storage;
  t1[0] = x.get$length(x);
  t1[1] = y.get$length(y);
  t1[2] = z.get$length(z);
  t2 = C.JS_CONST_ZYJ(te);
  if (12 >= t2)
    throw H.ioore(te, 12);
  t3 = translation.storage;
  t3[0] = te[12];
  if (13 >= t2)
    throw H.ioore(te, 13);
  t3[1] = te[13];
  if (14 >= t2)
    throw H.ioore(te, 14);
  t3[2] = te[14];
  matrix = m.clone$0(m);
  t3 = matrix.get$storage();
  if (0 >= C.JS_CONST_ZYJ(t3))
    throw H.ioore(t3, 0);
  t3[0] = t3[0] / t1[0];
  t3 = matrix.get$storage();
  if (1 >= C.JS_CONST_ZYJ(t3))
    throw H.ioore(t3, 1);
  t3[1] = t3[1] / t1[0];
  t3 = matrix.get$storage();
  if (2 >= C.JS_CONST_ZYJ(t3))
    throw H.ioore(t3, 2);
  t3[2] = t3[2] / t1[0];
  t3 = matrix.get$storage();
  if (4 >= C.JS_CONST_ZYJ(t3))
    throw H.ioore(t3, 4);
  t3[4] = t3[4] / t1[1];
  t3 = matrix.get$storage();
  if (5 >= C.JS_CONST_ZYJ(t3))
    throw H.ioore(t3, 5);
  t3[5] = t3[5] / t1[1];
  t3 = matrix.get$storage();
  if (6 >= C.JS_CONST_ZYJ(t3))
    throw H.ioore(t3, 6);
  t3[6] = t3[6] / t1[1];
  t3 = matrix.get$storage();
  if (8 >= C.JS_CONST_ZYJ(t3))
    throw H.ioore(t3, 8);
  t3[8] = t3[8] / t1[2];
  t3 = matrix.get$storage();
  if (9 >= C.JS_CONST_ZYJ(t3))
    throw H.ioore(t3, 9);
  t3[9] = t3[9] / t1[2];
  t3 = matrix.get$storage();
  if (10 >= C.JS_CONST_ZYJ(t3))
    throw H.ioore(t3, 10);
  t3[10] = t3[10] / t1[2];
  S.setFromRotationMatrix(rotation, matrix);
  return [translation, rotation, scale];
},

setFromRotationMatrix: function(quaternion, m) {
  var te, t1, m11, m12, m13, m21, m22, m23, m31, m32, m33, trace, s;
  quaternion = T.Quaternion$identity();
  te = m.get$storage();
  t1 = C.JS_CONST_ZYJ(te);
  if (0 >= t1)
    throw H.ioore(te, 0);
  m11 = te[0];
  if (4 >= t1)
    throw H.ioore(te, 4);
  m12 = te[4];
  if (8 >= t1)
    throw H.ioore(te, 8);
  m13 = te[8];
  m21 = te[1];
  m22 = te[5];
  if (9 >= t1)
    throw H.ioore(te, 9);
  m23 = te[9];
  m31 = te[2];
  m32 = te[6];
  if (10 >= t1)
    throw H.ioore(te, 10);
  m33 = te[10];
  trace = m11 + m22 + m33;
  if (trace > 0) {
    s = 0.5 / Math.sqrt(trace + 1);
    t1 = quaternion.storage;
    t1[3] = 0.25 / s;
    t1[0] = (m32 - m23) * s;
    t1[1] = (m13 - m31) * s;
    t1[2] = (m21 - m12) * s;
  } else if (m11 > m22 && m11 > m33) {
    s = 2 * Math.sqrt(1 + m11 - m22 - m33);
    t1 = quaternion.storage;
    t1[3] = (m32 - m23) / s;
    t1[0] = 0.25 * s;
    t1[1] = (m12 + m21) / s;
    t1[2] = (m13 + m31) / s;
  } else if (m22 > m33) {
    s = 2 * Math.sqrt(1 + m22 - m11 - m33);
    t1 = quaternion.storage;
    t1[3] = (m13 - m31) / s;
    t1[0] = (m12 + m21) / s;
    t1[1] = 0.25 * s;
    t1[2] = (m23 + m32) / s;
  } else {
    s = 2 * Math.sqrt(1 + m33 - m11 - m22);
    t1 = quaternion.storage;
    t1[3] = (m21 - m12) / s;
    t1[0] = (m13 + m31) / s;
    t1[1] = (m23 + m32) / s;
    t1[2] = 0.25 * s;
  }
  return quaternion;
},

compose: function(matrix, translation, rotation, s) {
  var te, t1, mRotation, t2, t3;
  te = matrix.get$storage();
  t1 = new Float32Array(16);
  t1.$dartCachedLength = t1.length;
  mRotation = new T.Matrix4(t1);
  mRotation.setIdentity$0();
  S.setRotationFromQuaternion(mRotation, rotation);
  t1 = s.storage;
  mRotation.multiply$1(mRotation, T.Matrix4$diagonal3Values(t1[0], t1[1], t1[2]));
  t1 = translation.storage;
  t2 = t1[0];
  t3 = C.JS_CONST_ZYJ(te);
  if (12 >= t3)
    throw H.ioore(te, 12);
  te[12] = t2;
  t2 = t1[1];
  if (13 >= t3)
    throw H.ioore(te, 13);
  te[13] = t2;
  t1 = t1[2];
  if (14 >= t3)
    throw H.ioore(te, 14);
  te[14] = t1;
  return matrix;
},

calcEulerFromRotationMatrix: function(m, order) {
  var clamp, t1, m11, m12, m13, m21, m22, m23, m31, m32, m33, y, x, z;
  clamp = new S.calcEulerFromRotationMatrix_closure();
  t1 = m.storage;
  m11 = t1[0];
  m12 = t1[4];
  m13 = t1[8];
  m21 = t1[1];
  m22 = t1[5];
  m23 = t1[9];
  m31 = t1[2];
  m32 = t1[6];
  m33 = t1[10];
  if (order === "XYZ") {
    t1 = clamp.call$1(m13);
    if (typeof t1 !== "number")
      H.throwExpression(new P.ArgumentError(t1));
    y = Math.asin(t1);
    if (Math.abs(m13) < 0.99999) {
      x = Math.atan2(-m23, m33);
      z = Math.atan2(-m12, m11);
    } else {
      x = Math.atan2(m21, m22);
      z = 0;
    }
  } else if (order === "YXZ") {
    t1 = J.$negate$n(clamp.call$1(m23));
    if (typeof t1 !== "number")
      H.throwExpression(new P.ArgumentError(t1));
    x = Math.asin(t1);
    if (Math.abs(m23) < 0.99999) {
      y = Math.atan2(m13, m33);
      z = Math.atan2(m21, m22);
    } else {
      y = Math.atan2(-m31, m11);
      z = 0;
    }
  } else if (order === "ZXY") {
    t1 = clamp.call$1(m32);
    if (typeof t1 !== "number")
      H.throwExpression(new P.ArgumentError(t1));
    x = Math.asin(t1);
    if (Math.abs(m32) < 0.99999) {
      y = Math.atan2(-m31, m33);
      z = Math.atan2(-m12, m22);
    } else {
      z = Math.atan2(m13, m11);
      y = 0;
    }
  } else if (order === "ZYX") {
    t1 = J.$negate$n(clamp.call$1(m31));
    if (typeof t1 !== "number")
      H.throwExpression(new P.ArgumentError(t1));
    y = Math.asin(t1);
    if (Math.abs(m31) < 0.99999) {
      x = Math.atan2(m32, m33);
      z = Math.atan2(m21, m11);
    } else {
      z = Math.atan2(-m12, m22);
      x = 0;
    }
  } else if (order === "YZX") {
    t1 = clamp.call$1(m21);
    if (typeof t1 !== "number")
      H.throwExpression(new P.ArgumentError(t1));
    z = Math.asin(t1);
    if (Math.abs(m21) < 0.99999) {
      x = Math.atan2(-m23, m22);
      y = Math.atan2(-m31, m11);
    } else {
      y = Math.atan2(m31, m33);
      x = 0;
    }
  } else if (order === "XZY") {
    t1 = J.$negate$n(clamp.call$1(m12));
    if (typeof t1 !== "number")
      H.throwExpression(new P.ArgumentError(t1));
    z = Math.asin(t1);
    if (Math.abs(m12) < 0.99999) {
      x = Math.atan2(m32, m22);
      y = Math.atan2(m13, m11);
    } else {
      x = Math.atan2(-m13, m33);
      y = 0;
    }
  } else {
    x = null;
    y = null;
    z = null;
  }
  t1 = new Float32Array(3);
  t1.$dartCachedLength = t1.length;
  t1 = new T.Vector3(t1);
  t1.setValues$3(x, y, z);
  return t1;
},

ShaderChunk: function() {
  if ($.__ShaderChunk == null)
    $.__ShaderChunk = H.fillLiteralMap(["fog_pars_fragment", C.JSArray_methods.join$1(["#ifdef USE_FOG", "uniform vec3 fogColor;", "#ifdef FOG_EXP2", "uniform float fogDensity;", "#else", "uniform float fogNear;", "uniform float fogFar;", "#endif", "#endif"], "\n"), "fog_fragment", C.JSArray_methods.join$1(["#ifdef USE_FOG", "float depth = gl_FragCoord.z / gl_FragCoord.w;", "#ifdef FOG_EXP2", "const float LOG2 = 1.442695;", "float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );", "fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );", "#else", "float fogFactor = smoothstep( fogNear, fogFar, depth );", "#endif", "gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );", "#endif"], "\n"), "envmap_pars_fragment", C.JSArray_methods.join$1(["#ifdef USE_ENVMAP", "uniform float reflectivity;", "uniform samplerCube envMap;", "uniform float flipEnvMap;", "uniform int combine;", "#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )", "uniform bool useRefract;", "uniform float refractionRatio;", "#else", "varying vec3 vReflect;", "#endif", "#endif"], "\n"), "envmap_fragment", C.JSArray_methods.join$1(["#ifdef USE_ENVMAP", "vec3 reflectVec;", "#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )", "vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );", "if ( useRefract ) {", "reflectVec = refract( cameraToVertex, normal, refractionRatio );", "} else { ", "reflectVec = reflect( cameraToVertex, normal );", "}", "#else", "reflectVec = vReflect;", "#endif", "#ifdef DOUBLE_SIDED", "float flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );", "vec4 cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );", "#else", "vec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );", "#endif", "#ifdef GAMMA_INPUT", "cubeColor.xyz *= cubeColor.xyz;", "#endif", "if ( combine == 1 ) {", "gl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularStrength * reflectivity );", "} else if ( combine == 2 ) {", "gl_FragColor.xyz += cubeColor.xyz * specularStrength * reflectivity;", "} else {", "gl_FragColor.xyz = mix( gl_FragColor.xyz, gl_FragColor.xyz * cubeColor.xyz, specularStrength * reflectivity );", "}", "#endif"], "\n"), "envmap_pars_vertex", C.JSArray_methods.join$1(["#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )", "varying vec3 vReflect;", "uniform float refractionRatio;", "uniform bool useRefract;", "#endif"], "\n"), "worldpos_vertex", C.JSArray_methods.join$1(["#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )", "#ifdef USE_SKINNING", "vec4 worldPosition = modelMatrix * skinned;", "#endif", "#if defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )", "vec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );", "#endif", "#if ! defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )", "vec4 worldPosition = modelMatrix * vec4( position, 1.0 );", "#endif", "#endif"], "\n"), "envmap_vertex", C.JSArray_methods.join$1(["#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )", "vec3 worldNormal = mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * objectNormal;", "worldNormal = normalize( worldNormal );", "vec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );", "if ( useRefract ) {", "vReflect = refract( cameraToVertex, worldNormal, refractionRatio );", "} else {", "vReflect = reflect( cameraToVertex, worldNormal );", "}", "#endif"], "\n"), "map_particle_pars_fragment", C.JSArray_methods.join$1(["#ifdef USE_MAP", "uniform sampler2D map;", "#endif"], "\n"), "map_particle_fragment", C.JSArray_methods.join$1(["#ifdef USE_MAP", "gl_FragColor = gl_FragColor * texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );", "#endif"], "\n"), "map_pars_vertex", C.JSArray_methods.join$1(["#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )", "varying vec2 vUv;", "uniform vec4 offsetRepeat;", "#endif"], "\n"), "map_pars_fragment", C.JSArray_methods.join$1(["#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )", "varying vec2 vUv;", "#endif", "#ifdef USE_MAP", "uniform sampler2D map;", "#endif"], "\n"), "map_vertex", C.JSArray_methods.join$1(["#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )", "vUv = uv * offsetRepeat.zw + offsetRepeat.xy;", "#endif"], "\n"), "map_fragment", C.JSArray_methods.join$1(["#ifdef USE_MAP", "vec4 texelColor = texture2D( map, vUv );", "#ifdef GAMMA_INPUT", "texelColor.xyz *= texelColor.xyz;", "#endif", "gl_FragColor = gl_FragColor * texelColor;", "#endif"], "\n"), "lightmap_pars_fragment", C.JSArray_methods.join$1(["#ifdef USE_LIGHTMAP", "varying vec2 vUv2;", "uniform sampler2D lightMap;", "#endif"], "\n"), "lightmap_pars_vertex", C.JSArray_methods.join$1(["#ifdef USE_LIGHTMAP", "varying vec2 vUv2;", "#endif"], "\n"), "lightmap_fragment", C.JSArray_methods.join$1(["#ifdef USE_LIGHTMAP", "gl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );", "#endif"], "\n"), "lightmap_vertex", C.JSArray_methods.join$1(["#ifdef USE_LIGHTMAP", "vUv2 = uv2;", "#endif"], "\n"), "bumpmap_pars_fragment", C.JSArray_methods.join$1(["#ifdef USE_BUMPMAP", "uniform sampler2D bumpMap;", "uniform float bumpScale;", "vec2 dHdxy_fwd() {", "vec2 dSTdx = dFdx( vUv );", "vec2 dSTdy = dFdy( vUv );", "float Hll = bumpScale * texture2D( bumpMap, vUv ).x;", "float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;", "float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;", "return vec2( dBx, dBy );", "}", "vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {", "vec3 vSigmaX = dFdx( surf_pos );", "vec3 vSigmaY = dFdy( surf_pos );", "vec3 vN = surf_norm;", "vec3 R1 = cross( vSigmaY, vN );", "vec3 R2 = cross( vN, vSigmaX );", "float fDet = dot( vSigmaX, R1 );", "vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );", "return normalize( abs( fDet ) * surf_norm - vGrad );", "}", "#endif"], "\n"), "normalmap_pars_fragment", C.JSArray_methods.join$1(["#ifdef USE_NORMALMAP", "uniform sampler2D normalMap;", "uniform vec2 normalScale;", "vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {", "vec3 q0 = dFdx( eye_pos.xyz );", "vec3 q1 = dFdy( eye_pos.xyz );", "vec2 st0 = dFdx( vUv.st );", "vec2 st1 = dFdy( vUv.st );", "vec3 S = normalize(  q0 * st1.t - q1 * st0.t );", "vec3 T = normalize( -q0 * st1.s + q1 * st0.s );", "vec3 N = normalize( surf_norm );", "vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;", "mapN.xy = normalScale * mapN.xy;", "mat3 tsn = mat3( S, T, N );", "return normalize( tsn * mapN );", "}", "#endif"], "\n"), "specularmap_pars_fragment", C.JSArray_methods.join$1(["#ifdef USE_SPECULARMAP", "uniform sampler2D specularMap;", "#endif"], "\n"), "specularmap_fragment", C.JSArray_methods.join$1(["float specularStrength;", "#ifdef USE_SPECULARMAP", "vec4 texelSpecular = texture2D( specularMap, vUv );", "specularStrength = texelSpecular.r;", "#else", "specularStrength = 1.0;", "#endif"], "\n"), "lights_lambert_pars_vertex", C.JSArray_methods.join$1(["uniform vec3 ambient;", "uniform vec3 diffuse;", "uniform vec3 emissive;", "uniform vec3 ambientLightColor;", "#if MAX_DIR_LIGHTS > 0", "uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];", "uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];", "#endif", "#if MAX_HEMI_LIGHTS > 0", "uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];", "uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];", "uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];", "#endif", "#if MAX_POINT_LIGHTS > 0", "uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];", "uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];", "uniform float pointLightDistance[ MAX_POINT_LIGHTS ];", "#endif", "#if MAX_SPOT_LIGHTS > 0", "uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];", "uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];", "uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];", "uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];", "uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];", "uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];", "#endif", "#ifdef WRAP_AROUND", "uniform vec3 wrapRGB;", "#endif"], "\n"), "lights_lambert_vertex", C.JSArray_methods.join$1(["vLightFront = vec3( 0.0 );", "#ifdef DOUBLE_SIDED", "vLightBack = vec3( 0.0 );", "#endif", "transformedNormal = normalize( transformedNormal );", "#if MAX_DIR_LIGHTS > 0", "for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {", "vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );", "vec3 dirVector = normalize( lDirection.xyz );", "float dotProduct = dot( transformedNormal, dirVector );", "vec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );", "#ifdef DOUBLE_SIDED", "vec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );", "#ifdef WRAP_AROUND", "vec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );", "#endif", "#endif", "#ifdef WRAP_AROUND", "vec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );", "directionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );", "#ifdef DOUBLE_SIDED", "directionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );", "#endif", "#endif", "vLightFront += directionalLightColor[ i ] * directionalLightWeighting;", "#ifdef DOUBLE_SIDED", "vLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;", "#endif", "}", "#endif", "#if MAX_POINT_LIGHTS > 0", "for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {", "vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );", "vec3 lVector = lPosition.xyz - mvPosition.xyz;", "float lDistance = 1.0;", "if ( pointLightDistance[ i ] > 0.0 )", "lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );", "lVector = normalize( lVector );", "float dotProduct = dot( transformedNormal, lVector );", "vec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );", "#ifdef DOUBLE_SIDED", "vec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );", "#ifdef WRAP_AROUND", "vec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );", "#endif", "#endif", "#ifdef WRAP_AROUND", "vec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );", "pointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );", "#ifdef DOUBLE_SIDED", "pointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );", "#endif", "#endif", "vLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;", "#ifdef DOUBLE_SIDED", "vLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;", "#endif", "}", "#endif", "#if MAX_SPOT_LIGHTS > 0", "for( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {", "vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );", "vec3 lVector = lPosition.xyz - mvPosition.xyz;", "float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - worldPosition.xyz ) );", "if ( spotEffect > spotLightAngleCos[ i ] ) {", "spotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );", "float lDistance = 1.0;", "if ( spotLightDistance[ i ] > 0.0 )", "lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );", "lVector = normalize( lVector );", "float dotProduct = dot( transformedNormal, lVector );", "vec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );", "#ifdef DOUBLE_SIDED", "vec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );", "#ifdef WRAP_AROUND", "vec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );", "#endif", "#endif", "#ifdef WRAP_AROUND", "vec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );", "spotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );", "#ifdef DOUBLE_SIDED", "spotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );", "#endif", "#endif", "vLightFront += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;", "#ifdef DOUBLE_SIDED", "vLightBack += spotLightColor[ i ] * spotLightWeightingBack * lDistance * spotEffect;", "#endif", "}", "}", "#endif", "#if MAX_HEMI_LIGHTS > 0", "for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {", "vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );", "vec3 lVector = normalize( lDirection.xyz );", "float dotProduct = dot( transformedNormal, lVector );", "float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;", "float hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;", "vLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );", "#ifdef DOUBLE_SIDED", "vLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );", "#endif", "}", "#endif", "vLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;", "#ifdef DOUBLE_SIDED", "vLightBack = vLightBack * diffuse + ambient * ambientLightColor + emissive;", "#endif"], "\n"), "lights_phong_pars_vertex", C.JSArray_methods.join$1(["#ifndef PHONG_PER_PIXEL", "#if MAX_POINT_LIGHTS > 0", "uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];", "uniform float pointLightDistance[ MAX_POINT_LIGHTS ];", "varying vec4 vPointLight[ MAX_POINT_LIGHTS ];", "#endif", "#if MAX_SPOT_LIGHTS > 0", "uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];", "uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];", "varying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];", "#endif", "#endif", "#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )", "varying vec3 vWorldPosition;", "#endif"], "\n"), "lights_phong_vertex", C.JSArray_methods.join$1(["#ifndef PHONG_PER_PIXEL", "#if MAX_POINT_LIGHTS > 0", "for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {", "vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );", "vec3 lVector = lPosition.xyz - mvPosition.xyz;", "float lDistance = 1.0;", "if ( pointLightDistance[ i ] > 0.0 )", "lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );", "vPointLight[ i ] = vec4( lVector, lDistance );", "}", "#endif", "#if MAX_SPOT_LIGHTS > 0", "for( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {", "vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );", "vec3 lVector = lPosition.xyz - mvPosition.xyz;", "float lDistance = 1.0;", "if ( spotLightDistance[ i ] > 0.0 )", "lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );", "vSpotLight[ i ] = vec4( lVector, lDistance );", "}", "#endif", "#endif", "#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )", "vWorldPosition = worldPosition.xyz;", "#endif"], "\n"), "lights_phong_pars_fragment", C.JSArray_methods.join$1(["uniform vec3 ambientLightColor;", "#if MAX_DIR_LIGHTS > 0", "uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];", "uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];", "#endif", "#if MAX_HEMI_LIGHTS > 0", "uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];", "uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];", "uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];", "#endif", "#if MAX_POINT_LIGHTS > 0", "uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];", "#ifdef PHONG_PER_PIXEL", "uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];", "uniform float pointLightDistance[ MAX_POINT_LIGHTS ];", "#else", "varying vec4 vPointLight[ MAX_POINT_LIGHTS ];", "#endif", "#endif", "#if MAX_SPOT_LIGHTS > 0", "uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];", "uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];", "uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];", "uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];", "uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];", "#ifdef PHONG_PER_PIXEL", "uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];", "#else", "varying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];", "#endif", "#endif", "#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )", "varying vec3 vWorldPosition;", "#endif", "#ifdef WRAP_AROUND", "uniform vec3 wrapRGB;", "#endif", "varying vec3 vViewPosition;", "varying vec3 vNormal;"], "\n"), "lights_phong_fragment", C.JSArray_methods.join$1(["vec3 normal = normalize( vNormal );", "vec3 viewPosition = normalize( vViewPosition );", "#ifdef DOUBLE_SIDED", "normal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );", "#endif", "#ifdef USE_NORMALMAP", "normal = perturbNormal2Arb( -viewPosition, normal );", "#elif defined( USE_BUMPMAP )", "normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );", "#endif", "#if MAX_POINT_LIGHTS > 0", "vec3 pointDiffuse  = vec3( 0.0 );", "vec3 pointSpecular = vec3( 0.0 );", "for ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {", "#ifdef PHONG_PER_PIXEL", "vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );", "vec3 lVector = lPosition.xyz + vViewPosition.xyz;", "float lDistance = 1.0;", "if ( pointLightDistance[ i ] > 0.0 )", "lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );", "lVector = normalize( lVector );", "#else", "vec3 lVector = normalize( vPointLight[ i ].xyz );", "float lDistance = vPointLight[ i ].w;", "#endif", "float dotProduct = dot( normal, lVector );", "#ifdef WRAP_AROUND", "float pointDiffuseWeightFull = max( dotProduct, 0.0 );", "float pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );", "vec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );", "#else", "float pointDiffuseWeight = max( dotProduct, 0.0 );", "#endif", "pointDiffuse  += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;", "vec3 pointHalfVector = normalize( lVector + viewPosition );", "float pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );", "float pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );", "#ifdef PHYSICALLY_BASED_SHADING", "float specularNormalization = ( shininess + 2.0001 ) / 8.0;", "vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, pointHalfVector ), 5.0 );", "pointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;", "#else", "pointSpecular += specular * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance;", "#endif", "}", "#endif", "#if MAX_SPOT_LIGHTS > 0", "vec3 spotDiffuse  = vec3( 0.0 );", "vec3 spotSpecular = vec3( 0.0 );", "for ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {", "#ifdef PHONG_PER_PIXEL", "vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );", "vec3 lVector = lPosition.xyz + vViewPosition.xyz;", "float lDistance = 1.0;", "if ( spotLightDistance[ i ] > 0.0 )", "lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );", "lVector = normalize( lVector );", "#else", "vec3 lVector = normalize( vSpotLight[ i ].xyz );", "float lDistance = vSpotLight[ i ].w;", "#endif", "float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );", "if ( spotEffect > spotLightAngleCos[ i ] ) {", "spotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );", "float dotProduct = dot( normal, lVector );", "#ifdef WRAP_AROUND", "float spotDiffuseWeightFull = max( dotProduct, 0.0 );", "float spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );", "vec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );", "#else", "float spotDiffuseWeight = max( dotProduct, 0.0 );", "#endif", "spotDiffuse += diffuse * spotLightColor[ i ] * spotDiffuseWeight * lDistance * spotEffect;", "vec3 spotHalfVector = normalize( lVector + viewPosition );", "float spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );", "float spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );", "#ifdef PHYSICALLY_BASED_SHADING", "float specularNormalization = ( shininess + 2.0001 ) / 8.0;", "vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, spotHalfVector ), 5.0 );", "spotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;", "#else", "spotSpecular += specular * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * spotEffect;", "#endif", "}", "}", "#endif", "#if MAX_DIR_LIGHTS > 0", "vec3 dirDiffuse  = vec3( 0.0 );", "vec3 dirSpecular = vec3( 0.0 );", "for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {", "vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );", "vec3 dirVector = normalize( lDirection.xyz );", "float dotProduct = dot( normal, dirVector );", "#ifdef WRAP_AROUND", "float dirDiffuseWeightFull = max( dotProduct, 0.0 );", "float dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );", "vec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );", "#else", "float dirDiffuseWeight = max( dotProduct, 0.0 );", "#endif", "dirDiffuse  += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;", "vec3 dirHalfVector = normalize( dirVector + viewPosition );", "float dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );", "float dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );", "#ifdef PHYSICALLY_BASED_SHADING", "float specularNormalization = ( shininess + 2.0001 ) / 8.0;", "vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );", "dirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;", "#else", "dirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight;", "#endif", "}", "#endif", "#if MAX_HEMI_LIGHTS > 0", "vec3 hemiDiffuse  = vec3( 0.0 );", "vec3 hemiSpecular = vec3( 0.0 );", "for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {", "vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );", "vec3 lVector = normalize( lDirection.xyz );", "float dotProduct = dot( normal, lVector );", "float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;", "vec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );", "hemiDiffuse += diffuse * hemiColor;", "vec3 hemiHalfVectorSky = normalize( lVector + viewPosition );", "float hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;", "float hemiSpecularWeightSky = specularStrength * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );", "vec3 lVectorGround = -lVector;", "vec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );", "float hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;", "float hemiSpecularWeightGround = specularStrength * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );", "#ifdef PHYSICALLY_BASED_SHADING", "float dotProductGround = dot( normal, lVectorGround );", "float specularNormalization = ( shininess + 2.0001 ) / 8.0;", "vec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );", "vec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );", "hemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );", "#else", "hemiSpecular += specular * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;", "#endif", "}", "#endif", "vec3 totalDiffuse = vec3( 0.0 );", "vec3 totalSpecular = vec3( 0.0 );", "#if MAX_DIR_LIGHTS > 0", "totalDiffuse += dirDiffuse;", "totalSpecular += dirSpecular;", "#endif", "#if MAX_HEMI_LIGHTS > 0", "totalDiffuse += hemiDiffuse;", "totalSpecular += hemiSpecular;", "#endif", "#if MAX_POINT_LIGHTS > 0", "totalDiffuse += pointDiffuse;", "totalSpecular += pointSpecular;", "#endif", "#if MAX_SPOT_LIGHTS > 0", "totalDiffuse += spotDiffuse;", "totalSpecular += spotSpecular;", "#endif", "#ifdef METAL", "gl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient + totalSpecular );", "#else", "gl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;", "#endif"], "\n"), "color_pars_fragment", C.JSArray_methods.join$1(["#ifdef USE_COLOR", "varying vec3 vColor;", "#endif"], "\n"), "color_fragment", C.JSArray_methods.join$1(["#ifdef USE_COLOR", "gl_FragColor = gl_FragColor * vec4( vColor, opacity );", "#endif"], "\n"), "color_pars_vertex", C.JSArray_methods.join$1(["#ifdef USE_COLOR", "varying vec3 vColor;", "#endif"], "\n"), "color_vertex", C.JSArray_methods.join$1(["#ifdef USE_COLOR", "#ifdef GAMMA_INPUT", "vColor = color * color;", "#else", "vColor = color;", "#endif", "#endif"], "\n"), "skinning_pars_vertex", C.JSArray_methods.join$1(["#ifdef USE_SKINNING", "#ifdef BONE_TEXTURE", "uniform sampler2D boneTexture;", "mat4 getBoneMatrix( const in float i ) {", "float j = i * 4.0;", "float x = mod( j, N_BONE_PIXEL_X );", "float y = floor( j / N_BONE_PIXEL_X );", "const float dx = 1.0 / N_BONE_PIXEL_X;", "const float dy = 1.0 / N_BONE_PIXEL_Y;", "y = dy * ( y + 0.5 );", "vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );", "vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );", "vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );", "vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );", "mat4 bone = mat4( v1, v2, v3, v4 );", "return bone;", "}", "#else", "uniform mat4 boneGlobalMatrices[ MAX_BONES ];", "mat4 getBoneMatrix( const in float i ) {", "mat4 bone = boneGlobalMatrices[ int(i) ];", "return bone;", "}", "#endif", "#endif"], "\n"), "skinbase_vertex", C.JSArray_methods.join$1(["#ifdef USE_SKINNING", "mat4 boneMatX = getBoneMatrix( skinIndex.x );", "mat4 boneMatY = getBoneMatrix( skinIndex.y );", "#endif"], "\n"), "skinning_vertex", C.JSArray_methods.join$1(["#ifdef USE_SKINNING", "#ifdef USE_MORPHTARGETS", "vec4 skinVertex = vec4( morphed, 1.0 );", "#else", "vec4 skinVertex = vec4( position, 1.0 );", "#endif", "vec4 skinned  = boneMatX * skinVertex * skinWeight.x;", "skinned    += boneMatY * skinVertex * skinWeight.y;", "#endif"], "\n"), "morphtarget_pars_vertex", C.JSArray_methods.join$1(["#ifdef USE_MORPHTARGETS", "#ifndef USE_MORPHNORMALS", "uniform float morphTargetInfluences[ 8 ];", "#else", "uniform float morphTargetInfluences[ 4 ];", "#endif", "#endif"], "\n"), "morphtarget_vertex", C.JSArray_methods.join$1(["#ifdef USE_MORPHTARGETS", "vec3 morphed = vec3( 0.0 );", "morphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];", "morphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];", "morphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];", "morphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];", "#ifndef USE_MORPHNORMALS", "morphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];", "morphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];", "morphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];", "morphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];", "#endif", "morphed += position;", "#endif"], "\n"), "default_vertex", C.JSArray_methods.join$1(["vec4 mvPosition;", "#ifdef USE_SKINNING", "mvPosition = modelViewMatrix * skinned;", "#endif", "#if !defined( USE_SKINNING ) && defined( USE_MORPHTARGETS )", "mvPosition = modelViewMatrix * vec4( morphed, 1.0 );", "#endif", "#if !defined( USE_SKINNING ) && ! defined( USE_MORPHTARGETS )", "mvPosition = modelViewMatrix * vec4( position, 1.0 );", "#endif", "gl_Position = projectionMatrix * mvPosition;"], "\n"), "morphnormal_vertex", C.JSArray_methods.join$1(["#ifdef USE_MORPHNORMALS", "vec3 morphedNormal = vec3( 0.0 );", "morphedNormal +=  ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];", "morphedNormal +=  ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];", "morphedNormal +=  ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];", "morphedNormal +=  ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];", "morphedNormal += normal;", "#endif"], "\n"), "skinnormal_vertex", C.JSArray_methods.join$1(["#ifdef USE_SKINNING", "mat4 skinMatrix = skinWeight.x * boneMatX;", "skinMatrix   += skinWeight.y * boneMatY;", "#ifdef USE_MORPHNORMALS", "vec4 skinnedNormal = skinMatrix * vec4( morphedNormal, 0.0 );", "#else", "vec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );", "#endif", "#endif"], "\n"), "defaultnormal_vertex", C.JSArray_methods.join$1(["vec3 objectNormal;", "#ifdef USE_SKINNING", "objectNormal = skinnedNormal.xyz;", "#endif", "#if !defined( USE_SKINNING ) && defined( USE_MORPHNORMALS )", "objectNormal = morphedNormal;", "#endif", "#if !defined( USE_SKINNING ) && ! defined( USE_MORPHNORMALS )", "objectNormal = normal;", "#endif", "#ifdef FLIP_SIDED", "objectNormal = -objectNormal;", "#endif", "vec3 transformedNormal = normalMatrix * objectNormal;"], "\n"), "shadowmap_pars_fragment", C.JSArray_methods.join$1(["#ifdef USE_SHADOWMAP", "uniform sampler2D shadowMap[ MAX_SHADOWS ];", "uniform vec2 shadowMapSize[ MAX_SHADOWS ];", "uniform float shadowDarkness[ MAX_SHADOWS ];", "uniform float shadowBias[ MAX_SHADOWS ];", "varying vec4 vShadowCoord[ MAX_SHADOWS ];", "float unpackDepth( const in vec4 rgba_depth ) {", "const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );", "float depth = dot( rgba_depth, bit_shift );", "return depth;", "}", "#endif"], "\n"), "shadowmap_fragment", C.JSArray_methods.join$1(["#ifdef USE_SHADOWMAP", "#ifdef SHADOWMAP_DEBUG", "vec3 frustumColors[3];", "frustumColors[0] = vec3( 1.0, 0.5, 0.0 );", "frustumColors[1] = vec3( 0.0, 1.0, 0.8 );", "frustumColors[2] = vec3( 0.0, 0.5, 1.0 );", "#endif", "#ifdef SHADOWMAP_CASCADE", "int inFrustumCount = 0;", "#endif", "float fDepth;", "vec3 shadowColor = vec3( 1.0 );", "for( int i = 0; i < MAX_SHADOWS; i ++ ) {", "vec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;", "bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );", "bool inFrustum = all( inFrustumVec );", "#ifdef SHADOWMAP_CASCADE", "inFrustumCount += int( inFrustum );", "bvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );", "#else", "bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );", "#endif", "bool frustumTest = all( frustumTestVec );", "if ( frustumTest ) {", "shadowCoord.z += shadowBias[ i ];", "#if defined( SHADOWMAP_TYPE_PCF )", "float shadow = 0.0;", "const float shadowDelta = 1.0 / 9.0;", "float xPixelOffset = 1.0 / shadowMapSize[ i ].x;", "float yPixelOffset = 1.0 / shadowMapSize[ i ].y;", "float dx0 = -1.25 * xPixelOffset;", "float dy0 = -1.25 * yPixelOffset;", "float dx1 = 1.25 * xPixelOffset;", "float dy1 = 1.25 * yPixelOffset;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );", "if ( fDepth < shadowCoord.z ) shadow += shadowDelta;", "shadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );", "#elif defined( SHADOWMAP_TYPE_PCF_SOFT )", "float shadow = 0.0;", "float xPixelOffset = 1.0 / shadowMapSize[ i ].x;", "float yPixelOffset = 1.0 / shadowMapSize[ i ].y;", "float dx0 = -1.0 * xPixelOffset;", "float dy0 = -1.0 * yPixelOffset;", "float dx1 = 1.0 * xPixelOffset;", "float dy1 = 1.0 * yPixelOffset;", "mat3 shadowKernel;", "mat3 depthKernel;", "depthKernel[0][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );", "if ( depthKernel[0][0] < shadowCoord.z ) shadowKernel[0][0] = 0.25;", "else shadowKernel[0][0] = 0.0;", "depthKernel[0][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );", "if ( depthKernel[0][1] < shadowCoord.z ) shadowKernel[0][1] = 0.25;", "else shadowKernel[0][1] = 0.0;", "depthKernel[0][2] = unpackDepth( texture2D( shadowMap[ i], shadowCoord.xy + vec2( dx0, dy1 ) ) );", "if ( depthKernel[0][2] < shadowCoord.z ) shadowKernel[0][2] = 0.25;", "else shadowKernel[0][2] = 0.0;", "depthKernel[1][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );", "if ( depthKernel[1][0] < shadowCoord.z ) shadowKernel[1][0] = 0.25;", "else shadowKernel[1][0] = 0.0;", "depthKernel[1][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );", "if ( depthKernel[1][1] < shadowCoord.z ) shadowKernel[1][1] = 0.25;", "else shadowKernel[1][1] = 0.0;", "depthKernel[1][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );", "if ( depthKernel[1][2] < shadowCoord.z ) shadowKernel[1][2] = 0.25;", "else shadowKernel[1][2] = 0.0;", "depthKernel[2][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );", "if ( depthKernel[2][0] < shadowCoord.z ) shadowKernel[2][0] = 0.25;", "else shadowKernel[2][0] = 0.0;", "depthKernel[2][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );", "if ( depthKernel[2][1] < shadowCoord.z ) shadowKernel[2][1] = 0.25;", "else shadowKernel[2][1] = 0.0;", "depthKernel[2][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );", "if ( depthKernel[2][2] < shadowCoord.z ) shadowKernel[2][2] = 0.25;", "else shadowKernel[2][2] = 0.0;", "vec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[i].xy );", "shadowKernel[0] = mix( shadowKernel[1], shadowKernel[0], fractionalCoord.x );", "shadowKernel[1] = mix( shadowKernel[2], shadowKernel[1], fractionalCoord.x );", "vec4 shadowValues;", "shadowValues.x = mix( shadowKernel[0][1], shadowKernel[0][0], fractionalCoord.y );", "shadowValues.y = mix( shadowKernel[0][2], shadowKernel[0][1], fractionalCoord.y );", "shadowValues.z = mix( shadowKernel[1][1], shadowKernel[1][0], fractionalCoord.y );", "shadowValues.w = mix( shadowKernel[1][2], shadowKernel[1][1], fractionalCoord.y );", "shadow = dot( shadowValues, vec4( 1.0 ) );", "shadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );", "#else", "vec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );", "float fDepth = unpackDepth( rgbaDepth );", "if ( fDepth < shadowCoord.z )", "shadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );", "#endif", "}", "#ifdef SHADOWMAP_DEBUG", "#ifdef SHADOWMAP_CASCADE", "if ( inFrustum && inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];", "#else", "if ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];", "#endif", "#endif", "}", "#ifdef GAMMA_OUTPUT", "shadowColor *= shadowColor;", "#endif", "gl_FragColor.xyz = gl_FragColor.xyz * shadowColor;", "#endif"], "\n"), "shadowmap_pars_vertex", C.JSArray_methods.join$1(["#ifdef USE_SHADOWMAP", "varying vec4 vShadowCoord[ MAX_SHADOWS ];", "uniform mat4 shadowMatrix[ MAX_SHADOWS ];", "#endif"], "\n"), "shadowmap_vertex", C.JSArray_methods.join$1(["#ifdef USE_SHADOWMAP", "for( int i = 0; i < MAX_SHADOWS; i ++ ) {", "vShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;", "}", "#endif"], "\n"), "alphatest_fragment", C.JSArray_methods.join$1(["#ifdef ALPHATEST", "if ( gl_FragColor.a < ALPHATEST ) discard;", "#endif"], "\n"), "linear_to_gamma_fragment", C.JSArray_methods.join$1(["#ifdef GAMMA_OUTPUT", "gl_FragColor.xyz = sqrt( gl_FragColor.xyz );", "#endif"], "\n")], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  return $.__ShaderChunk;
},

UniformsUtils_merge: function(uniformsLst) {
  var merged = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  H.IterableMixinWorkaround_forEach(uniformsLst, new S.UniformsUtils_merge_closure(merged));
  return merged;
},

UniformsUtils_clone: function(uniforms) {
  var result = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  J.forEach$1$ax(uniforms, new S.UniformsUtils_clone_closure(result));
  return result;
},

UniformsLib: function() {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19;
  if ($.__UniformsLib == null) {
    t1 = new S.Uniform("c", null, true, null);
    t1.set$value(t1, S.Color$(15658734));
    t2 = new S.Uniform("f", null, true, null);
    t2.set$value(t2, 1);
    t3 = new S.Uniform("t", null, true, null);
    t3.set$value(t3, null);
    t4 = new Float32Array(4);
    t4.$dartCachedLength = t4.length;
    t4 = new T.Vector4(t4);
    t4.setValues$4(0, 0, 1, 1);
    t5 = new S.Uniform("v4", null, true, null);
    t5.set$value(t5, t4);
    t4 = new S.Uniform("t", null, true, null);
    t4.set$value(t4, null);
    t6 = new S.Uniform("t", null, true, null);
    t6.set$value(t6, null);
    t7 = new S.Uniform("t", null, true, null);
    t7.set$value(t7, null);
    t8 = new S.Uniform("f", null, true, null);
    t8.set$value(t8, -1);
    t9 = new S.Uniform("i", null, true, null);
    t9.set$value(t9, 0);
    t10 = new S.Uniform("f", null, true, null);
    t10.set$value(t10, 1);
    t11 = new S.Uniform("f", null, true, null);
    t11.set$value(t11, 0.98);
    t12 = new S.Uniform("i", null, true, null);
    t12.set$value(t12, 0);
    t13 = new S.Uniform("f", null, true, null);
    t13.set$value(t13, 0);
    t13 = H.fillLiteralMap(["diffuse", t1, "opacity", t2, "map", t3, "offsetRepeat", t5, "lightMap", t4, "specularMap", t6, "envMap", t7, "flipEnvMap", t8, "useRefract", t9, "reflectivity", t10, "refractionRatio", t11, "combine", t12, "morphTargetInfluences", t13], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t12 = new S.Uniform("t", null, true, null);
    t12.set$value(t12, null);
    t11 = new S.Uniform("f", null, true, null);
    t11.set$value(t11, 1);
    t11 = H.fillLiteralMap(["bumpMap", t12, "bumpScale", t11], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t12 = new S.Uniform("t", null, true, null);
    t12.set$value(t12, null);
    t10 = new Float32Array(2);
    t10.$dartCachedLength = t10.length;
    t10 = new T.Vector2(t10);
    t9 = t10.storage;
    t9[0] = 1;
    t9[1] = 1;
    t9 = new S.Uniform("v2", null, true, null);
    t9.set$value(t9, t10);
    t9 = H.fillLiteralMap(["normalMap", t12, "normalScale", t9], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t12 = new S.Uniform("f", null, true, null);
    t12.set$value(t12, 0.00025);
    t10 = new S.Uniform("f", null, true, null);
    t10.set$value(t10, 1);
    t8 = new S.Uniform("f", null, true, null);
    t8.set$value(t8, 2000);
    t7 = new S.Uniform("c", null, true, null);
    t7.set$value(t7, S.Color$(16777215));
    t7 = H.fillLiteralMap(["fogDensity", t12, "fogNear", t10, "fogFar", t8, "fogColor", t7], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t8 = new S.Uniform("fv", null, true, null);
    t8.set$value(t8, []);
    t10 = new S.Uniform("fv", null, true, null);
    t10.set$value(t10, []);
    t12 = new S.Uniform("fv", null, true, null);
    t12.set$value(t12, []);
    t6 = new S.Uniform("fv", null, true, null);
    t6.set$value(t6, []);
    t4 = new S.Uniform("fv", null, true, null);
    t4.set$value(t4, []);
    t5 = new S.Uniform("fv", null, true, null);
    t5.set$value(t5, []);
    t3 = new S.Uniform("fv", null, true, null);
    t3.set$value(t3, []);
    t2 = new S.Uniform("fv", null, true, null);
    t2.set$value(t2, []);
    t1 = new S.Uniform("fv1", null, true, null);
    t1.set$value(t1, []);
    t14 = new S.Uniform("fv", null, true, null);
    t14.set$value(t14, []);
    t15 = new S.Uniform("fv", null, true, null);
    t15.set$value(t15, []);
    t16 = new S.Uniform("fv", null, true, null);
    t16.set$value(t16, []);
    t17 = new S.Uniform("fv1", null, true, null);
    t17.set$value(t17, []);
    t18 = new S.Uniform("fv1", null, true, null);
    t18.set$value(t18, []);
    t19 = new S.Uniform("fv1", null, true, null);
    t19.set$value(t19, []);
    t19 = H.fillLiteralMap(["ambientLightColor", t8, "directionalLightDirection", t10, "directionalLightColor", t12, "hemisphereLightDirection", t6, "hemisphereLightSkyColor", t4, "hemisphereLightGroundColor", t5, "pointLightColor", t3, "pointLightPosition", t2, "pointLightDistance", t1, "spotLightColor", t14, "spotLightPosition", t15, "spotLightDirection", t16, "spotLightDistance", t17, "spotLightAngleCos", t18, "spotLightExponent", t19], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t18 = new S.Uniform("c", null, true, null);
    t18.set$value(t18, S.Color$(15658734));
    t17 = new S.Uniform("f", null, true, null);
    t17.set$value(t17, 1);
    t16 = new S.Uniform("f", null, true, null);
    t16.set$value(t16, 1);
    t15 = new S.Uniform("f", null, true, null);
    t15.set$value(t15, 1);
    t14 = new S.Uniform("t", null, true, null);
    t14.set$value(t14, null);
    t1 = new S.Uniform("f", null, true, null);
    t1.set$value(t1, 0.00025);
    t2 = new S.Uniform("f", null, true, null);
    t2.set$value(t2, 1);
    t3 = new S.Uniform("f", null, true, null);
    t3.set$value(t3, 2000);
    t5 = new S.Uniform("c", null, true, null);
    t5.set$value(t5, S.Color$(16777215));
    t5 = H.fillLiteralMap(["psColor", t18, "opacity", t17, "size", t16, "scale", t15, "map", t14, "fogDensity", t1, "fogNear", t2, "fogFar", t3, "fogColor", t5], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t3 = new S.Uniform("tv", null, true, null);
    t3.set$value(t3, []);
    t2 = new S.Uniform("v2v", null, true, null);
    t2.set$value(t2, []);
    t1 = new S.Uniform("fv1", null, true, null);
    t1.set$value(t1, []);
    t14 = new S.Uniform("fv1", null, true, null);
    t14.set$value(t14, []);
    t15 = new S.Uniform("m4v", null, true, null);
    t15.set$value(t15, []);
    $.__UniformsLib = H.fillLiteralMap(["common", t13, "bump", t11, "normalmap", t9, "fog", t7, "lights", t19, "particle", t5, "shadowmap", H.fillLiteralMap(["shadowMap", t3, "shadowMapSize", t2, "shadowBias", t1, "shadowDarkness", t14, "shadowMatrix", t15], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  }
  return $.__UniformsLib;
},

ShaderLib: function() {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27;
  if ($.__ShaderLib == null) {
    t1 = new S.Uniform("f", null, true, null);
    t1.set$value(t1, 1);
    t2 = new S.Uniform("f", null, true, null);
    t2.set$value(t2, 2000);
    t3 = new S.Uniform("f", null, true, null);
    t3.set$value(t3, 1);
    t3 = H.fillLiteralMap(["uniforms", H.fillLiteralMap(["mNear", t1, "mFar", t2, "opacity", t3], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), "vertexShader", C.JSArray_methods.join$1(["void main() {", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"], "\n"), "fragmentShader", C.JSArray_methods.join$1(["uniform float mNear;", "uniform float mFar;", "uniform float opacity;", "void main() {", "float depth = gl_FragCoord.z / gl_FragCoord.w;", "float color = 1.0 - smoothstep( mNear, mFar, depth );", "gl_FragColor = vec4( vec3( color ), opacity );", "}"], "\n")], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t2 = new S.Uniform("f", null, true, null);
    t2.set$value(t2, 1);
    t2 = H.fillLiteralMap(["uniforms", H.fillLiteralMap(["opacity", t2], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), "vertexShader", C.JSArray_methods.join$1(["varying vec3 vNormal;", "void main() {", "vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );", "vNormal = normalize( normalMatrix * normal );", "gl_Position = projectionMatrix * mvPosition;", "}"], "\n"), "fragmentShader", C.JSArray_methods.join$1(["uniform float opacity;", "varying vec3 vNormal;", "void main() {", "gl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );", "}"], "\n")], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t1 = S.UniformsLib();
    t1 = t1.$index(t1, "common");
    t4 = S.UniformsLib();
    t4 = t4.$index(t4, "fog");
    t5 = S.UniformsLib();
    t5 = S.UniformsUtils_merge([t1, t4, t5.$index(t5, "shadowmap")]);
    t4 = S.ShaderChunk();
    t4 = t4.$index(t4, "map_pars_vertex");
    t1 = S.ShaderChunk();
    t1 = t1.$index(t1, "lightmap_pars_vertex");
    t6 = S.ShaderChunk();
    t6 = t6.$index(t6, "envmap_pars_vertex");
    t7 = S.ShaderChunk();
    t7 = t7.$index(t7, "color_pars_vertex");
    t8 = S.ShaderChunk();
    t8 = t8.$index(t8, "morphtarget_pars_vertex");
    t9 = S.ShaderChunk();
    t9 = t9.$index(t9, "skinning_pars_vertex");
    t10 = S.ShaderChunk();
    t10 = t10.$index(t10, "shadowmap_pars_vertex");
    t11 = S.ShaderChunk();
    t11 = t11.$index(t11, "map_vertex");
    t12 = S.ShaderChunk();
    t12 = t12.$index(t12, "lightmap_vertex");
    t13 = S.ShaderChunk();
    t13 = t13.$index(t13, "color_vertex");
    t14 = S.ShaderChunk();
    t14 = t14.$index(t14, "skinbase_vertex");
    t15 = S.ShaderChunk();
    t15 = t15.$index(t15, "morphnormal_vertex");
    t16 = S.ShaderChunk();
    t16 = t16.$index(t16, "skinnormal_vertex");
    t17 = S.ShaderChunk();
    t17 = t17.$index(t17, "defaultnormal_vertex");
    t18 = S.ShaderChunk();
    t18 = t18.$index(t18, "morphtarget_vertex");
    t19 = S.ShaderChunk();
    t19 = t19.$index(t19, "skinning_vertex");
    t20 = S.ShaderChunk();
    t20 = t20.$index(t20, "default_vertex");
    t21 = S.ShaderChunk();
    t21 = t21.$index(t21, "worldpos_vertex");
    t22 = S.ShaderChunk();
    t22 = t22.$index(t22, "envmap_vertex");
    t23 = S.ShaderChunk();
    t23 = C.JSArray_methods.join$1([t4, t1, t6, t7, t8, t9, t10, "void main() {", t11, t12, t13, t14, "#ifdef USE_ENVMAP", t15, t16, t17, "#endif", t18, t19, t20, t21, t22, t23.$index(t23, "shadowmap_vertex"), "}"], "\n");
    t22 = S.ShaderChunk();
    t22 = t22.$index(t22, "color_pars_fragment");
    t21 = S.ShaderChunk();
    t21 = t21.$index(t21, "map_pars_fragment");
    t20 = S.ShaderChunk();
    t20 = t20.$index(t20, "lightmap_pars_fragment");
    t19 = S.ShaderChunk();
    t19 = t19.$index(t19, "envmap_pars_fragment");
    t18 = S.ShaderChunk();
    t18 = t18.$index(t18, "fog_pars_fragment");
    t17 = S.ShaderChunk();
    t17 = t17.$index(t17, "shadowmap_pars_fragment");
    t16 = S.ShaderChunk();
    t16 = t16.$index(t16, "specularmap_pars_fragment");
    t15 = S.ShaderChunk();
    t15 = t15.$index(t15, "map_fragment");
    t14 = S.ShaderChunk();
    t14 = t14.$index(t14, "alphatest_fragment");
    t13 = S.ShaderChunk();
    t13 = t13.$index(t13, "specularmap_fragment");
    t12 = S.ShaderChunk();
    t12 = t12.$index(t12, "lightmap_fragment");
    t11 = S.ShaderChunk();
    t11 = t11.$index(t11, "color_fragment");
    t10 = S.ShaderChunk();
    t10 = t10.$index(t10, "envmap_fragment");
    t9 = S.ShaderChunk();
    t9 = t9.$index(t9, "shadowmap_fragment");
    t8 = S.ShaderChunk();
    t8 = t8.$index(t8, "linear_to_gamma_fragment");
    t7 = S.ShaderChunk();
    t7 = H.fillLiteralMap(["uniforms", t5, "vertexShader", t23, "fragmentShader", C.JSArray_methods.join$1(["uniform vec3 diffuse;", "uniform float opacity;", t22, t21, t20, t19, t18, t17, t16, "void main() {", "gl_FragColor = vec4( diffuse, opacity );", t15, t14, t13, t12, t11, t10, t9, t8, t7.$index(t7, "fog_fragment"), "}"], "\n")], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t8 = S.UniformsLib();
    t8 = t8.$index(t8, "common");
    t9 = S.UniformsLib();
    t9 = t9.$index(t9, "fog");
    t10 = S.UniformsLib();
    t10 = t10.$index(t10, "lights");
    t11 = S.UniformsLib();
    t11 = t11.$index(t11, "shadowmap");
    t12 = new S.Uniform("c", null, true, null);
    t12.set$value(t12, S.Color$(16777215));
    t13 = new S.Uniform("c", null, true, null);
    t13.set$value(t13, S.Color$(0));
    t14 = new Float32Array(3);
    t14.$dartCachedLength = t14.length;
    t14 = new T.Vector3(t14);
    t14.setValues$3(1, 1, 1);
    t15 = new S.Uniform("v3", null, true, null);
    t15.set$value(t15, t14);
    t15 = S.UniformsUtils_merge([t8, t9, t10, t11, H.fillLiteralMap(["ambient", t12, "emissive", t13, "wrapRGB", t15], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))]);
    t13 = S.ShaderChunk();
    t13 = t13.$index(t13, "map_pars_vertex");
    t12 = S.ShaderChunk();
    t12 = t12.$index(t12, "lightmap_pars_vertex");
    t11 = S.ShaderChunk();
    t11 = t11.$index(t11, "envmap_pars_vertex");
    t10 = S.ShaderChunk();
    t10 = t10.$index(t10, "lights_lambert_pars_vertex");
    t9 = S.ShaderChunk();
    t9 = t9.$index(t9, "color_pars_vertex");
    t8 = S.ShaderChunk();
    t8 = t8.$index(t8, "morphtarget_pars_vertex");
    t14 = S.ShaderChunk();
    t14 = t14.$index(t14, "skinning_pars_vertex");
    t16 = S.ShaderChunk();
    t16 = t16.$index(t16, "shadowmap_pars_vertex");
    t17 = S.ShaderChunk();
    t17 = t17.$index(t17, "map_vertex");
    t18 = S.ShaderChunk();
    t18 = t18.$index(t18, "lightmap_vertex");
    t19 = S.ShaderChunk();
    t19 = t19.$index(t19, "color_vertex");
    t20 = S.ShaderChunk();
    t20 = t20.$index(t20, "morphnormal_vertex");
    t21 = S.ShaderChunk();
    t21 = t21.$index(t21, "skinbase_vertex");
    t22 = S.ShaderChunk();
    t22 = t22.$index(t22, "skinnormal_vertex");
    t23 = S.ShaderChunk();
    t23 = t23.$index(t23, "defaultnormal_vertex");
    t5 = S.ShaderChunk();
    t5 = t5.$index(t5, "morphtarget_vertex");
    t6 = S.ShaderChunk();
    t6 = t6.$index(t6, "skinning_vertex");
    t1 = S.ShaderChunk();
    t1 = t1.$index(t1, "default_vertex");
    t4 = S.ShaderChunk();
    t4 = t4.$index(t4, "worldpos_vertex");
    t24 = S.ShaderChunk();
    t24 = t24.$index(t24, "envmap_vertex");
    t25 = S.ShaderChunk();
    t25 = t25.$index(t25, "lights_lambert_vertex");
    t26 = S.ShaderChunk();
    t26 = C.JSArray_methods.join$1(["#define LAMBERT", "varying vec3 vLightFront;", "#ifdef DOUBLE_SIDED", "varying vec3 vLightBack;", "#endif", t13, t12, t11, t10, t9, t8, t14, t16, "void main() {", t17, t18, t19, t20, t21, t22, t23, t5, t6, t1, t4, t24, t25, t26.$index(t26, "shadowmap_vertex"), "}"], "\n");
    t25 = S.ShaderChunk();
    t25 = t25.$index(t25, "color_pars_fragment");
    t24 = S.ShaderChunk();
    t24 = t24.$index(t24, "map_pars_fragment");
    t4 = S.ShaderChunk();
    t4 = t4.$index(t4, "lightmap_pars_fragment");
    t1 = S.ShaderChunk();
    t1 = t1.$index(t1, "envmap_pars_fragment");
    t6 = S.ShaderChunk();
    t6 = t6.$index(t6, "fog_pars_fragment");
    t5 = S.ShaderChunk();
    t5 = t5.$index(t5, "shadowmap_pars_fragment");
    t23 = S.ShaderChunk();
    t23 = t23.$index(t23, "specularmap_pars_fragment");
    t22 = S.ShaderChunk();
    t22 = t22.$index(t22, "map_fragment");
    t21 = S.ShaderChunk();
    t21 = t21.$index(t21, "alphatest_fragment");
    t20 = S.ShaderChunk();
    t20 = t20.$index(t20, "specularmap_fragment");
    t19 = S.ShaderChunk();
    t19 = t19.$index(t19, "lightmap_fragment");
    t18 = S.ShaderChunk();
    t18 = t18.$index(t18, "color_fragment");
    t17 = S.ShaderChunk();
    t17 = t17.$index(t17, "envmap_fragment");
    t16 = S.ShaderChunk();
    t16 = t16.$index(t16, "shadowmap_fragment");
    t14 = S.ShaderChunk();
    t14 = t14.$index(t14, "linear_to_gamma_fragment");
    t8 = S.ShaderChunk();
    t8 = H.fillLiteralMap(["uniforms", t15, "vertexShader", t26, "fragmentShader", C.JSArray_methods.join$1(["uniform float opacity;", "varying vec3 vLightFront;", "#ifdef DOUBLE_SIDED", "varying vec3 vLightBack;", "#endif", t25, t24, t4, t1, t6, t5, t23, "void main() {", "gl_FragColor = vec4( vec3 ( 1.0 ), opacity );", t22, t21, t20, "#ifdef DOUBLE_SIDED", "if ( gl_FrontFacing )", "gl_FragColor.xyz *= vLightFront;", "else", "gl_FragColor.xyz *= vLightBack;", "#else", "gl_FragColor.xyz *= vLightFront;", "#endif", t19, t18, t17, t16, t14, t8.$index(t8, "fog_fragment"), "}"], "\n")], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t14 = S.UniformsLib();
    t14 = t14.$index(t14, "common");
    t16 = S.UniformsLib();
    t16 = t16.$index(t16, "bump");
    t17 = S.UniformsLib();
    t17 = t17.$index(t17, "normalmap");
    t18 = S.UniformsLib();
    t18 = t18.$index(t18, "fog");
    t19 = S.UniformsLib();
    t19 = t19.$index(t19, "lights");
    t20 = S.UniformsLib();
    t20 = t20.$index(t20, "shadowmap");
    t21 = new S.Uniform("c", null, true, null);
    t21.set$value(t21, S.Color$(16777215));
    t22 = new S.Uniform("c", null, true, null);
    t22.set$value(t22, S.Color$(0));
    t23 = new S.Uniform("c", null, true, null);
    t23.set$value(t23, S.Color$(1118481));
    t5 = new S.Uniform("f", null, true, null);
    t5.set$value(t5, 30);
    t6 = new Float32Array(3);
    t6.$dartCachedLength = t6.length;
    t6 = new T.Vector3(t6);
    t6.setValues$3(1, 1, 1);
    t1 = new S.Uniform("v3", null, true, null);
    t1.set$value(t1, t6);
    t1 = S.UniformsUtils_merge([t14, t16, t17, t18, t19, t20, H.fillLiteralMap(["ambient", t21, "emissive", t22, "specular", t23, "shininess", t5, "wrapRGB", t1], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))]);
    t5 = S.ShaderChunk();
    t5 = t5.$index(t5, "map_pars_vertex");
    t23 = S.ShaderChunk();
    t23 = t23.$index(t23, "lightmap_pars_vertex");
    t22 = S.ShaderChunk();
    t22 = t22.$index(t22, "envmap_pars_vertex");
    t21 = S.ShaderChunk();
    t21 = t21.$index(t21, "lights_phong_pars_vertex");
    t20 = S.ShaderChunk();
    t20 = t20.$index(t20, "color_pars_vertex");
    t19 = S.ShaderChunk();
    t19 = t19.$index(t19, "morphtarget_pars_vertex");
    t18 = S.ShaderChunk();
    t18 = t18.$index(t18, "skinning_pars_vertex");
    t17 = S.ShaderChunk();
    t17 = t17.$index(t17, "shadowmap_pars_vertex");
    t16 = S.ShaderChunk();
    t16 = t16.$index(t16, "map_vertex");
    t14 = S.ShaderChunk();
    t14 = t14.$index(t14, "lightmap_vertex");
    t6 = S.ShaderChunk();
    t6 = t6.$index(t6, "color_vertex");
    t4 = S.ShaderChunk();
    t4 = t4.$index(t4, "morphnormal_vertex");
    t24 = S.ShaderChunk();
    t24 = t24.$index(t24, "skinbase_vertex");
    t25 = S.ShaderChunk();
    t25 = t25.$index(t25, "skinnormal_vertex");
    t26 = S.ShaderChunk();
    t26 = t26.$index(t26, "defaultnormal_vertex");
    t15 = S.ShaderChunk();
    t15 = t15.$index(t15, "morphtarget_vertex");
    t9 = S.ShaderChunk();
    t9 = t9.$index(t9, "skinning_vertex");
    t10 = S.ShaderChunk();
    t10 = t10.$index(t10, "default_vertex");
    t11 = S.ShaderChunk();
    t11 = t11.$index(t11, "worldpos_vertex");
    t12 = S.ShaderChunk();
    t12 = t12.$index(t12, "envmap_vertex");
    t13 = S.ShaderChunk();
    t13 = t13.$index(t13, "lights_phong_vertex");
    t27 = S.ShaderChunk();
    t27 = C.JSArray_methods.join$1(["#define PHONG", "varying vec3 vViewPosition;", "varying vec3 vNormal;", t5, t23, t22, t21, t20, t19, t18, t17, "void main() {", t16, t14, t6, t4, t24, t25, t26, "vNormal = normalize( transformedNormal );", t15, t9, t10, "vViewPosition = -mvPosition.xyz;", t11, t12, t13, t27.$index(t27, "shadowmap_vertex"), "}"], "\n");
    t13 = S.ShaderChunk();
    t13 = t13.$index(t13, "color_pars_fragment");
    t12 = S.ShaderChunk();
    t12 = t12.$index(t12, "map_pars_fragment");
    t11 = S.ShaderChunk();
    t11 = t11.$index(t11, "lightmap_pars_fragment");
    t10 = S.ShaderChunk();
    t10 = t10.$index(t10, "envmap_pars_fragment");
    t9 = S.ShaderChunk();
    t9 = t9.$index(t9, "fog_pars_fragment");
    t15 = S.ShaderChunk();
    t15 = t15.$index(t15, "lights_phong_pars_fragment");
    t26 = S.ShaderChunk();
    t26 = t26.$index(t26, "shadowmap_pars_fragment");
    t25 = S.ShaderChunk();
    t25 = t25.$index(t25, "bumpmap_pars_fragment");
    t24 = S.ShaderChunk();
    t24 = t24.$index(t24, "normalmap_pars_fragment");
    t4 = S.ShaderChunk();
    t4 = t4.$index(t4, "specularmap_pars_fragment");
    t6 = S.ShaderChunk();
    t6 = t6.$index(t6, "map_fragment");
    t14 = S.ShaderChunk();
    t14 = t14.$index(t14, "alphatest_fragment");
    t16 = S.ShaderChunk();
    t16 = t16.$index(t16, "specularmap_fragment");
    t17 = S.ShaderChunk();
    t17 = t17.$index(t17, "lights_phong_fragment");
    t18 = S.ShaderChunk();
    t18 = t18.$index(t18, "lightmap_fragment");
    t19 = S.ShaderChunk();
    t19 = t19.$index(t19, "color_fragment");
    t20 = S.ShaderChunk();
    t20 = t20.$index(t20, "envmap_fragment");
    t21 = S.ShaderChunk();
    t21 = t21.$index(t21, "shadowmap_fragment");
    t22 = S.ShaderChunk();
    t22 = t22.$index(t22, "linear_to_gamma_fragment");
    t23 = S.ShaderChunk();
    t23 = H.fillLiteralMap(["uniforms", t1, "vertexShader", t27, "fragmentShader", C.JSArray_methods.join$1(["uniform vec3 diffuse;", "uniform float opacity;", "uniform vec3 ambient;", "uniform vec3 emissive;", "uniform vec3 specular;", "uniform float shininess;", t13, t12, t11, t10, t9, t15, t26, t25, t24, t4, "void main() {", "gl_FragColor = vec4( vec3 ( 1.0 ), opacity );", t6, t14, t16, t17, t18, t19, t20, t21, t22, t23.$index(t23, "fog_fragment"), "}"], "\n")], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t22 = S.UniformsLib();
    t22 = t22.$index(t22, "particle");
    t21 = S.UniformsLib();
    t21 = S.UniformsUtils_merge([t22, t21.$index(t21, "shadowmap")]);
    t22 = S.ShaderChunk();
    t22 = t22.$index(t22, "color_pars_vertex");
    t20 = S.ShaderChunk();
    t20 = t20.$index(t20, "shadowmap_pars_vertex");
    t19 = S.ShaderChunk();
    t19 = t19.$index(t19, "color_vertex");
    t18 = S.ShaderChunk();
    t18 = t18.$index(t18, "worldpos_vertex");
    t17 = S.ShaderChunk();
    t17 = C.JSArray_methods.join$1(["uniform float size;", "uniform float scale;", t22, t20, "void main() {", t19, "vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );", "#ifdef USE_SIZEATTENUATION", "gl_PointSize = size * ( scale / length( mvPosition.xyz ) );", "#else", "gl_PointSize = size;", "#endif", "gl_Position = projectionMatrix * mvPosition;", t18, t17.$index(t17, "shadowmap_vertex"), "}"], "\n");
    t18 = S.ShaderChunk();
    t18 = t18.$index(t18, "color_pars_fragment");
    t19 = S.ShaderChunk();
    t19 = t19.$index(t19, "map_particle_pars_fragment");
    t20 = S.ShaderChunk();
    t20 = t20.$index(t20, "fog_pars_fragment");
    t22 = S.ShaderChunk();
    t22 = t22.$index(t22, "shadowmap_pars_fragment");
    t16 = S.ShaderChunk();
    t16 = t16.$index(t16, "map_particle_fragment");
    t14 = S.ShaderChunk();
    t14 = t14.$index(t14, "alphatest_fragment");
    t6 = S.ShaderChunk();
    t6 = t6.$index(t6, "color_fragment");
    t4 = S.ShaderChunk();
    t4 = t4.$index(t4, "shadowmap_fragment");
    t24 = S.ShaderChunk();
    t24 = H.fillLiteralMap(["uniforms", t21, "vertexShader", t17, "fragmentShader", C.JSArray_methods.join$1(["uniform vec3 psColor;", "uniform float opacity;", t18, t19, t20, t22, "void main() {", "gl_FragColor = vec4( psColor, opacity );", t16, t14, t6, t4, t24.$index(t24, "fog_fragment"), "}"], "\n")], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t4 = S.UniformsLib();
    t4 = t4.$index(t4, "common");
    t6 = S.UniformsLib();
    t6 = t6.$index(t6, "fog");
    t14 = new S.Uniform("f", null, true, null);
    t14.set$value(t14, 1);
    t16 = new S.Uniform("f", null, true, null);
    t16.set$value(t16, 1);
    t22 = new S.Uniform("f", null, true, null);
    t22.set$value(t22, 2);
    t22 = S.UniformsUtils_merge([t4, t6, H.fillLiteralMap(["scale", t14, "dashSize", t16, "totalSize", t22], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))]);
    t16 = S.ShaderChunk();
    t16 = t16.$index(t16, "color_pars_vertex");
    t14 = S.ShaderChunk();
    t14 = C.JSArray_methods.join$1(["uniform float scale;", "attribute float lineDistance;", "varying float vLineDistance;", t16, "void main() {", t14.$index(t14, "color_vertex"), "vLineDistance = scale * lineDistance;", "vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );", "gl_Position = projectionMatrix * mvPosition;", "}"], "\n");
    t16 = S.ShaderChunk();
    t16 = t16.$index(t16, "color_pars_fragment");
    t6 = S.ShaderChunk();
    t6 = t6.$index(t6, "fog_pars_fragment");
    t4 = S.ShaderChunk();
    t4 = t4.$index(t4, "color_fragment");
    t20 = S.ShaderChunk();
    t20 = H.fillLiteralMap(["uniforms", t22, "vertexShader", t14, "fragmentShader", C.JSArray_methods.join$1(["uniform vec3 diffuse;", "uniform float opacity;", "uniform float dashSize;", "uniform float totalSize;", "varying float vLineDistance;", t16, t6, "void main() {", "if ( mod( vLineDistance, totalSize ) > dashSize ) {", "discard;", "}", "gl_FragColor = vec4( diffuse, opacity );", t4, t20.$index(t20, "fog_fragment"), "}"], "\n")], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t4 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t6 = S.ShaderChunk();
    t6 = t6.$index(t6, "morphtarget_pars_vertex");
    t16 = S.ShaderChunk();
    t16 = t16.$index(t16, "skinning_pars_vertex");
    t14 = S.ShaderChunk();
    t14 = t14.$index(t14, "skinbase_vertex");
    t22 = S.ShaderChunk();
    t22 = t22.$index(t22, "morphtarget_vertex");
    t19 = S.ShaderChunk();
    t19 = t19.$index(t19, "skinning_vertex");
    t18 = S.ShaderChunk();
    $.__ShaderLib = H.fillLiteralMap(["depth", t3, "normal", t2, "basic", t7, "lambert", t8, "phong", t23, "particle_basic", t24, "dashed", t20, "depthRGBA", H.fillLiteralMap(["uniforms", t4, "vertexShader", C.JSArray_methods.join$1([t6, t16, "void main() {", t14, t22, t19, t18.$index(t18, "default_vertex"), "}"], "\n"), "fragmentShader", C.JSArray_methods.join$1(["vec4 pack_depth( const in float depth ) {", "const vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );", "const vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );", "vec4 res = fract( depth * bit_shift );", "res -= res.xxyz * bit_mask;", "return res;", "}", "void main() {", "gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );", "}"], "\n")], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  }
  return $.__ShaderLib;
},

Gyroscope: {"": "Object3D;translationWorld,translationObject,rotationWorld,rotationObject,scaleWorld,scaleObject,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,__data",
  updateMatrixWorld$1$force: function(force) {
    var t1, t2, t3, t4, l, i;
    if (this.matrixAutoUpdate)
      this.updateMatrix$0();
    if (this.matrixWorldNeedsUpdate || force) {
      t1 = this.parent;
      t2 = this.matrix;
      if (t1 != null) {
        t1 = t1.get$matrixWorld();
        this.matrixWorld = t1.$mul(t1, t2);
        t1 = this.translationWorld;
        t3 = this.scaleWorld;
        S.decompose(this.matrixWorld, t1, this.rotationWorld, t3);
        t4 = this.rotationObject;
        S.decompose(t2, this.translationObject, t4, this.scaleObject);
        S.compose(this.matrixWorld, t1, t4, t3);
      } else
        this.matrixWorld.setFrom$1(t2);
      this.matrixWorldNeedsUpdate = false;
      force = true;
    }
    t1 = this.children;
    l = t1.length;
    for (i = 0; i < l; ++i)
      t1[i].updateMatrixWorld$1(force);
  },
  updateMatrixWorld$0: function() {
    return this.updateMatrixWorld$1$force(false);
  },
  static: {
Gyroscope$: function() {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17;
  t1 = new Float32Array(3);
  t1.$dartCachedLength = t1.length;
  t2 = new Float32Array(3);
  t2.$dartCachedLength = t2.length;
  t3 = T.Quaternion$identity();
  t4 = T.Quaternion$identity();
  t5 = new Float32Array(3);
  t5.$dartCachedLength = t5.length;
  t6 = new Float32Array(3);
  t6.$dartCachedLength = t6.length;
  t7 = $.Object3DCount;
  $.Object3DCount = t7 + 1;
  t8 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  t9 = new Float32Array(3);
  t9.$dartCachedLength = t9.length;
  t9 = new T.Vector3(t9);
  t9.setValues$3(0, 1, 0);
  t10 = new Float32Array(3);
  t10.$dartCachedLength = t10.length;
  t10 = new T.Vector3(t10);
  t10.setValues$3(0, 0, 0);
  t11 = new Float32Array(3);
  t11.$dartCachedLength = t11.length;
  t11 = new T.Vector3(t11);
  t11.setValues$3(0, 0, 0);
  t12 = new Float32Array(3);
  t12.$dartCachedLength = t12.length;
  t12 = new T.Vector3(t12);
  t12.setValues$3(1, 1, 1);
  t13 = new Float32Array(16);
  t13.$dartCachedLength = t13.length;
  t13 = new T.Matrix4(t13);
  t13.setIdentity$0();
  t14 = new Float32Array(16);
  t14.$dartCachedLength = t14.length;
  t14 = new T.Matrix4(t14);
  t14.setIdentity$0();
  t15 = new Float32Array(16);
  t15.$dartCachedLength = t15.length;
  t15 = new T.Matrix4(t15);
  t15.setIdentity$0();
  t16 = T.Quaternion$identity();
  t17 = new Float32Array(3);
  t17.$dartCachedLength = t17.length;
  return new S.Gyroscope(new T.Vector3(t1), new T.Vector3(t2), t3, t4, new T.Vector3(t5), new T.Vector3(t6), t7, "", t8, null, [], t9, t10, t11, t12, "XYZ", null, null, null, true, null, t13, t14, t15, true, true, t16, false, 0, 1, true, false, false, true, new T.Vector3(t17), null, null);
}}

},

CameraHelper: {"": "Line;camera,matrixWorld@,matrixAutoUpdate<,pointMap,geometry,material,type,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,three$Object3D$matrixWorld,matrixRotationWorld,three$Object3D$matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,__data",
  addPoint$2: function(id, hex) {
    var t1, t2, t3;
    t1 = this.geometry;
    t2 = t1.vertices;
    t3 = new Float32Array(3);
    t3.$dartCachedLength = t3.length;
    J.add$1$ax(t2, new T.Vector3(t3));
    t1.colors.push(S.Color$(hex));
    t2 = this.pointMap;
    if (!t2.containsKey$1(t2, id))
      t2.$indexSet(t2, id, []);
    J.add$1$ax(t2.$index(t2, id), J.get$length$asx(t1.vertices) - 1);
  },
  setPoint$4: function(point, x, y, z) {
    var t1, points, il, t2, i;
    $.get$CameraHelper___v().setValues$3(x, y, z);
    $.get$CameraHelper___projector().unprojectVector$2($.get$CameraHelper___v(), $.get$CameraHelper___c());
    t1 = this.pointMap;
    points = t1.$index(t1, point);
    if (points != null) {
      t1 = J.getInterceptor$asx(points);
      il = t1.get$length(points);
      if (typeof il !== "number")
        throw H.iae(il);
      t2 = this.geometry;
      i = 0;
      for (; i < il; ++i)
        J.$index$asx(t2.vertices, t1.$index(points, i)).setFrom$1($.get$CameraHelper___v());
    }
  },
  update$0: function(_) {
    var t1;
    $.get$CameraHelper___c().projectionMatrix.setFrom$1(this.camera.projectionMatrix);
    this.setPoint$4("c", 0, 0, -1);
    this.setPoint$4("t", 0, 0, 1);
    this.setPoint$4("n1", -1, -1, -1);
    this.setPoint$4("n2", 1, -1, -1);
    this.setPoint$4("n3", -1, 1, -1);
    this.setPoint$4("n4", 1, 1, -1);
    this.setPoint$4("f1", -1, -1, 1);
    this.setPoint$4("f2", 1, -1, 1);
    this.setPoint$4("f3", -1, 1, 1);
    this.setPoint$4("f4", 1, 1, 1);
    this.setPoint$4("u1", 0.7, 1.1, -1);
    this.setPoint$4("u2", -0.7, 1.1, -1);
    this.setPoint$4("u3", 0, 2, -1);
    this.setPoint$4("cf1", -1, 0, 1);
    this.setPoint$4("cf2", 1, 0, 1);
    this.setPoint$4("cf3", 0, -1, 1);
    this.setPoint$4("cf4", 0, 1, 1);
    this.setPoint$4("cn1", -1, 0, -1);
    this.setPoint$4("cn2", 1, 0, -1);
    this.setPoint$4("cn3", 0, -1, -1);
    this.setPoint$4("cn4", 0, 1, -1);
    t1 = this.geometry.get$_data();
    t1.$indexSet(t1, "verticesNeedUpdate", true);
  },
  CameraHelper$1: function(camera) {
    this.matrixWorld = this.camera.matrixWorld;
    this.addPoint$2("n1", 16755200);
    this.addPoint$2("n2", 16755200);
    this.addPoint$2("n2", 16755200);
    this.addPoint$2("n4", 16755200);
    this.addPoint$2("n4", 16755200);
    this.addPoint$2("n3", 16755200);
    this.addPoint$2("n3", 16755200);
    this.addPoint$2("n1", 16755200);
    this.addPoint$2("f1", 16755200);
    this.addPoint$2("f2", 16755200);
    this.addPoint$2("f2", 16755200);
    this.addPoint$2("f4", 16755200);
    this.addPoint$2("f4", 16755200);
    this.addPoint$2("f3", 16755200);
    this.addPoint$2("f3", 16755200);
    this.addPoint$2("f1", 16755200);
    this.addPoint$2("n1", 16755200);
    this.addPoint$2("f1", 16755200);
    this.addPoint$2("n2", 16755200);
    this.addPoint$2("f2", 16755200);
    this.addPoint$2("n3", 16755200);
    this.addPoint$2("f3", 16755200);
    this.addPoint$2("n4", 16755200);
    this.addPoint$2("f4", 16755200);
    this.addPoint$2("p", 16711680);
    this.addPoint$2("n1", 16711680);
    this.addPoint$2("p", 16711680);
    this.addPoint$2("n2", 16711680);
    this.addPoint$2("p", 16711680);
    this.addPoint$2("n3", 16711680);
    this.addPoint$2("p", 16711680);
    this.addPoint$2("n4", 16711680);
    this.addPoint$2("u1", 43775);
    this.addPoint$2("u2", 43775);
    this.addPoint$2("u2", 43775);
    this.addPoint$2("u3", 43775);
    this.addPoint$2("u3", 43775);
    this.addPoint$2("u1", 43775);
    this.addPoint$2("c", 16777215);
    this.addPoint$2("t", 16777215);
    this.addPoint$2("p", 3355443);
    this.addPoint$2("c", 3355443);
    this.addPoint$2("cn1", 3355443);
    this.addPoint$2("cn2", 3355443);
    this.addPoint$2("cn3", 3355443);
    this.addPoint$2("cn4", 3355443);
    this.addPoint$2("cf1", 3355443);
    this.addPoint$2("cf2", 3355443);
    this.addPoint$2("cf3", 3355443);
    this.addPoint$2("cf4", 3355443);
    this.update$0(this);
  },
  static: {
"": "CameraHelper___projector,CameraHelper___v,CameraHelper___c",
CameraHelper$: function(camera) {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14;
  t1 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  t2 = S.Geometry$();
  t3 = S.Color$(16777215);
  t4 = $.MaterialCount;
  $.MaterialCount = t4 + 1;
  t4 = new S.LineBasicMaterial(t3, 1, "round", "round", true, 1, "", t4, 0, 1, 1, 204, 205, 100, 0, false, 0, 0, false, true, true, false, true, true, null);
  t3 = $.Object3DCount;
  $.Object3DCount = t3 + 1;
  t5 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  t6 = new Float32Array(3);
  t6.$dartCachedLength = t6.length;
  t6 = new T.Vector3(t6);
  t6.setValues$3(0, 1, 0);
  t7 = new Float32Array(3);
  t7.$dartCachedLength = t7.length;
  t7 = new T.Vector3(t7);
  t7.setValues$3(0, 0, 0);
  t8 = new Float32Array(3);
  t8.$dartCachedLength = t8.length;
  t8 = new T.Vector3(t8);
  t8.setValues$3(0, 0, 0);
  t9 = new Float32Array(3);
  t9.$dartCachedLength = t9.length;
  t9 = new T.Vector3(t9);
  t9.setValues$3(1, 1, 1);
  t10 = new Float32Array(16);
  t10.$dartCachedLength = t10.length;
  t10 = new T.Matrix4(t10);
  t10.setIdentity$0();
  t11 = new Float32Array(16);
  t11.$dartCachedLength = t11.length;
  t11 = new T.Matrix4(t11);
  t11.setIdentity$0();
  t12 = new Float32Array(16);
  t12.$dartCachedLength = t12.length;
  t12 = new T.Matrix4(t12);
  t12.setIdentity$0();
  t13 = T.Quaternion$identity();
  t14 = new Float32Array(3);
  t14.$dartCachedLength = t14.length;
  t14 = new S.CameraHelper(camera, null, false, t1, t2, t4, 1, t3, "", t5, null, [], t6, t7, t8, t9, "XYZ", null, null, null, true, null, t10, t11, t12, true, true, t13, false, 0, 1, true, false, false, true, new T.Vector3(t14), null, null);
  t14.Line$3(t2, t4, 1);
  t14.CameraHelper$1(camera);
  return t14;
}}

},

ShadowMapPlugin: {"": "Object;_frustum,_projScreenMatrix,_min,_max,_gl,_renderer,_depthMaterial,_depthMaterialMorph,_depthMaterialSkin,_depthMaterialMorphSkin",
  init$1: function(renderer) {
    var t1, depthShader, depthUniforms, t2, t3, t4, t5;
    this._gl = renderer._gl;
    this._renderer = renderer;
    t1 = S.ShaderLib();
    depthShader = t1.$index(t1, "depthRGBA");
    t1 = J.getInterceptor$asx(depthShader);
    depthUniforms = S.UniformsUtils_clone(t1.$index(depthShader, "uniforms"));
    t2 = t1.$index(depthShader, "fragmentShader");
    t3 = t1.$index(depthShader, "vertexShader");
    t4 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t5 = $.MaterialCount;
    $.MaterialCount = t5 + 1;
    t5 = new S.ShaderMaterial(t2, t3, null, 2, false, 1, false, false, false, false, 0, true, null, t4, "", t5, 0, 1, 1, 204, 205, 100, 0, false, 0, 0, false, true, true, false, true, true, null);
    t5.uniforms = depthUniforms;
    this._depthMaterial = S.WebGLMaterial_WebGLMaterial$from(t5);
    t2 = t1.$index(depthShader, "fragmentShader");
    t3 = t1.$index(depthShader, "vertexShader");
    t4 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t5 = $.MaterialCount;
    $.MaterialCount = t5 + 1;
    t5 = new S.ShaderMaterial(t2, t3, null, 2, false, 1, false, false, true, false, 0, true, null, t4, "", t5, 0, 1, 1, 204, 205, 100, 0, false, 0, 0, false, true, true, false, true, true, null);
    t5.uniforms = depthUniforms;
    this._depthMaterialMorph = S.WebGLMaterial_WebGLMaterial$from(t5);
    t2 = t1.$index(depthShader, "fragmentShader");
    t3 = t1.$index(depthShader, "vertexShader");
    t4 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t5 = $.MaterialCount;
    $.MaterialCount = t5 + 1;
    t5 = new S.ShaderMaterial(t2, t3, null, 2, false, 1, false, true, false, false, 0, true, null, t4, "", t5, 0, 1, 1, 204, 205, 100, 0, false, 0, 0, false, true, true, false, true, true, null);
    t5.uniforms = depthUniforms;
    this._depthMaterialSkin = S.WebGLMaterial_WebGLMaterial$from(t5);
    t2 = t1.$index(depthShader, "fragmentShader");
    t1 = t1.$index(depthShader, "vertexShader");
    t3 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t4 = $.MaterialCount;
    $.MaterialCount = t4 + 1;
    t4 = new S.ShaderMaterial(t2, t1, null, 2, false, 1, false, true, true, false, 0, true, null, t3, "", t4, 0, 1, 1, 204, 205, 100, 0, false, 0, 0, false, true, true, false, true, true, null);
    t4.uniforms = depthUniforms;
    this._depthMaterialMorphSkin = S.WebGLMaterial_WebGLMaterial$from(t4);
    this._depthMaterial.set$shadowPass(true);
    this._depthMaterialMorph.set$shadowPass(true);
    this._depthMaterialSkin.set$shadowPass(true);
    this._depthMaterialMorphSkin.set$shadowPass(true);
  },
  render$4: function(scene, camera, width, height) {
    var t1 = this._renderer;
    if (!(t1.shadowMapEnabled && t1.shadowMapAutoUpdate))
      return;
    this.update$2(this, scene, camera);
  },
  get$render: function() {
    return new S.BoundClosure$4(this, S.ShadowMapPlugin.prototype.render$4, null, "render$4");
  },
  update$2: function(_, scene, camera) {
    var lights, t1, t2, il, i, n, virtualLight, light, gyro, line, j, jl, shadowMap, shadowMatrix, shadowCamera, buffer, material, webglObject, object, renderList, shadowFilter, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, objectMaterial, useMorphing, useSkinning, clearColor, clearAlpha;
    lights = [];
    J.clearColor$4$x(this._gl, 1, 1, 1, 1);
    J.disable$1$x(this._gl, 3042);
    J.enable$1$x(this._gl, 2884);
    J.frontFace$1$x(this._gl, 2305);
    t1 = this._renderer.shadowMapCullFrontFaces;
    t2 = this._gl;
    if (t1 === 2)
      J.cullFace$1$x(t2, 1028);
    else
      J.cullFace$1$x(t2, 1029);
    this._renderer.setDepthTest$1(true);
    il = J.get$length$asx(scene.get$lights());
    for (t1 = J.getInterceptor$ax(camera), i = 0, n = null, virtualLight = null; i < il; ++i) {
      light = J.$index$asx(scene.get$lights(), i);
      if (!light.get$castShadow())
        continue;
      if (typeof light === "object" && light !== null && !!light.$isDirectionalLight && light.shadowCascade)
        for (n = 0; n < light.get$shadowCascadeCount(); ++n) {
          if (n >= 0)
            throw H.ioore(light.shadowCascadeArray, n);
          virtualLight = this.createVirtualLight$2(light, n);
          virtualLight.set$originalCamera(camera);
          gyro = S.Gyroscope$();
          gyro.position = light.shadowCascadeOffset;
          gyro.add$1(gyro, virtualLight);
          gyro.add$1(gyro, virtualLight.target);
          t1.add$1(camera, gyro);
          light.shadowCascadeArray[n] = virtualLight;
          line = "Created virtualLight " + H.S(virtualLight);
          H.printToConsole(line);
          this.updateVirtualLight$2(light, n);
          lights.push(virtualLight);
        }
      else
        lights.push(light);
    }
    il = lights.length;
    for (t1 = this._frustum, i = 0, j = null, jl = null, shadowMap = null, shadowMatrix = null, shadowCamera = null, buffer = null, material = null, webglObject = null, object = null, renderList = null; i < il; ++i) {
      if (i >= lights.length)
        throw H.ioore(lights, i);
      light = lights[i];
      if (light.get$shadowMap() == null) {
        shadowFilter = this._renderer.shadowMapType === 2 ? 3 : 6;
        t2 = new S.WebGLRenderTarget(light.shadowMapWidth, light.shadowMapHeight, null, null, true, true, true, null, null, null, null, null, null, 1, 1, shadowFilter, shadowFilter, 18, 10, 1, null, null, null, null, null, null, null, 4, [], null);
        t2.Texture$9(null, null, 1, 1, shadowFilter, shadowFilter, 18, 10, 1);
        if (t2.offset == null) {
          t3 = new Float32Array(2);
          t3.$dartCachedLength = t3.length;
          t2.offset = new T.Vector2(t3);
        }
        if (t2.repeat == null) {
          t3 = new Float32Array(2);
          t3.$dartCachedLength = t3.length;
          t3 = new T.Vector2(t3);
          t4 = t3.storage;
          t4[0] = 1;
          t4[1] = 1;
          t2.repeat = t3;
        }
        light.shadowMap = t2;
        t2 = light.shadowMapWidth;
        t3 = light.shadowMapHeight;
        t4 = new Float32Array(2);
        t4.$dartCachedLength = t4.length;
        t4 = new T.Vector2(t4);
        t5 = t4.storage;
        t5[0] = t2;
        t5[1] = t3;
        light.shadowMapSize = t4;
        t4 = new Float32Array(16);
        t4.$dartCachedLength = t4.length;
        t4 = new T.Matrix4(t4);
        t4.setIdentity$0();
        light.shadowMatrix = t4;
      }
      if (light.shadowCamera == null) {
        if (!!light.$isDirectionalLight) {
          t2 = light.shadowCameraLeft;
          t3 = light.shadowCameraRight;
          t4 = light.shadowCameraTop;
          t5 = light.shadowCameraBottom;
          t6 = light.shadowCameraNear;
          t7 = light.shadowCameraFar;
          t8 = new Float32Array(16);
          t8.$dartCachedLength = t8.length;
          t8 = new T.Matrix4(t8);
          t8.setIdentity$0();
          t9 = new Float32Array(16);
          t9.$dartCachedLength = t9.length;
          t9 = new T.Matrix4(t9);
          t9.setIdentity$0();
          t10 = new Float32Array(16);
          t10.$dartCachedLength = t10.length;
          t10 = new T.Matrix4(t10);
          t10.setIdentity$0();
          t11 = $.Object3DCount;
          $.Object3DCount = t11 + 1;
          t12 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
          t13 = new Float32Array(3);
          t13.$dartCachedLength = t13.length;
          t13 = new T.Vector3(t13);
          t14 = t13.storage;
          t14[0] = 0;
          t14[1] = 1;
          t14[2] = 0;
          t14 = new Float32Array(3);
          t14.$dartCachedLength = t14.length;
          t14 = new T.Vector3(t14);
          t15 = t14.storage;
          t15[0] = 0;
          t15[1] = 0;
          t15[2] = 0;
          t15 = new Float32Array(3);
          t15.$dartCachedLength = t15.length;
          t15 = new T.Vector3(t15);
          t16 = t15.storage;
          t16[0] = 0;
          t16[1] = 0;
          t16[2] = 0;
          t16 = new Float32Array(3);
          t16.$dartCachedLength = t16.length;
          t16 = new T.Vector3(t16);
          t17 = t16.storage;
          t17[0] = 1;
          t17[1] = 1;
          t17[2] = 1;
          t17 = new Float32Array(16);
          t17.$dartCachedLength = t17.length;
          t17 = new T.Matrix4(t17);
          t17.setIdentity$0();
          t18 = new Float32Array(16);
          t18.$dartCachedLength = t18.length;
          t18 = new T.Matrix4(t18);
          t18.setIdentity$0();
          t19 = new Float32Array(16);
          t19.$dartCachedLength = t19.length;
          t19 = new T.Matrix4(t19);
          t19.setIdentity$0();
          t20 = new Float32Array(4);
          t20.$dartCachedLength = t20.length;
          t20 = new T.Quaternion(t20);
          t20.storage[3] = 1;
          t21 = new Float32Array(3);
          t21.$dartCachedLength = t21.length;
          t21 = new S.OrthographicCamera(t2, t3, t4, t5, t8, t9, t10, t6, t7, t11, "", t12, null, [], t13, t14, t15, t16, "XYZ", null, null, null, true, null, t17, t18, t19, true, true, t20, false, 0, 1, true, false, false, true, new T.Vector3(t21), null, null);
          T.setOrthographicMatrix(t21.projectionMatrix, t21.left, t21.right, t21.bottom, t21.top, t21.near, t21.far);
          light.shadowCamera = t21;
        } else {
          H.printToConsole("Unsupported light type for shadow");
          continue;
        }
        scene.add$1(scene, light.shadowCamera);
        if (this._renderer.autoUpdateScene)
          scene.updateMatrixWorld$0();
      }
      if (light.shadowCameraVisible && light.cameraHelper == null) {
        light.cameraHelper = S.CameraHelper$(light.shadowCamera);
        t2 = light.shadowCamera;
        t2.add$1(t2, light.cameraHelper);
      }
      if (!!light.$isVirtualLight)
        virtualLight.get$originalCamera();
      shadowMap = light.shadowMap;
      shadowMatrix = light.shadowMatrix;
      shadowCamera = light.shadowCamera;
      shadowCamera.position = light.matrixWorld.getTranslation$0();
      t2 = light.get$target(light).matrixWorld.getTranslation$0();
      t3 = shadowCamera.matrix;
      S.makeLookAt(t3, shadowCamera.position, t2, shadowCamera.up);
      if (shadowCamera.rotationAutoUpdate)
        shadowCamera.rotation = S.calcEulerFromRotationMatrix(t3, shadowCamera.eulerOrder);
      shadowCamera.updateMatrixWorld$0();
      t2 = shadowCamera.matrixWorldInverse;
      t2.copyInverse$1(shadowCamera.matrixWorld);
      t3 = light.cameraHelper;
      if (t3 != null)
        t3.visible = light.shadowCameraVisible;
      if (light.shadowCameraVisible) {
        t3 = light.cameraHelper;
        t3.update$0(t3);
      }
      shadowMatrix.setValues$16(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);
      shadowMatrix.multiply$1(shadowMatrix, shadowCamera.projectionMatrix);
      shadowMatrix.multiply$1(shadowMatrix, t2);
      t3 = shadowCamera.projectionMatrix;
      this._projScreenMatrix = t3.$mul(t3, t2);
      t1.setFromMatrix$1(this._projScreenMatrix);
      this._renderer.setRenderTarget$1(shadowMap);
      t3 = this._renderer;
      t3.clear$0(t3);
      renderList = scene.$index(scene, "__webglObjects");
      t3 = J.getInterceptor$asx(renderList);
      jl = t3.get$length(renderList);
      if (typeof jl !== "number")
        throw H.iae(jl);
      j = 0;
      for (; j < jl; ++j) {
        webglObject = t3.$index(renderList, j);
        object = webglObject.get$object();
        webglObject.render = false;
        if (object.get$visible(object) && object.get$castShadow()) {
          webglObject._modelViewMatrix = t2.$mul(t2, object.get$matrixWorld());
          webglObject.render = true;
        }
      }
      jl = t3.get$length(renderList);
      if (typeof jl !== "number")
        throw H.iae(jl);
      j = 0;
      objectMaterial = null;
      useMorphing = null;
      useSkinning = null;
      for (; j < jl; ++j) {
        webglObject = t3.$index(renderList, j);
        if (webglObject.get$render() === true) {
          object = webglObject.get$object();
          buffer = webglObject.buffer;
          object.get$material();
          objectMaterial = object.get$material();
          object.get$geometry().morphTargets;
          object.get$customDepthMaterial();
          material = this._depthMaterial;
          this._renderer.renderBuffer$6(shadowCamera, scene.get$lights(), null, material, buffer, object);
          useMorphing = false;
          useSkinning = false;
        }
      }
      renderList = scene.$index(scene, "__webglObjectsImmediate");
      t3 = J.getInterceptor$asx(renderList);
      jl = t3.get$length(renderList);
      if (typeof jl !== "number")
        throw H.iae(jl);
      j = 0;
      for (; j < jl; ++j) {
        webglObject = t3.$index(renderList, j);
        object = webglObject.get$object();
        if (object.get$visible(object) && object.get$castShadow()) {
          t4 = object.get$_modelViewMatrix();
          t4.multiply$2(t4, t2, object.get$matrixWorld());
          this._renderer.renderImmediateObject$5(shadowCamera, scene.get$lights(), null, this._depthMaterial, object);
        }
      }
    }
    t1 = this._renderer;
    clearColor = t1._clearColor;
    clearAlpha = t1._clearAlpha;
    J.clearColor$4$x(this._gl, clearColor._r, clearColor._g, clearColor._b, clearAlpha);
    J.enable$1$x(this._gl, 3042);
    if (this._renderer.shadowMapCullFrontFaces === 2)
      J.cullFace$1$x(this._gl, 1029);
  },
  createVirtualLight$2: function(light, cascade) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, virtualLight, pointsWorld, pointsFrustum, i, nearZ, farZ;
    t1 = new S.Color(1, 1, 1);
    t1.setHex$1(0);
    t2 = $.Object3DCount;
    $.Object3DCount = t2 + 1;
    t3 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t4 = new Float32Array(3);
    t4.$dartCachedLength = t4.length;
    t4 = new T.Vector3(t4);
    t5 = t4.storage;
    t5[0] = 0;
    t5[1] = 1;
    t5[2] = 0;
    t5 = new Float32Array(3);
    t5.$dartCachedLength = t5.length;
    t5 = new T.Vector3(t5);
    t6 = t5.storage;
    t6[0] = 0;
    t6[1] = 0;
    t6[2] = 0;
    t6 = new Float32Array(3);
    t6.$dartCachedLength = t6.length;
    t6 = new T.Vector3(t6);
    t7 = t6.storage;
    t7[0] = 0;
    t7[1] = 0;
    t7[2] = 0;
    t7 = new Float32Array(3);
    t7.$dartCachedLength = t7.length;
    t7 = new T.Vector3(t7);
    t8 = t7.storage;
    t8[0] = 1;
    t8[1] = 1;
    t8[2] = 1;
    t8 = new Float32Array(16);
    t8.$dartCachedLength = t8.length;
    t8 = new T.Matrix4(t8);
    t8.setIdentity$0();
    t9 = new Float32Array(16);
    t9.$dartCachedLength = t9.length;
    t9 = new T.Matrix4(t9);
    t9.setIdentity$0();
    t10 = new Float32Array(16);
    t10.$dartCachedLength = t10.length;
    t10 = new T.Matrix4(t10);
    t10.setIdentity$0();
    t11 = new Float32Array(4);
    t11.$dartCachedLength = t11.length;
    t11 = new T.Quaternion(t11);
    t11.storage[3] = 1;
    t12 = new Float32Array(3);
    t12.$dartCachedLength = t12.length;
    virtualLight = new S.VirtualLight([], [], null, null, 1, 0, null, null, null, null, null, null, null, null, null, null, null, null, null, false, false, 50, 5000, 50, false, 0, 0.5, 512, 512, null, null, null, null, null, t1, t2, "", t3, null, [], t4, t5, t6, t7, "XYZ", null, null, null, true, null, t8, t9, t10, true, true, t11, false, 0, 1, true, false, false, true, new T.Vector3(t12), null, null);
    virtualLight.DirectionalLight$3(0, 1, 0);
    virtualLight.onlyShadow = true;
    virtualLight.castShadow = true;
    virtualLight.shadowCameraNear = light.shadowCameraNear;
    virtualLight.shadowCameraFar = light.shadowCameraFar;
    virtualLight.shadowCameraLeft = light.shadowCameraLeft;
    virtualLight.shadowCameraRight = light.shadowCameraRight;
    virtualLight.shadowCameraBottom = light.shadowCameraBottom;
    virtualLight.shadowCameraTop = light.shadowCameraTop;
    virtualLight.shadowCameraVisible = light.shadowCameraVisible;
    virtualLight.shadowDarkness = light.shadowDarkness;
    t12 = light.shadowCascadeBias;
    if (cascade < 0 || cascade >= 3)
      throw H.ioore(t12, cascade);
    virtualLight.shadowBias = t12[cascade];
    virtualLight.shadowMapWidth = light.shadowCascadeWidth[cascade];
    virtualLight.shadowMapHeight = light.shadowCascadeHeight[cascade];
    virtualLight.pointsWorld = [];
    virtualLight.pointsFrustum = [];
    pointsWorld = virtualLight.pointsWorld;
    pointsFrustum = virtualLight.pointsFrustum;
    for (i = 0; i < 8; ++i) {
      t1 = new Float32Array(3);
      t1.$dartCachedLength = t1.length;
      if (i >= 0)
        throw H.ioore(pointsWorld, i);
      pointsWorld[i] = new T.Vector3(t1);
      t1 = new Float32Array(3);
      t1.$dartCachedLength = t1.length;
      pointsFrustum[i] = new T.Vector3(t1);
    }
    nearZ = light.shadowCascadeNearZ[cascade];
    farZ = light.shadowCascadeFarZ[cascade];
    if (0 >= 0)
      throw H.ioore(pointsFrustum, 0);
    t1 = pointsFrustum[0];
    t1.set$3(t1, -1, -1, nearZ);
    throw H.ioore(pointsFrustum, 1);
    t1 = pointsFrustum[1];
    t1.set$3(t1, 1, -1, nearZ);
    throw H.ioore(pointsFrustum, 2);
    t1 = pointsFrustum[2];
    t1.set$3(t1, -1, 1, nearZ);
    throw H.ioore(pointsFrustum, 3);
    t1 = pointsFrustum[3];
    t1.set$3(t1, 1, 1, nearZ);
    throw H.ioore(pointsFrustum, 4);
    t1 = pointsFrustum[4];
    t1.set$3(t1, -1, -1, farZ);
    throw H.ioore(pointsFrustum, 5);
    t1 = pointsFrustum[5];
    t1.set$3(t1, 1, -1, farZ);
    throw H.ioore(pointsFrustum, 6);
    t1 = pointsFrustum[6];
    t1.set$3(t1, -1, 1, farZ);
    throw H.ioore(pointsFrustum, 7);
    t1 = pointsFrustum[7];
    t1.set$3(t1, 1, 1, farZ);
    return virtualLight;
  },
  updateVirtualLight$2: function(light, cascade) {
    var t1, virtualLight, nearZ, farZ, pointsFrustum;
    t1 = light.shadowCascadeArray;
    if (cascade < 0 || cascade >= 0)
      throw H.ioore(t1, cascade);
    virtualLight = t1[cascade];
    virtualLight.get$position(virtualLight).copy$1(light.position);
    t1 = virtualLight.get$target(virtualLight);
    t1.get$position(t1).copy$1(light.target.position);
    virtualLight.lookAt$1(t1);
    virtualLight.set$shadowCameraVisible(light.shadowCameraVisible);
    virtualLight.set$shadowDarkness(light.shadowDarkness);
    virtualLight.set$shadowBias(light.shadowCascadeBias[cascade]);
    nearZ = light.shadowCascadeNearZ[cascade];
    farZ = light.shadowCascadeFarZ[cascade];
    pointsFrustum = virtualLight.get$pointsFrustum();
    t1 = pointsFrustum.$index(pointsFrustum, 0);
    t1.set$z(t1, nearZ);
    t1 = pointsFrustum.$index(pointsFrustum, 1);
    t1.set$z(t1, nearZ);
    t1 = pointsFrustum.$index(pointsFrustum, 2);
    t1.set$z(t1, nearZ);
    t1 = pointsFrustum.$index(pointsFrustum, 3);
    t1.set$z(t1, nearZ);
    t1 = pointsFrustum.$index(pointsFrustum, 4);
    t1.set$z(t1, farZ);
    t1 = pointsFrustum.$index(pointsFrustum, 5);
    t1.set$z(t1, farZ);
    t1 = pointsFrustum.$index(pointsFrustum, 6);
    t1.set$z(t1, farZ);
    t1 = pointsFrustum.$index(pointsFrustum, 7);
    t1.set$z(t1, farZ);
  },
  static: {
"": "ShadowMapPlugin___projector",
ShadowMapPlugin$: function() {
  var t1, t2, t3, t4;
  t1 = S.Frustum$();
  t2 = new Float32Array(16);
  t2.$dartCachedLength = t2.length;
  t2 = new T.Matrix4(t2);
  t2.setIdentity$0();
  t3 = new Float32Array(3);
  t3.$dartCachedLength = t3.length;
  t4 = new Float32Array(3);
  t4.$dartCachedLength = t4.length;
  return new S.ShadowMapPlugin(t1, t2, new T.Vector3(t3), new T.Vector3(t4), null, null, null, null, null, null);
}}

},

VirtualLight: {"": "DirectionalLight;pointsWorld,pointsFrustum,position,target,intensity,distance,shadowCameraLeft,shadowCameraRight,shadowCameraTop,shadowCameraBottom,shadowCascade,shadowCascadeOffset,shadowCascadeCount,shadowCascadeBias,shadowCascadeWidth,shadowCascadeHeight,shadowCascadeNearZ,shadowCascadeFarZ,shadowCascadeArray,castShadow,onlyShadow,shadowCameraNear,shadowCameraFar,shadowCameraFov,shadowCameraVisible,shadowBias,shadowDarkness,shadowMapWidth,shadowMapHeight,shadowMap,shadowMapSize,shadowCamera,shadowMatrix,cameraHelper,color,id,name,properties,parent,children,up,three$Object3D$position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,three$Object3D$castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,__data", $isVirtualLight: true},

Camera: {"": "Object3D;matrixWorldInverse<,projectionMatrix<,projectionMatrixInverse<,near,far,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,__data", $isCamera: true, static: {
Camera$: function(near, far) {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14;
  t1 = new Float32Array(16);
  t1.$dartCachedLength = t1.length;
  t1 = new T.Matrix4(t1);
  t1.setIdentity$0();
  t2 = new Float32Array(16);
  t2.$dartCachedLength = t2.length;
  t2 = new T.Matrix4(t2);
  t2.setIdentity$0();
  t3 = new Float32Array(16);
  t3.$dartCachedLength = t3.length;
  t3 = new T.Matrix4(t3);
  t3.setIdentity$0();
  t4 = $.Object3DCount;
  $.Object3DCount = t4 + 1;
  t5 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  t6 = new Float32Array(3);
  t6.$dartCachedLength = t6.length;
  t6 = new T.Vector3(t6);
  t6.setValues$3(0, 1, 0);
  t7 = new Float32Array(3);
  t7.$dartCachedLength = t7.length;
  t7 = new T.Vector3(t7);
  t7.setValues$3(0, 0, 0);
  t8 = new Float32Array(3);
  t8.$dartCachedLength = t8.length;
  t8 = new T.Vector3(t8);
  t8.setValues$3(0, 0, 0);
  t9 = new Float32Array(3);
  t9.$dartCachedLength = t9.length;
  t9 = new T.Vector3(t9);
  t9.setValues$3(1, 1, 1);
  t10 = new Float32Array(16);
  t10.$dartCachedLength = t10.length;
  t10 = new T.Matrix4(t10);
  t10.setIdentity$0();
  t11 = new Float32Array(16);
  t11.$dartCachedLength = t11.length;
  t11 = new T.Matrix4(t11);
  t11.setIdentity$0();
  t12 = new Float32Array(16);
  t12.$dartCachedLength = t12.length;
  t12 = new T.Matrix4(t12);
  t12.setIdentity$0();
  t13 = T.Quaternion$identity();
  t14 = new Float32Array(3);
  t14.$dartCachedLength = t14.length;
  return new S.Camera(t1, t2, t3, near, far, t4, "", t5, null, [], t6, t7, t8, t9, "XYZ", null, null, null, true, null, t10, t11, t12, true, true, t13, false, 0, 1, true, false, false, true, new T.Vector3(t14), null, null);
}}
},

OrthographicCamera: {"": "Camera;left,right,top,bottom,matrixWorldInverse,projectionMatrix,projectionMatrixInverse,near,far,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,__data"},

PerspectiveCamera: {"": "Camera;fov,aspect,_fullWidth,_fullHeight,_x,_y,_width,_height,matrixWorldInverse,projectionMatrix,projectionMatrixInverse,near,far,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,__data",
  updateProjectionMatrix$0: function() {
    this.projectionMatrix = T.makePerspectiveMatrix(this.fov * 0.017453292519943295, this.aspect, this.near, this.far);
  }
},

Color: {"": "Object;_r,_g,_b",
  get$r: function(_) {
    return this._r;
  },
  get$g: function() {
    return this._g;
  },
  get$b: function(_) {
    return this._b;
  },
  setRGB$3: function(newR, newG, newB) {
    this._r = C.JSNumber_methods.toDouble$0(newR);
    this._g = C.JSNumber_methods.toDouble$0(newG);
    this._b = C.JSNumber_methods.toDouble$0(newB);
    return this;
  },
  setHSL$3: function(h, s, l) {
    var hue2rgb, p, q;
    if (s === 0) {
      this._b = C.JSDouble_methods.toDouble$0(l);
      this._g = C.JSDouble_methods.toDouble$0(l);
      this._r = C.JSDouble_methods.toDouble$0(l);
    } else {
      hue2rgb = new S.Color_setHSL_closure();
      p = l <= 0.5 ? l * (1 + s) : l + s - l * s;
      q = 2 * l - p;
      this._r = J.toDouble$0$n(hue2rgb.call$3(q, p, h + 0.3333333333333333));
      this._g = J.toDouble$0$n(hue2rgb.call$3(q, p, h));
      this._b = J.toDouble$0$n(hue2rgb.call$3(q, p, h - 0.3333333333333333));
    }
    return this;
  },
  setHex$1: function(hex) {
    var h = C.JSInt_methods.toInt$0(C.JSNumber_methods.floor$0(hex));
    this._r = C.JSInt_methods.toDouble$0(C.JSInt_methods.$shr(h & 16711680, 16) / 255);
    this._g = C.JSInt_methods.toDouble$0(C.JSInt_methods.$shr(h & 65280, 8) / 255);
    this._b = C.JSInt_methods.toDouble$0((h & 255) / 255);
    return this;
  },
  clone$0: function(_) {
    return S.Color$(null).setRGB$3(this._r, this._g, this._b);
  },
  Color$1: function(hex) {
    if (typeof hex === "number")
      this.setHex$1(hex);
  },
  $isColor: true,
  static: {
Color$: function(hex) {
  var t1 = new S.Color(1, 1, 1);
  t1.Color$1(hex);
  return t1;
}}

},

Color_setHSL_closure: {"": "Closure;",
  call$3: function(p, q, t) {
    var t1 = J.getInterceptor$n(t);
    if (t1.$lt(t, 0))
      t = t1.$add(t, 1);
    t1 = J.getInterceptor$n(t);
    if (t1.$gt(t, 1))
      t = t1.$sub(t, 1);
    t1 = J.getInterceptor$n(t);
    if (t1.$lt(t, 0.16666666666666666))
      return J.$add$ns(p, J.$mul$n(J.$mul$n(J.$sub$n(q, p), 6), t));
    if (t1.$lt(t, 0.5))
      return q;
    if (t1.$lt(t, 0.6666666666666666)) {
      t1 = J.$mul$n(J.$sub$n(q, p), 6);
      if (typeof t !== "number")
        throw H.iae(t);
      return J.$add$ns(p, J.$mul$n(t1, 0.6666666666666666 - t));
    }
    return p;
  }
},

EventEmitterEvent: {"": "Object;type>,message,content>"},

EventEmitter: {"": "Object;",
  addEventListener$2: function(_, type, listener) {
    var t1 = this.listeners;
    if (t1.$index(t1, type) == null)
      t1.$indexSet(t1, type, []);
    if (J.indexOf$1$asx(t1.$index(t1, type), listener) === -1)
      J.add$1$ax(t1.$index(t1, type), listener);
  },
  dispatchEvent$1: function(_, $event) {
    var t1, t2;
    t1 = this.listeners;
    t2 = $event.type;
    if (t1.$index(t1, t2) != null)
      J.forEach$1$ax(t1.$index(t1, t2), new S.EventEmitter_dispatchEvent_closure($event));
  }
},

EventEmitter_dispatchEvent_closure: {"": "Closure;event_0",
  call$1: function(listener) {
    return listener.call$1(this.event_0);
  },
  $is_args1: true
},

Frustum: {"": "Object;planes",
  setFromMatrix$1: function(m) {
    var me0, me1, me2, me3, me4, me5, me6, me7, me8, me9, me10, me11, me12, me13, me14, me15, t1, i, plane, t2, t3, t4, divisor;
    me0 = m.$index(m, 0);
    me1 = m.$index(m, 1);
    me2 = m.$index(m, 2);
    me3 = m.$index(m, 3);
    me4 = m.$index(m, 4);
    me5 = m.$index(m, 5);
    me6 = m.$index(m, 6);
    me7 = m.$index(m, 7);
    me8 = m.$index(m, 8);
    me9 = m.$index(m, 9);
    me10 = m.$index(m, 10);
    me11 = m.$index(m, 11);
    me12 = m.$index(m, 12);
    me13 = m.$index(m, 13);
    me14 = m.$index(m, 14);
    me15 = m.$index(m, 15);
    t1 = this.planes;
    t1[0].setValues$4(me3 - me0, me7 - me4, me11 - me8, me15 - me12);
    t1[1].setValues$4(me3 + me0, me7 + me4, me11 + me8, me15 + me12);
    t1[2].setValues$4(me3 + me1, me7 + me5, me11 + me9, me15 + me13);
    t1[3].setValues$4(me3 - me1, me7 - me5, me11 - me9, me15 - me13);
    t1[4].setValues$4(me3 - me2, me7 - me6, me11 - me10, me15 - me14);
    t1[5].setValues$4(me3 + me2, me7 + me6, me11 + me10, me15 + me14);
    for (i = 0; i < 6; ++i) {
      plane = t1[i];
      t2 = plane.storage;
      t3 = t2[0];
      t4 = t2[1];
      t2 = t2[2];
      divisor = Math.sqrt(t3 * t3 + t4 * t4 + t2 * t2);
      if (divisor > 0)
        plane.scale$1(plane, 1 / divisor);
    }
  },
  contains$1: function(_, object) {
    var m, radius, t1, i;
    m = object.get$matrixWorld();
    radius = -object.get$geometry().boundingSphere.radius * S.calcMaxScaleOnAxis(m);
    for (t1 = this.planes, i = 0; i < 6; ++i)
      if (t1[i].storage[0] * m.$index(m, 12) + t1[i].storage[1] * m.$index(m, 13) + t1[i].storage[2] * m.$index(m, 14) + t1[i].storage[3] <= radius)
        return false;
    return true;
  },
  static: {
"": "Frustum____v1",
Frustum$: function() {
  var t1, t2, t3, t4, t5, t6;
  t1 = new Float32Array(4);
  t1.$dartCachedLength = t1.length;
  t1 = new T.Vector4(t1);
  t1.setValues$4(0, 0, 0, 1);
  t2 = new Float32Array(4);
  t2.$dartCachedLength = t2.length;
  t2 = new T.Vector4(t2);
  t2.setValues$4(0, 0, 0, 1);
  t3 = new Float32Array(4);
  t3.$dartCachedLength = t3.length;
  t3 = new T.Vector4(t3);
  t3.setValues$4(0, 0, 0, 1);
  t4 = new Float32Array(4);
  t4.$dartCachedLength = t4.length;
  t4 = new T.Vector4(t4);
  t4.setValues$4(0, 0, 0, 1);
  t5 = new Float32Array(4);
  t5.$dartCachedLength = t5.length;
  t5 = new T.Vector4(t5);
  t5.setValues$4(0, 0, 0, 1);
  t6 = new Float32Array(4);
  t6.$dartCachedLength = t6.length;
  t6 = new T.Vector4(t6);
  t6.setValues$4(0, 0, 0, 1);
  return new S.Frustum([t1, t2, t3, t4, t5, t6]);
}}

},

Geometry: {"": "Object;id>,name,vertices<,colors,normals,materials,faces,faceUvs,faceVertexUvs,morphTargets,morphColors,morphNormals,skinWeights,skinIndices,lineDistances,__tmpVertices,boundingBox,boundingSphere,hasTangents,_dynamic,bones,animation,__data",
  computeBoundingSphere$0: function() {
    var t1, maxRadiusSq;
    t1 = {};
    t1.radiusSq_0 = null;
    maxRadiusSq = J.fold$2$ax(this.vertices, 0, new S.Geometry_computeBoundingSphere_closure(t1));
    if (typeof maxRadiusSq !== "number")
      H.throwExpression(new P.ArgumentError(maxRadiusSq));
    this.boundingSphere = new S.BoundingSphere(Math.sqrt(maxRadiusSq));
  },
  clone$0: function(_) {
  },
  get$_data: function() {
    if (this.__data == null)
      this.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    return this.__data;
  },
  $index: function(_, key) {
    var t1 = this.get$_data();
    return t1.$index(t1, key);
  },
  $indexSet: function(_, key, value) {
    var t1 = this.get$_data();
    t1.$indexSet(t1, key, value);
    return value;
  },
  $isGeometry: true,
  static: {
Geometry$: function() {
  var t1, t2;
  t1 = $.GeometryCount;
  $.GeometryCount = t1 + 1;
  t2 = [];
  H.setRuntimeTypeInfo(t2, [T.Vector3]);
  return new S.Geometry(t1, "", t2, [], [], [], [], [[]], [[]], [], [], [], [], [], [], null, null, null, false, false, null, null, null);
}}

},

Geometry_computeBoundingSphere_closure: {"": "Closure;box_0",
  call$2: function(curMaxRadiusSq, vertex) {
    var t1 = this.box_0;
    t1.radiusSq_0 = vertex.get$length2();
    t1 = t1.radiusSq_0;
    if (typeof t1 !== "number")
      throw t1.$gt();
    if (typeof curMaxRadiusSq !== "number")
      throw H.iae(curMaxRadiusSq);
    if (t1 > curMaxRadiusSq)
      ;
    else
      t1 = curMaxRadiusSq;
    return t1;
  },
  $is_args2: true
},

BoundingSphere: {"": "Object;radius"},

Object3D: {"": "Object;id>,name,properties,parent*,children,up,position>,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld@,matrixRotationWorld,matrixAutoUpdate<,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible>,castShadow<,receiveShadow<,frustumCulled,_vector,customDepthMaterial<,__data",
  add$1: function(_, object) {
    var t1, scene, scene0;
    t1 = J.getInterceptor(object);
    if (t1.$eq(object, this)) {
      P.print("THREE.Object3D.add: An object can't be added as a child of itself.");
      return;
    }
    if (t1.get$parent(object) != null)
      J.remove$1$ax(t1.get$parent(object), object);
    t1.set$parent(object, this);
    this.children.push(object);
    for (scene = this; scene0 = scene.parent, scene0 != null; scene = scene0)
      ;
    if (typeof scene === "object" && scene !== null && !!scene.$isScene)
      scene.addObject$1(object);
  },
  remove$1: function(_, object) {
    var t1, index, scene, scene0;
    t1 = this.children;
    index = H.Arrays_indexOf(t1, object, 0, t1.length);
    if (index !== -1) {
      J.set$parent$x(object, null);
      C.JSArray_methods.removeAt$1(t1, index);
      for (scene = this; scene0 = scene.parent, scene0 != null; scene = scene0)
        ;
      if (typeof scene === "object" && scene !== null && !!scene.$isScene)
        scene.removeObject$1(object);
    }
  },
  updateMatrix$0: function() {
    var t1, t2, t3;
    t1 = this.matrix;
    if (this.useQuaternion)
      S.setRotationFromQuaternion(t1, this.quaternion);
    else
      S.setRotationFromEuler(t1, this.rotation, this.eulerOrder);
    t1 = this.matrix;
    t1.setTranslation$1(this.get$position(this));
    t2 = this.scale;
    t3 = t2.storage;
    if (t3[0] !== 1 || t3[1] !== 1 || t3[2] !== 1) {
      t1.scale$1(t1, t2);
      this.boundRadiusScale = P.max(t3[0], P.max(t3[1], t3[2]));
    }
    this.matrixWorldNeedsUpdate = true;
  },
  updateMatrixWorld$1$force: function(force) {
    var t1, t2, t3;
    t1 = {};
    t1.force_0 = force;
    if (this.get$matrixAutoUpdate())
      this.updateMatrix$0();
    if (this.matrixWorldNeedsUpdate || t1.force_0) {
      t2 = this.parent;
      t3 = this.matrix;
      if (t2 != null) {
        t2 = t2.get$matrixWorld();
        this.set$matrixWorld(t2.$mul(t2, t3));
      } else {
        t2 = new Float32Array(16);
        t2.$dartCachedLength = t2.length;
        t2 = new T.Matrix4(t2);
        t2.setFrom$1(t3);
        this.set$matrixWorld(t2);
      }
      this.matrixWorldNeedsUpdate = false;
      t1.force_0 = true;
    }
    H.IterableMixinWorkaround_forEach(this.children, new S.Object3D_updateMatrixWorld_closure(t1));
  },
  updateMatrixWorld$0: function() {
    return this.updateMatrixWorld$1$force(false);
  },
  clone$0: function(_) {
  },
  get$_data: function() {
    if (this.__data == null)
      this.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    return this.__data;
  },
  $index: function(_, key) {
    var t1 = this.get$_data();
    return t1.$index(t1, key);
  },
  $indexSet: function(_, key, value) {
    var t1 = this.get$_data();
    t1.$indexSet(t1, key, value);
    return value;
  },
  static: {
"": "Object3D____m1",
Object3D$: function() {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11;
  t1 = $.Object3DCount;
  $.Object3DCount = t1 + 1;
  t2 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  t3 = new Float32Array(3);
  t3.$dartCachedLength = t3.length;
  t3 = new T.Vector3(t3);
  t3.setValues$3(0, 1, 0);
  t4 = new Float32Array(3);
  t4.$dartCachedLength = t4.length;
  t4 = new T.Vector3(t4);
  t4.setValues$3(0, 0, 0);
  t5 = new Float32Array(3);
  t5.$dartCachedLength = t5.length;
  t5 = new T.Vector3(t5);
  t5.setValues$3(0, 0, 0);
  t6 = new Float32Array(3);
  t6.$dartCachedLength = t6.length;
  t6 = new T.Vector3(t6);
  t6.setValues$3(1, 1, 1);
  t7 = new Float32Array(16);
  t7.$dartCachedLength = t7.length;
  t7 = new T.Matrix4(t7);
  t7.setIdentity$0();
  t8 = new Float32Array(16);
  t8.$dartCachedLength = t8.length;
  t8 = new T.Matrix4(t8);
  t8.setIdentity$0();
  t9 = new Float32Array(16);
  t9.$dartCachedLength = t9.length;
  t9 = new T.Matrix4(t9);
  t9.setIdentity$0();
  t10 = T.Quaternion$identity();
  t11 = new Float32Array(3);
  t11.$dartCachedLength = t11.length;
  return new S.Object3D(t1, "", t2, null, [], t3, t4, t5, t6, "XYZ", null, null, null, true, null, t7, t8, t9, true, true, t10, false, 0, 1, true, false, false, true, new T.Vector3(t11), null, null);
}}

},

Object3D_updateMatrixWorld_closure: {"": "Closure;box_0",
  call$1: function(c) {
    return c.updateMatrixWorld$1$force(this.box_0.force_0);
  },
  $is_args1: true
},

Projector: {"": "Object;_objectPool,_vertexPool,_face4Pool,_face3Pool,_linePool,_particlePool,_objectCount,_vertexCount,_face3Count,_face4Count,_lineCount,_particleCount,_object,_vertex,_line,_particle,_vector3,_vector4,_clippedVertex1PositionScreen,_clippedVertex2PositionScreen,_renderData,_viewProjectionMatrix,_modelViewProjectionMatrix,_frustum",
  unprojectVector$2: function(vector, camera) {
    var t1;
    camera.get$projectionMatrixInverse().copyInverse$1(camera.projectionMatrix);
    t1 = camera.matrixWorld;
    this._viewProjectionMatrix = t1.$mul(t1, camera.projectionMatrixInverse);
    return vector.applyProjection$1(this._viewProjectionMatrix);
  },
  static: {
Projector$: function() {
  var t1, t2, t3, t4, t5, t6, t7, t8;
  t1 = S.ProjectorRenderData$();
  t2 = new Float32Array(3);
  t2.$dartCachedLength = t2.length;
  t3 = new Float32Array(4);
  t3.$dartCachedLength = t3.length;
  t3 = new T.Vector4(t3);
  t3.setValues$4(0, 0, 0, 1);
  t4 = new Float32Array(16);
  t4.$dartCachedLength = t4.length;
  t4 = new T.Matrix4(t4);
  t4.setIdentity$0();
  t5 = new Float32Array(16);
  t5.$dartCachedLength = t5.length;
  t5 = new T.Matrix4(t5);
  t5.setIdentity$0();
  t6 = S.Frustum$();
  t7 = new Float32Array(4);
  t7.$dartCachedLength = t7.length;
  t7 = new T.Vector4(t7);
  t7.setValues$4(0, 0, 0, 1);
  t8 = new Float32Array(4);
  t8.$dartCachedLength = t8.length;
  t8 = new T.Vector4(t8);
  t8.setValues$4(0, 0, 0, 1);
  return new S.Projector([], [], [], [], [], [], null, null, null, null, null, null, null, null, null, null, new T.Vector3(t2), t3, t7, t8, t1, t4, t5, t6);
}}

},

ProjectorRenderData: {"": "Object;objects,sprites,lights<,elements", static: {
ProjectorRenderData$: function() {
  return new S.ProjectorRenderData([], [], [], []);
}}
},

calcEulerFromRotationMatrix_closure: {"": "Closure;",
  call$1: function(x) {
    return P.min(P.max(x, -1), 1);
  },
  $is_args1: true
},

DirectionalLight: {"": "ShadowCaster;position>,target>,intensity<,shadowCascadeCount<",
  DirectionalLight$3: function(hex, intensity, distance) {
    var t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector3(t1);
    t1.setValues$3(0, 1, 0);
    this.position = t1;
    this.target = S.Object3D$();
    this.shadowCameraLeft = -500;
    this.shadowCameraRight = 500;
    this.shadowCameraTop = 500;
    this.shadowCameraBottom = -500;
    this.shadowCascade = false;
    t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector3(t1);
    t1.setValues$3(0, 0, -1000);
    this.shadowCascadeOffset = t1;
    this.shadowCascadeCount = 2;
    this.shadowCascadeBias = [0, 0, 0];
    this.shadowCascadeWidth = [512, 512, 512];
    this.shadowCascadeHeight = [512, 512, 512];
    this.shadowCascadeNearZ = [-1, 0.99, 0.998];
    this.shadowCascadeFarZ = [0.99, 0.998, 1];
    this.shadowCascadeArray = [];
  },
  $isDirectionalLight: true
},

Light: {"": "Object3D;color>", $isLight: true},

ShadowCaster: {"": "Light;castShadow<,onlyShadow<,shadowMap<"},

ImageLoader: {"": "EventEmitter;crossOrigin,listeners",
  load$2: function(_, url, image) {
    var t1, t2, t3;
    t1 = {};
    t1.image_0 = image;
    if (t1.image_0 == null)
      t1.image_0 = W.ImageElement_ImageElement(null, null, null);
    t2 = J.get$onLoad$x(t1.image_0);
    t3 = new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new S.ImageLoader_load_closure(t1, this)), t2._useCapture);
    H.setRuntimeTypeInfo(t3, [H.getRuntimeTypeArgument(t2, "_EventStream", 0)]);
    t3._tryResume$0();
    t3 = J.get$onError$x(t1.image_0);
    t2 = new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(new S.ImageLoader_load_closure0(this, url)), t3._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t3, "_EventStream", 0)]);
    t2._tryResume$0();
    t2 = this.crossOrigin;
    if (t2 != null)
      J.set$crossOrigin$x(t1.image_0, t2);
    J.set$src$x(t1.image_0, url);
  }
},

ImageLoader_load_closure: {"": "Closure;box_0,this_1",
  call$1: function(_) {
    var t1 = this.this_1;
    t1.dispatchEvent$1(t1, new S.EventEmitterEvent("load", null, this.box_0.image_0));
  },
  $is_args1: true
},

ImageLoader_load_closure0: {"": "Closure;this_2,url_3",
  call$1: function(_) {
    var t1 = this.this_2;
    t1.dispatchEvent$1(t1, new S.EventEmitterEvent("error", "Couldn't load URL [" + this.url_3 + "]", null));
  },
  $is_args1: true
},

LineBasicMaterial: {"": "Material;color>,linewidth<,linecap,linejoin,fog<,vertexColors<,name,id,side,opacity,blending,blendSrc,blendDst,blendEquation,alphaTest,polygonOffset,polygonOffsetFactor,polygonOffsetUnits,transparent,depthTest,depthWrite,overdraw,visible,needsUpdate,__data", $isLineBasicMaterial: true},

UVMapping: {"": "Object;"},

Material: {"": "Object;id>,side<,blending<,blendSrc<,blendDst<,blendEquation>,polygonOffset>,polygonOffsetFactor<,polygonOffsetUnits<,transparent<,depthTest<,depthWrite<,visible>,needsUpdate@",
  get$_data: function() {
    if (this.__data == null)
      this.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    return this.__data;
  },
  $index: function(_, key) {
    var t1 = this.get$_data();
    return t1.$index(t1, key);
  },
  $indexSet: function(_, key, value) {
    var t1 = this.get$_data();
    t1.$indexSet(t1, key, value);
    return value;
  }
},

ShaderMaterial: {"": "Material;fragmentShader,vertexShader,uniforms,shading<,wireframe<,wireframeLinewidth,lights<,skinning<,morphTargets<,morphNormals<,vertexColors<,fog<,attributes>,defines,name,id,side,opacity,blending,blendSrc,blendDst,blendEquation,alphaTest,polygonOffset,polygonOffsetFactor,polygonOffsetUnits,transparent,depthTest,depthWrite,overdraw,visible,needsUpdate,__data", $isShaderMaterial: true},

Line: {"": "Object3D;geometry<,material<,type>",
  Line$3: function(geometry, material, type) {
    var t1 = this.geometry;
    if (t1 != null)
      if (t1.boundingSphere == null)
        t1.computeBoundingSphere$0();
  },
  $isLine: true
},

ParticleSystem: {"": "Object3D;geometry<,material<,sortParticles,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,__data",
  ParticleSystem$2: function(geometry, material) {
    var t1 = this.geometry;
    if (t1 != null) {
      if (t1.boundingSphere == null)
        t1.computeBoundingSphere$0();
      this.boundRadius = t1.boundingSphere.radius;
    }
    this.frustumCulled = false;
  },
  $isParticleSystem: true,
  static: {
ParticleSystem$: function(geometry, material) {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11;
  t1 = $.Object3DCount;
  $.Object3DCount = t1 + 1;
  t2 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  t3 = new Float32Array(3);
  t3.$dartCachedLength = t3.length;
  t3 = new T.Vector3(t3);
  t3.setValues$3(0, 1, 0);
  t4 = new Float32Array(3);
  t4.$dartCachedLength = t4.length;
  t4 = new T.Vector3(t4);
  t4.setValues$3(0, 0, 0);
  t5 = new Float32Array(3);
  t5.$dartCachedLength = t5.length;
  t5 = new T.Vector3(t5);
  t5.setValues$3(0, 0, 0);
  t6 = new Float32Array(3);
  t6.$dartCachedLength = t6.length;
  t6 = new T.Vector3(t6);
  t6.setValues$3(1, 1, 1);
  t7 = new Float32Array(16);
  t7.$dartCachedLength = t7.length;
  t7 = new T.Matrix4(t7);
  t7.setIdentity$0();
  t8 = new Float32Array(16);
  t8.$dartCachedLength = t8.length;
  t8 = new T.Matrix4(t8);
  t8.setIdentity$0();
  t9 = new Float32Array(16);
  t9.$dartCachedLength = t9.length;
  t9 = new T.Matrix4(t9);
  t9.setIdentity$0();
  t10 = T.Quaternion$identity();
  t11 = new Float32Array(3);
  t11.$dartCachedLength = t11.length;
  t11 = new S.ParticleSystem(geometry, material, false, t1, "", t2, null, [], t3, t4, t5, t6, "XYZ", null, null, null, true, null, t7, t8, t9, true, true, t10, false, 0, 1, true, false, false, true, new T.Vector3(t11), null, null);
  t11.ParticleSystem$2(geometry, material);
  return t11;
}}

},

WebGLRenderTarget: {"": "Texture;width,height,offset*,repeat@,depthBuffer,stencilBuffer,generateMipmaps@,shareDepthFrom,__webglFramebuffer,__webglRenderbuffer,id,image,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,three$Texture$offset,three$Texture$repeat,three$Texture$generateMipmaps,premultiplyAlpha,needsUpdate,onUpdate,flipY,unpackAlignment,mipmaps,__data",
  clone$0: function(_) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11;
    t1 = this.width;
    t2 = this.height;
    t3 = this.wrapS;
    t4 = this.wrapT;
    t5 = this.magFilter;
    t6 = this.anisotropy;
    t7 = this.minFilter;
    t8 = this.offset;
    t8.toString;
    t9 = new Float32Array(2);
    t9.$dartCachedLength = t9.length;
    t9 = new T.Vector2(t9);
    t9.setFrom$1(t8);
    t8 = this.repeat;
    t8.toString;
    t10 = new Float32Array(2);
    t10.$dartCachedLength = t10.length;
    t10 = new T.Vector2(t10);
    t10.setFrom$1(t8);
    t8 = this.format;
    t11 = this.type;
    t10 = new S.WebGLRenderTarget(t1, t2, t9, t10, this.depthBuffer, this.stencilBuffer, this.generateMipmaps, this.shareDepthFrom, null, null, null, null, null, t3, t4, t5, t7, t8, t11, t6, null, null, null, null, null, null, null, 4, [], null);
    t10.Texture$9(null, null, t3, t4, t5, t7, t8, t11, t6);
    if (t10.offset == null) {
      t1 = new Float32Array(2);
      t1.$dartCachedLength = t1.length;
      t10.offset = new T.Vector2(t1);
    }
    if (t10.repeat == null) {
      t1 = new Float32Array(2);
      t1.$dartCachedLength = t1.length;
      t1 = new T.Vector2(t1);
      t2 = t1.storage;
      t2[0] = 1;
      t2[1] = 1;
      t10.repeat = t1;
    }
    return t10;
  }
},

WebGLRenderer: {"": "Object;canvas,_gl,precision,_clearColor,_clearAlpha,devicePixelRatio,alpha,premultipliedAlpha,antialias,stencil,preserveDrawingBuffer,autoClear,autoClearColor,autoClearDepth,autoClearStencil,sortObjects,autoUpdateObjects,autoUpdateScene,gammaInput,gammaOutput,physicallyBasedShading,shadowMapEnabled,shadowMapAutoUpdate,shadowMapDebug,shadowMapCascade,shadowMapType,shadowMapCullFrontFaces,maxMorphTargets,maxMorphNormals,autoScaleCubemaps,renderPluginsPre,renderPluginsPost,info,_programs,_programs_counter,_currentProgram,_currentFramebuffer,_currentMaterialId,_currentGeometryGroupHash,_currentCamera,_geometryGroupCounter,_usedTextureUnits,_enabledAttributes,_oldDoubleSided,_oldFlipSided,_oldBlending,_oldBlendEquation,_oldBlendSrc,_oldBlendDst,_oldDepthTest,_oldDepthWrite,_oldPolygonOffset,_oldPolygonOffsetFactor,_oldPolygonOffsetUnits,_oldLineWidth,_viewportX,_viewportY,_viewportWidth,_viewportHeight,_currentWidth,_currentHeight,_frustum,_projScreenMatrix,_projScreenMatrixPS,_vector3,_direction,_lights,_lightsNeedUpdate,_glExtensionTextureFloat,_glExtensionStandardDerivatives,_glExtensionTextureFilterAnisotropic,_glExtensionCompressedTextureS3TC,maxAnisotropy,supportsVertexTextures,supportsBoneTextures,shadowMapPlugin,maxTextures,maxVertexTextures,maxTextureSize,maxCubemapSize",
  setSize$2: function(width, height) {
    var t1, t2;
    t1 = this.canvas;
    t2 = this.devicePixelRatio;
    if (typeof width !== "number")
      throw width.$mul();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    J.set$width$x(t1, C.JSNumber_methods.toInt$0(width * t2));
    t2 = this.canvas;
    t1 = this.devicePixelRatio;
    if (typeof height !== "number")
      throw height.$mul();
    if (typeof t1 !== "number")
      throw H.iae(t1);
    J.set$height$x(t2, C.JSNumber_methods.toInt$0(height * t1));
    J.set$width$x(this.canvas.style, "" + width + "px");
    J.set$height$x(this.canvas.style, "" + height + "px");
    t1 = this.canvas;
    t2 = J.getInterceptor$x(t1);
    this.setViewport$4(0, 0, t2.get$width(t1), t2.get$height(t1));
  },
  setViewport$4: function(x, y, width, height) {
    this._viewportX = x;
    this._viewportY = y;
    this._viewportWidth = width !== -1 ? width : J.get$width$x(this.canvas);
    this._viewportHeight = height !== -1 ? height : J.get$height$x(this.canvas);
    J.viewport$4$x(this._gl, this._viewportX, this._viewportY, this._viewportWidth, this._viewportHeight);
  },
  clear$3: function(_, color, depth, stencil) {
    var bits = color ? 16384 : 0;
    if (depth) {
      if (typeof 256 !== "number")
        throw H.iae(256);
      bits = (bits | 256) >>> 0;
    }
    if (stencil) {
      if (typeof 1024 !== "number")
        throw H.iae(1024);
      bits = (bits | 1024) >>> 0;
    }
    J.clear$1$ax(this._gl, bits);
  },
  clear$0: function($receiver) {
    return this.clear$3($receiver, true, true, true);
  },
  createMeshBuffers$1: function(geometryGroup) {
    var ml, m, t1;
    geometryGroup.__webglVertexBuffer = J.createBuffer$0$x(this._gl);
    geometryGroup.__webglNormalBuffer = J.createBuffer$0$x(this._gl);
    geometryGroup.__webglTangentBuffer = J.createBuffer$0$x(this._gl);
    geometryGroup.__webglColorBuffer = J.createBuffer$0$x(this._gl);
    geometryGroup.__webglUVBuffer = J.createBuffer$0$x(this._gl);
    geometryGroup.__webglUV2Buffer = J.createBuffer$0$x(this._gl);
    geometryGroup.__webglSkinIndicesBuffer = J.createBuffer$0$x(this._gl);
    geometryGroup.__webglSkinWeightsBuffer = J.createBuffer$0$x(this._gl);
    geometryGroup.__webglFaceBuffer = J.createBuffer$0$x(this._gl);
    geometryGroup.__webglLineBuffer = J.createBuffer$0$x(this._gl);
    geometryGroup.__webglMorphTargetsBuffers = [];
    ml = geometryGroup.numMorphTargets;
    for (m = 0; m < ml; ++m)
      geometryGroup.__webglMorphTargetsBuffers.push(J.createBuffer$0$x(this._gl));
    geometryGroup.__webglMorphNormalsBuffers = [];
    ml = geometryGroup.numMorphNormals;
    for (m = 0; m < ml; ++m)
      geometryGroup.__webglMorphNormalsBuffers.push(J.createBuffer$0$x(this._gl));
    t1 = this.info.memory;
    t1.geometries = t1.geometries + 1;
  },
  deallocateMaterial$1: function(material) {
    var program, t1, il, i, deleteProgram, programInfo, t2, newPrograms;
    program = material.program;
    if (program == null)
      return;
    material.program = null;
    for (t1 = this._programs, il = t1.length, i = 0; deleteProgram = false, i < il; ++i) {
      programInfo = t1[i];
      t2 = programInfo.glProgram;
      if (t2 == null ? program == null : t2 === program) {
        programInfo.usedTimes = programInfo.usedTimes - 1;
        deleteProgram = programInfo.usedTimes === 0 && true;
        break;
      }
    }
    if (deleteProgram) {
      newPrograms = [];
      for (il = this._programs.length, i = 0; i < il; ++i) {
        t1 = this._programs;
        if (i >= t1.length)
          throw H.ioore(t1, i);
        programInfo = t1[i];
        t1 = programInfo.glProgram;
        if (t1 == null ? program != null : t1 !== program)
          newPrograms.push(programInfo);
      }
      this._programs = newPrograms;
      J.deleteProgram$1$x(this._gl, program);
      t1 = this.info.memory;
      t1.programs = t1.programs - 1;
    }
  },
  initCustomAttributes$2: function(geometry, object) {
    var nvertices, material, t1;
    nvertices = J.get$length$asx(geometry.get$vertices());
    material = S.WebGLMaterial_WebGLMaterial$from(object.object.get$material());
    t1 = J.getInterceptor$x(material);
    if (t1.get$attributes(material) != null) {
      if (geometry.__webglCustomAttributesList == null)
        geometry.__webglCustomAttributesList = [];
      t1 = t1.get$attributes(material);
      t1.forEach$1(t1, new S.WebGLRenderer_initCustomAttributes_closure(this, geometry, nvertices));
    }
  },
  initParticleBuffers$2: function(geometry, object) {
    var nvertices, t1, t2;
    nvertices = J.get$length$asx(geometry.get$vertices());
    t1 = nvertices * 3;
    t2 = new Float32Array(t1);
    t2.$dartCachedLength = t2.length;
    geometry.set$__vertexArray(t2);
    t1 = new Float32Array(t1);
    t1.$dartCachedLength = t1.length;
    geometry.__colorArray = t1;
    geometry.__sortArray = [];
    geometry.__webglParticleCount = nvertices;
    this.initCustomAttributes$2(geometry, object);
  },
  initLineBuffers$2: function(geometry, object) {
    var nvertices, t1, t2;
    nvertices = J.get$length$asx(geometry.get$vertices());
    t1 = nvertices * 3;
    t2 = new Float32Array(t1);
    t2.$dartCachedLength = t2.length;
    geometry.set$__vertexArray(t2);
    t1 = new Float32Array(t1);
    t1.$dartCachedLength = t1.length;
    geometry.__colorArray = t1;
    t1 = new Float32Array(nvertices * 1);
    t1.$dartCachedLength = t1.length;
    geometry.__lineDistanceArray = t1;
    geometry.__webglLineCount = nvertices;
    this.initCustomAttributes$2(geometry, object);
  },
  initMeshBuffers$2: function(geometryGroup, object) {
    var t1, geometry, faces3, faces4, t2, nvertices, material, uvType, normalType, vertexColorType, t3, t4, ml, m, t5;
    t1 = object.object;
    t1 = !!t1.$isParticleSystem || !!t1.$isLine;
    geometry = t1 ? object.object.get$geometry() : null;
    faces3 = geometryGroup.get$faces3();
    faces4 = geometryGroup.faces4;
    t1 = faces3.length;
    t2 = faces4.length;
    nvertices = t1 * 3 + t2 * 4;
    material = this.getBufferMaterial$2(object, geometryGroup);
    uvType = this.bufferGuessUVType$1(material);
    normalType = this.bufferGuessNormalType$1(material);
    vertexColorType = this.bufferGuessVertexColorType$1(material);
    t3 = nvertices * 3;
    t4 = new Float32Array(t3);
    t4.$dartCachedLength = t4.length;
    geometryGroup.__vertexArray = t4;
    if (normalType !== 0) {
      t4 = new Float32Array(t3);
      t4.$dartCachedLength = t4.length;
      geometryGroup.__normalArray = t4;
    }
    if (geometry.hasTangents) {
      t4 = new Float32Array(nvertices * 4);
      t4.$dartCachedLength = t4.length;
      geometryGroup.__tangentArray = t4;
    }
    if (vertexColorType === true) {
      t4 = new Float32Array(t3);
      t4.$dartCachedLength = t4.length;
      geometryGroup.__colorArray = t4;
    }
    if (uvType) {
      t4 = new Float32Array(nvertices * 2);
      t4.$dartCachedLength = t4.length;
      geometryGroup.__uvArray = t4;
    }
    t4 = object.object;
    t4 = !!t4.$isParticleSystem || !!t4.$isLine;
    (t4 ? object.object.get$geometry() : null).skinWeights;
    t1 = (t1 * 1 + t2 * 2) * 3;
    t2 = new Uint16Array(t1);
    t2.$dartCachedLength = t2.length;
    geometryGroup.__faceArray = t2;
    t2 = nvertices * 2;
    t4 = new Uint16Array(t2);
    t4.$dartCachedLength = t4.length;
    geometryGroup.__lineArray = t4;
    geometryGroup.__morphTargetsArrays = [];
    ml = geometryGroup.numMorphTargets;
    for (m = 0; m < ml; ++m) {
      t4 = geometryGroup.__morphTargetsArrays;
      t5 = new Float32Array(t3);
      t5.$dartCachedLength = t5.length;
      t4.push(t5);
    }
    geometryGroup.__morphNormalsArrays = [];
    ml = geometryGroup.numMorphNormals;
    for (m = 0; m < ml; ++m) {
      t4 = geometryGroup.__morphNormalsArrays;
      t5 = new Float32Array(t3);
      t5.$dartCachedLength = t5.length;
      t4.push(t5);
    }
    geometryGroup.__webglFaceCount = t1;
    geometryGroup.__webglLineCount = t2;
    t1 = J.getInterceptor$x(material);
    if (t1.get$attributes(material) != null) {
      if (geometryGroup.__webglCustomAttributesList == null)
        geometryGroup.__webglCustomAttributesList = [];
      t1 = t1.get$attributes(material);
      t1.forEach$1(t1, new S.WebGLRenderer_initMeshBuffers_closure(this, geometryGroup, nvertices));
    }
    geometryGroup.__inittedArrays = true;
  },
  getBufferMaterial$2: function(object, geometryGroup) {
    var t1, material;
    t1 = object.object;
    t1.get$material();
    material = t1.get$material();
    if (material.__data == null)
      material.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t1 = material.__data;
    if (t1.$index(t1, "__webglMaterial") == null) {
      if (material.__data == null)
        material.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      t1 = material.__data;
      t1.$indexSet(t1, "__webglMaterial", new S.WebGLMaterial(material, null, null, null, null, null, 0, 0, false));
    }
    if (material.__data == null)
      material.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t1 = material.__data;
    return t1.$index(t1, "__webglMaterial");
  },
  bufferGuessNormalType$1: function(material) {
    if (!material.get$needsNormals())
      return 0;
    if (material.get$needsSmoothNormals())
      return 2;
    else
      return 1;
  },
  bufferGuessVertexColorType$1: function(material) {
    var t1 = material.get$vertexColors();
    if (!(typeof t1 === "boolean" && material.get$vertexColors() === true)) {
      t1 = material.get$vertexColors();
      t1 = typeof t1 === "number" && Math.floor(t1) === t1 && material.get$vertexColors() !== 0;
    } else
      t1 = true;
    if (t1)
      return material.get$vertexColors();
    return false;
  },
  bufferGuessUVType$1: function(material) {
    var t1;
    if (J.get$map$ax(material) == null) {
      material.get$lightMap();
      material.get$bumpMap();
      material.get$normalMap();
      material.get$specularMap();
      t1 = material.get$isShaderMaterial();
    } else
      t1 = true;
    if (t1)
      return true;
    return false;
  },
  setParticleBuffers$3: function(geometry, hint, object) {
    var vertices, vl, t1, colors, cl, vertexArray, colorArray, sortArray, t2, dirtyVertices, dirtyColors, customAttributes, v, vertex, t3, offset, t4, c, color, t5, il, index, i, ca, cal, value, customAttribute;
    vertices = geometry.get$vertices();
    vl = J.get$length$asx(vertices);
    t1 = geometry._geometry;
    colors = t1.colors;
    cl = colors.length;
    vertexArray = geometry.__vertexArray;
    colorArray = geometry.__colorArray;
    sortArray = geometry.__sortArray;
    t2 = t1.__data;
    if (t2.containsKey$1(t2, "verticesNeedUpdate")) {
      t2 = t1.get$_data();
      dirtyVertices = t2.$index(t2, "verticesNeedUpdate");
    } else
      dirtyVertices = false;
    t2 = t1.__data;
    if (t2.containsKey$1(t2, "elementsNeedUpdate")) {
      t2 = t1.get$_data();
      t2.$index(t2, "elementsNeedUpdate");
    }
    t2 = t1.__data;
    if (t2.containsKey$1(t2, "colorsNeedUpdate")) {
      t1 = t1.get$_data();
      dirtyColors = t1.$index(t1, "colorsNeedUpdate");
    } else
      dirtyColors = false;
    customAttributes = geometry.__webglCustomAttributesList;
    t1 = object.sortParticles;
    if (t1) {
      t2 = this._projScreenMatrixPS;
      t2.setFrom$1(this._projScreenMatrix);
      t2.multiply$1(t2, object.matrixWorld);
      for (v = 0; v < vl; ++v) {
        if (v >= vertices.length)
          throw H.ioore(vertices, v);
        vertex = vertices[v];
        this._vector3.setFrom$1(vertex);
        this._vector3.applyProjection$1(t2);
        t3 = this._vector3.storage[2];
        sortArray.length;
        if (v >= 0)
          throw H.ioore(sortArray, v);
        sortArray[v] = [t3, v];
      }
      t2 = this.get$numericalSort();
      sortArray.toString;
      if (typeof sortArray !== "object" || sortArray === null || !!sortArray.immutable$list)
        H.throwExpression(P.UnsupportedError$("sort"));
      H.IterableMixinWorkaround_sortList(sortArray, t2);
      for (v = 0, offset = null; v < vl; ++v) {
        sortArray.length;
        if (v >= 0)
          throw H.ioore(sortArray, v);
        t2 = sortArray[v];
        if (1 >= t2.length)
          throw H.ioore(t2, 1);
        t2 = t2[1];
        if (t2 >>> 0 !== t2 || t2 >= vertices.length)
          throw H.ioore(vertices, t2);
        vertex = vertices[t2];
        offset = v * 3;
        t2 = J.getInterceptor$x(vertex);
        t3 = t2.get$x(vertex);
        if (offset < 0 || offset >= C.JS_CONST_ZYJ(vertexArray))
          throw H.ioore(vertexArray, offset);
        vertexArray[offset] = t3;
        t3 = offset + 1;
        t4 = t2.get$y(vertex);
        if (t3 >= C.JS_CONST_ZYJ(vertexArray))
          throw H.ioore(vertexArray, t3);
        vertexArray[t3] = t4;
        t4 = offset + 2;
        t2 = t2.get$z(vertex);
        if (t4 >= C.JS_CONST_ZYJ(vertexArray))
          throw H.ioore(vertexArray, t4);
        vertexArray[t4] = t2;
      }
      for (t2 = colors.length, t3 = C.JS_CONST_ZYJ(colorArray), c = 0; c < cl; ++c) {
        offset = c * 3;
        sortArray.length;
        if (c >= 0)
          throw H.ioore(sortArray, c);
        t4 = sortArray[c];
        if (1 >= t4.length)
          throw H.ioore(t4, 1);
        t4 = t4[1];
        if (t4 >>> 0 !== t4 || t4 >= t2)
          throw H.ioore(colors, t4);
        color = colors[t4];
        t4 = color._r;
        if (offset < 0 || offset >= t3)
          throw H.ioore(colorArray, offset);
        colorArray[offset] = t4;
        t4 = offset + 1;
        t5 = color._g;
        if (t4 >= t3)
          throw H.ioore(colorArray, t4);
        colorArray[t4] = t5;
        t5 = offset + 2;
        t4 = color._b;
        if (t5 >= t3)
          throw H.ioore(colorArray, t5);
        colorArray[t5] = t4;
      }
      if (customAttributes != null) {
        il = customAttributes.length;
        for (index = null, i = 0, ca = null, cal = null, value = null; i < il; ++i) {
          if (i >= customAttributes.length)
            throw H.ioore(customAttributes, i);
          customAttribute = customAttributes[i];
          cal = J.get$length$asx(customAttribute.value);
          t2 = customAttribute.size;
          if (t2 === 1) {
            if (typeof cal !== "number")
              throw H.iae(cal);
            ca = 0;
            for (; ca < cal; ++ca) {
              sortArray.length;
              if (ca >= 0)
                throw H.ioore(sortArray, ca);
              t2 = sortArray[ca];
              if (1 >= t2.length)
                throw H.ioore(t2, 1);
              index = t2[1];
              t2 = customAttribute.array;
              t3 = J.$index$asx(customAttribute.value, index);
              t2.toString;
              t2[ca] = t3;
            }
            offset = 0;
          } else if (t2 === 2) {
            if (typeof cal !== "number")
              throw H.iae(cal);
            offset = 0;
            ca = 0;
            for (; ca < cal; ++ca) {
              sortArray.length;
              if (ca >= 0)
                throw H.ioore(sortArray, ca);
              t2 = sortArray[ca];
              if (1 >= t2.length)
                throw H.ioore(t2, 1);
              index = t2[1];
              value = J.$index$asx(customAttribute.value, index);
              t2 = customAttribute.array;
              t3 = J.getInterceptor$x(value);
              t4 = t3.get$x(value);
              if (offset >= C.JS_CONST_ZYJ(t2))
                throw H.ioore(t2, offset);
              t2[offset] = t4;
              t4 = customAttribute.array;
              t2 = offset + 1;
              t3 = t3.get$y(value);
              if (t2 >= C.JS_CONST_ZYJ(t4))
                throw H.ioore(t4, t2);
              t4[t2] = t3;
              offset += 2;
            }
          } else if (t2 === 3)
            if (customAttribute.type === "c") {
              if (typeof cal !== "number")
                throw H.iae(cal);
              offset = 0;
              ca = 0;
              for (; ca < cal; ++ca) {
                sortArray.length;
                if (ca >= 0)
                  throw H.ioore(sortArray, ca);
                t2 = sortArray[ca];
                if (1 >= t2.length)
                  throw H.ioore(t2, 1);
                index = t2[1];
                value = J.$index$asx(customAttribute.value, index);
                t2 = customAttribute.array;
                t3 = J.getInterceptor$x(value);
                t4 = t3.get$r(value);
                if (offset >= C.JS_CONST_ZYJ(t2))
                  throw H.ioore(t2, offset);
                t2[offset] = t4;
                t4 = customAttribute.array;
                t2 = offset + 1;
                t5 = value.get$g();
                if (t2 >= C.JS_CONST_ZYJ(t4))
                  throw H.ioore(t4, t2);
                t4[t2] = t5;
                t5 = customAttribute.array;
                t2 = offset + 2;
                t3 = t3.get$b(value);
                if (t2 >= C.JS_CONST_ZYJ(t5))
                  throw H.ioore(t5, t2);
                t5[t2] = t3;
                offset += 3;
              }
            } else {
              if (typeof cal !== "number")
                throw H.iae(cal);
              offset = 0;
              ca = 0;
              for (; ca < cal; ++ca) {
                sortArray.length;
                if (ca >= 0)
                  throw H.ioore(sortArray, ca);
                t2 = sortArray[ca];
                if (1 >= t2.length)
                  throw H.ioore(t2, 1);
                index = t2[1];
                value = J.$index$asx(customAttribute.value, index);
                t2 = customAttribute.array;
                t3 = J.getInterceptor$x(value);
                t4 = t3.get$x(value);
                if (offset >= C.JS_CONST_ZYJ(t2))
                  throw H.ioore(t2, offset);
                t2[offset] = t4;
                t4 = customAttribute.array;
                t2 = offset + 1;
                t5 = t3.get$y(value);
                if (t2 >= C.JS_CONST_ZYJ(t4))
                  throw H.ioore(t4, t2);
                t4[t2] = t5;
                t5 = customAttribute.array;
                t2 = offset + 2;
                t3 = t3.get$z(value);
                if (t2 >= C.JS_CONST_ZYJ(t5))
                  throw H.ioore(t5, t2);
                t5[t2] = t3;
                offset += 3;
              }
            }
          else if (t2 === 4) {
            if (typeof cal !== "number")
              throw H.iae(cal);
            offset = 0;
            ca = 0;
            for (; ca < cal; ++ca) {
              sortArray.length;
              if (ca >= 0)
                throw H.ioore(sortArray, ca);
              t2 = sortArray[ca];
              if (1 >= t2.length)
                throw H.ioore(t2, 1);
              index = t2[1];
              value = J.$index$asx(customAttribute.value, index);
              t2 = customAttribute.array;
              t3 = J.getInterceptor$x(value);
              t4 = t3.get$x(value);
              if (offset >= C.JS_CONST_ZYJ(t2))
                throw H.ioore(t2, offset);
              t2[offset] = t4;
              t4 = customAttribute.array;
              t2 = offset + 1;
              t5 = t3.get$y(value);
              if (t2 >= C.JS_CONST_ZYJ(t4))
                throw H.ioore(t4, t2);
              t4[t2] = t5;
              t5 = customAttribute.array;
              t2 = offset + 2;
              t3 = t3.get$z(value);
              if (t2 >= C.JS_CONST_ZYJ(t5))
                throw H.ioore(t5, t2);
              t5[t2] = t3;
              t3 = customAttribute.array;
              t2 = offset + 3;
              t5 = value.get$w();
              if (t2 >= C.JS_CONST_ZYJ(t3))
                throw H.ioore(t3, t2);
              t3[t2] = t5;
              offset += 4;
            }
          } else
            offset = 0;
        }
      }
    } else {
      if (dirtyVertices === true)
        for (v = 0, offset = null; v < vl; ++v) {
          if (v >= vertices.length)
            throw H.ioore(vertices, v);
          vertex = vertices[v];
          offset = v * 3;
          t2 = J.getInterceptor$x(vertex);
          t3 = t2.get$x(vertex);
          if (offset < 0 || offset >= C.JS_CONST_ZYJ(vertexArray))
            throw H.ioore(vertexArray, offset);
          vertexArray[offset] = t3;
          t3 = offset + 1;
          t4 = t2.get$y(vertex);
          if (t3 >= C.JS_CONST_ZYJ(vertexArray))
            throw H.ioore(vertexArray, t3);
          vertexArray[t3] = t4;
          t4 = offset + 2;
          t2 = t2.get$z(vertex);
          if (t4 >= C.JS_CONST_ZYJ(vertexArray))
            throw H.ioore(vertexArray, t4);
          vertexArray[t4] = t2;
        }
      else
        offset = null;
      if (dirtyColors === true)
        for (t2 = colors.length, t3 = C.JS_CONST_ZYJ(colorArray), c = 0; c < cl; ++c) {
          if (c >= t2)
            throw H.ioore(colors, c);
          color = colors[c];
          offset = c * 3;
          t4 = color._r;
          if (offset < 0 || offset >= t3)
            throw H.ioore(colorArray, offset);
          colorArray[offset] = t4;
          t4 = offset + 1;
          t5 = color._g;
          if (t4 >= t3)
            throw H.ioore(colorArray, t4);
          colorArray[t4] = t5;
          t5 = offset + 2;
          t4 = color._b;
          if (t5 >= t3)
            throw H.ioore(colorArray, t5);
          colorArray[t5] = t4;
        }
      if (customAttributes != null) {
        il = customAttributes.length;
        for (i = 0, ca = null, cal = null, value = null; i < il; ++i) {
          if (i >= customAttributes.length)
            throw H.ioore(customAttributes, i);
          customAttribute = customAttributes[i];
          if (customAttribute.needsUpdate)
            t2 = true;
          else
            t2 = false;
          if (t2) {
            cal = J.get$length$asx(customAttribute.value);
            t2 = customAttribute.size;
            if (t2 === 1) {
              if (typeof cal !== "number")
                throw H.iae(cal);
              ca = 0;
              for (; ca < cal; ++ca) {
                t2 = customAttribute.array;
                t3 = J.$index$asx(customAttribute.value, ca);
                if (ca >= C.JS_CONST_ZYJ(t2))
                  throw H.ioore(t2, ca);
                t2[ca] = t3;
              }
              offset = 0;
            } else if (t2 === 2) {
              if (typeof cal !== "number")
                throw H.iae(cal);
              offset = 0;
              ca = 0;
              for (; ca < cal; ++ca) {
                value = J.$index$asx(customAttribute.value, ca);
                t2 = customAttribute.array;
                t3 = J.getInterceptor$x(value);
                t4 = t3.get$x(value);
                if (offset >= C.JS_CONST_ZYJ(t2))
                  throw H.ioore(t2, offset);
                t2[offset] = t4;
                t4 = customAttribute.array;
                t2 = offset + 1;
                t3 = t3.get$y(value);
                if (t2 >= C.JS_CONST_ZYJ(t4))
                  throw H.ioore(t4, t2);
                t4[t2] = t3;
                offset += 2;
              }
            } else if (t2 === 3)
              if (customAttribute.type === "c") {
                if (typeof cal !== "number")
                  throw H.iae(cal);
                offset = 0;
                ca = 0;
                for (; ca < cal; ++ca) {
                  value = J.$index$asx(customAttribute.value, ca);
                  t2 = customAttribute.array;
                  t3 = J.getInterceptor$x(value);
                  t4 = t3.get$r(value);
                  if (offset >= C.JS_CONST_ZYJ(t2))
                    throw H.ioore(t2, offset);
                  t2[offset] = t4;
                  t4 = customAttribute.array;
                  t2 = offset + 1;
                  t5 = value.get$g();
                  if (t2 >= C.JS_CONST_ZYJ(t4))
                    throw H.ioore(t4, t2);
                  t4[t2] = t5;
                  t5 = customAttribute.array;
                  t2 = offset + 2;
                  t3 = t3.get$b(value);
                  if (t2 >= C.JS_CONST_ZYJ(t5))
                    throw H.ioore(t5, t2);
                  t5[t2] = t3;
                  offset += 3;
                }
              } else {
                if (typeof cal !== "number")
                  throw H.iae(cal);
                offset = 0;
                ca = 0;
                for (; ca < cal; ++ca) {
                  value = J.$index$asx(customAttribute.value, ca);
                  t2 = customAttribute.array;
                  t3 = J.getInterceptor$x(value);
                  t4 = t3.get$x(value);
                  if (offset >= C.JS_CONST_ZYJ(t2))
                    throw H.ioore(t2, offset);
                  t2[offset] = t4;
                  t4 = customAttribute.array;
                  t2 = offset + 1;
                  t5 = t3.get$y(value);
                  if (t2 >= C.JS_CONST_ZYJ(t4))
                    throw H.ioore(t4, t2);
                  t4[t2] = t5;
                  t5 = customAttribute.array;
                  t2 = offset + 2;
                  t3 = t3.get$z(value);
                  if (t2 >= C.JS_CONST_ZYJ(t5))
                    throw H.ioore(t5, t2);
                  t5[t2] = t3;
                  offset += 3;
                }
              }
            else if (t2 === 4) {
              if (typeof cal !== "number")
                throw H.iae(cal);
              offset = 0;
              ca = 0;
              for (; ca < cal; ++ca) {
                value = J.$index$asx(customAttribute.value, ca);
                t2 = customAttribute.array;
                t3 = J.getInterceptor$x(value);
                t4 = t3.get$x(value);
                if (offset >= C.JS_CONST_ZYJ(t2))
                  throw H.ioore(t2, offset);
                t2[offset] = t4;
                t4 = customAttribute.array;
                t2 = offset + 1;
                t5 = t3.get$y(value);
                if (t2 >= C.JS_CONST_ZYJ(t4))
                  throw H.ioore(t4, t2);
                t4[t2] = t5;
                t5 = customAttribute.array;
                t2 = offset + 2;
                t3 = t3.get$z(value);
                if (t2 >= C.JS_CONST_ZYJ(t5))
                  throw H.ioore(t5, t2);
                t5[t2] = t3;
                t3 = customAttribute.array;
                t2 = offset + 3;
                t5 = value.get$w();
                if (t2 >= C.JS_CONST_ZYJ(t3))
                  throw H.ioore(t3, t2);
                t3[t2] = t5;
                offset += 4;
              }
            } else
              offset = 0;
          }
        }
      }
    }
    if (dirtyVertices === true || t1) {
      J.bindBuffer$2$x(this._gl, 34962, geometry.__webglVertexBuffer);
      J.bufferDataTyped$3$x(this._gl, 34962, vertexArray, hint);
    }
    if (dirtyColors === true || t1) {
      J.bindBuffer$2$x(this._gl, 34962, geometry.__webglColorBuffer);
      J.bufferDataTyped$3$x(this._gl, 34962, colorArray, hint);
    }
    if (customAttributes != null) {
      il = customAttributes.length;
      for (i = 0; i < il; ++i) {
        if (i >= customAttributes.length)
          throw H.ioore(customAttributes, i);
        customAttribute = customAttributes[i];
        if (customAttribute.needsUpdate || t1) {
          t2 = customAttribute.buffer;
          J.bindBuffer$2$x(t2.context, 34962, t2._glbuffer);
          J.bufferDataTyped$3$x(this._gl, 34962, customAttribute.array, hint);
        }
      }
    }
  },
  setLineBuffers$2: function(geometry, hint) {
    var vertices, t1, colors, lineDistances, vl, cl, vertexArray, colorArray, lineDistanceArray, t2, dirtyVertices, dirtyColors, dirtyLineDistances, customAttributes, v, offset, vertex, t3, c, color, t4, d, il, i, ca, cal, value, customAttribute;
    vertices = geometry.get$vertices();
    t1 = geometry._geometry;
    colors = t1.colors;
    lineDistances = t1.lineDistances;
    vl = J.get$length$asx(vertices);
    cl = colors.length;
    vertexArray = geometry.__vertexArray;
    colorArray = geometry.__colorArray;
    lineDistanceArray = geometry.__lineDistanceArray;
    t2 = t1.__data;
    if (t2.containsKey$1(t2, "verticesNeedUpdate")) {
      t2 = t1.get$_data();
      dirtyVertices = t2.$index(t2, "verticesNeedUpdate");
    } else
      dirtyVertices = false;
    t2 = t1.__data;
    if (t2.containsKey$1(t2, "colorsNeedUpdate")) {
      t2 = t1.get$_data();
      dirtyColors = t2.$index(t2, "colorsNeedUpdate");
    } else
      dirtyColors = false;
    t2 = t1.__data;
    if (t2.containsKey$1(t2, "lineDistancesNeedUpdate")) {
      t1 = t1.get$_data();
      dirtyLineDistances = t1.$index(t1, "lineDistancesNeedUpdate");
    } else
      dirtyLineDistances = false;
    customAttributes = geometry.__webglCustomAttributesList;
    if (dirtyVertices === true) {
      for (v = 0, offset = null; v < vl; ++v) {
        if (v >= vertices.length)
          throw H.ioore(vertices, v);
        vertex = vertices[v];
        offset = v * 3;
        t1 = J.getInterceptor$x(vertex);
        t2 = t1.get$x(vertex);
        if (offset < 0 || offset >= C.JS_CONST_ZYJ(vertexArray))
          throw H.ioore(vertexArray, offset);
        vertexArray[offset] = t2;
        t2 = offset + 1;
        t3 = t1.get$y(vertex);
        if (t2 >= C.JS_CONST_ZYJ(vertexArray))
          throw H.ioore(vertexArray, t2);
        vertexArray[t2] = t3;
        t3 = offset + 2;
        t1 = t1.get$z(vertex);
        if (t3 >= C.JS_CONST_ZYJ(vertexArray))
          throw H.ioore(vertexArray, t3);
        vertexArray[t3] = t1;
      }
      J.bindBuffer$2$x(this._gl, 34962, geometry.__webglVertexBuffer);
      J.bufferDataTyped$3$x(this._gl, 34962, vertexArray, hint);
    } else
      offset = null;
    if (dirtyColors === true) {
      for (t1 = colors.length, t2 = C.JS_CONST_ZYJ(colorArray), c = 0; c < cl; ++c) {
        if (c >= t1)
          throw H.ioore(colors, c);
        color = colors[c];
        offset = c * 3;
        t3 = color._r;
        if (offset < 0 || offset >= t2)
          throw H.ioore(colorArray, offset);
        colorArray[offset] = t3;
        t3 = offset + 1;
        t4 = color._g;
        if (t3 >= t2)
          throw H.ioore(colorArray, t3);
        colorArray[t3] = t4;
        t4 = offset + 2;
        t3 = color._b;
        if (t4 >= t2)
          throw H.ioore(colorArray, t4);
        colorArray[t4] = t3;
      }
      J.bindBuffer$2$x(this._gl, 34962, geometry.__webglColorBuffer);
      J.bufferDataTyped$3$x(this._gl, 34962, colorArray, hint);
    }
    if (dirtyLineDistances === true) {
      for (d = 0; false; ++d) {
        if (d >= 0)
          throw H.ioore(lineDistances, d);
        t1 = lineDistances[d];
        lineDistanceArray.toString;
        lineDistanceArray[d] = t1;
      }
      J.bindBuffer$2$x(this._gl, 34962, geometry.__webglLineDistanceBuffer);
      J.bufferDataTyped$3$x(this._gl, 34962, lineDistanceArray, hint);
    }
    if (customAttributes != null) {
      il = customAttributes.length;
      for (i = 0, ca = null, cal = null, value = null; i < il; ++i) {
        if (i >= customAttributes.length)
          throw H.ioore(customAttributes, i);
        customAttribute = customAttributes[i];
        if (customAttribute.needsUpdate)
          t1 = true;
        else
          t1 = false;
        if (t1) {
          cal = J.get$length$asx(customAttribute.value);
          t1 = customAttribute.size;
          if (t1 === 1) {
            if (typeof cal !== "number")
              throw H.iae(cal);
            ca = 0;
            for (; ca < cal; ++ca) {
              t1 = customAttribute.array;
              t2 = J.$index$asx(customAttribute.value, ca);
              if (ca >= C.JS_CONST_ZYJ(t1))
                throw H.ioore(t1, ca);
              t1[ca] = t2;
            }
            offset = 0;
          } else if (t1 === 2) {
            if (typeof cal !== "number")
              throw H.iae(cal);
            offset = 0;
            ca = 0;
            for (; ca < cal; ++ca) {
              value = J.$index$asx(customAttribute.value, ca);
              t1 = customAttribute.array;
              t2 = J.getInterceptor$x(value);
              t3 = t2.get$x(value);
              if (offset >= C.JS_CONST_ZYJ(t1))
                throw H.ioore(t1, offset);
              t1[offset] = t3;
              t3 = customAttribute.array;
              t1 = offset + 1;
              t2 = t2.get$y(value);
              if (t1 >= C.JS_CONST_ZYJ(t3))
                throw H.ioore(t3, t1);
              t3[t1] = t2;
              offset += 2;
            }
          } else if (t1 === 3)
            if (customAttribute.type === "c") {
              if (typeof cal !== "number")
                throw H.iae(cal);
              offset = 0;
              ca = 0;
              for (; ca < cal; ++ca) {
                value = J.$index$asx(customAttribute.value, ca);
                t1 = customAttribute.array;
                t2 = J.getInterceptor$x(value);
                t3 = t2.get$r(value);
                if (offset >= C.JS_CONST_ZYJ(t1))
                  throw H.ioore(t1, offset);
                t1[offset] = t3;
                t3 = customAttribute.array;
                t1 = offset + 1;
                t4 = value.get$g();
                if (t1 >= C.JS_CONST_ZYJ(t3))
                  throw H.ioore(t3, t1);
                t3[t1] = t4;
                t4 = customAttribute.array;
                t1 = offset + 2;
                t2 = t2.get$b(value);
                if (t1 >= C.JS_CONST_ZYJ(t4))
                  throw H.ioore(t4, t1);
                t4[t1] = t2;
                offset += 3;
              }
            } else {
              if (typeof cal !== "number")
                throw H.iae(cal);
              offset = 0;
              ca = 0;
              for (; ca < cal; ++ca) {
                value = J.$index$asx(customAttribute.value, ca);
                t1 = customAttribute.array;
                t2 = J.getInterceptor$x(value);
                t3 = t2.get$x(value);
                if (offset >= C.JS_CONST_ZYJ(t1))
                  throw H.ioore(t1, offset);
                t1[offset] = t3;
                t3 = customAttribute.array;
                t1 = offset + 1;
                t4 = t2.get$y(value);
                if (t1 >= C.JS_CONST_ZYJ(t3))
                  throw H.ioore(t3, t1);
                t3[t1] = t4;
                t4 = customAttribute.array;
                t1 = offset + 2;
                t2 = t2.get$z(value);
                if (t1 >= C.JS_CONST_ZYJ(t4))
                  throw H.ioore(t4, t1);
                t4[t1] = t2;
                offset += 3;
              }
            }
          else if (t1 === 4) {
            if (typeof cal !== "number")
              throw H.iae(cal);
            offset = 0;
            ca = 0;
            for (; ca < cal; ++ca) {
              value = J.$index$asx(customAttribute.value, ca);
              t1 = customAttribute.array;
              t2 = J.getInterceptor$x(value);
              t3 = t2.get$x(value);
              if (offset >= C.JS_CONST_ZYJ(t1))
                throw H.ioore(t1, offset);
              t1[offset] = t3;
              t3 = customAttribute.array;
              t1 = offset + 1;
              t4 = t2.get$y(value);
              if (t1 >= C.JS_CONST_ZYJ(t3))
                throw H.ioore(t3, t1);
              t3[t1] = t4;
              t4 = customAttribute.array;
              t1 = offset + 2;
              t2 = t2.get$z(value);
              if (t1 >= C.JS_CONST_ZYJ(t4))
                throw H.ioore(t4, t1);
              t4[t1] = t2;
              t2 = customAttribute.array;
              t1 = offset + 3;
              t4 = value.get$w();
              if (t1 >= C.JS_CONST_ZYJ(t2))
                throw H.ioore(t2, t1);
              t2[t1] = t4;
              offset += 4;
            }
          } else
            offset = 0;
          t1 = customAttribute.buffer;
          J.bindBuffer$2$x(t1.context, 34962, t1._glbuffer);
          J.bufferDataTyped$3$x(this._gl, 34962, customAttribute.array, hint);
        }
      }
    }
  },
  renderBufferImmediate$3: function(object, program, material) {
    object.get$hasPositions();
    object.get$hasNormals();
    object.get$hasUvs();
    object.get$hasColors();
    object.get$hasPositions();
    object.get$hasNormals();
    object.get$hasUvs();
    object.get$hasColors();
    J.drawArrays$3$x(this._gl, 4, 0, object.get$count(object));
    object.set$count(object, 0);
  },
  renderBufferDirect$6: function(camera, lights, fog, material, webglgeometry, webglobject) {
    var program, attributes, wireframeBit, t1, t2, geometryHash, updateBuffers, object, geometry, position, positionSize, color, colorSize, t3;
    if (J.get$visible$x(material) !== true)
      return;
    program = this.setProgram$5(camera, lights, fog, material, webglobject);
    attributes = program.attributes;
    wireframeBit = material.get$wireframe() ? 1 : 0;
    t1 = webglgeometry.id;
    if (typeof t1 !== "number")
      throw t1.$mul();
    t2 = program.id;
    if (typeof wireframeBit !== "number")
      throw H.iae(wireframeBit);
    geometryHash = t1 * 16777215 + t2 * 2 + wireframeBit;
    if (geometryHash !== this._currentGeometryGroupHash) {
      this._currentGeometryGroupHash = geometryHash;
      updateBuffers = true;
    } else
      updateBuffers = false;
    if (updateBuffers)
      this.disableAttributes$0();
    object = webglobject.get$object();
    geometry = webglgeometry._geometry;
    if (!!object.$isParticleSystem)
      if (updateBuffers) {
        t1 = geometry.get$attributes(geometry);
        position = t1.$index(t1, "position");
        positionSize = position.get$itemSize();
        position.get$buffer(position).bind$1(34962);
        this.enableAttribute$1(attributes.$index(attributes, "position"));
        J.vertexAttribPointer$6$x(this._gl, attributes.$index(attributes, "position"), positionSize, 5126, false, 0, 0);
        t1 = geometry.get$attributes(geometry);
        color = t1.$index(t1, "color");
        if (J.$ge$n(attributes.$index(attributes, "color"), 0) && true) {
          colorSize = color.get$itemSize();
          color.get$buffer(color).bind$1(34962);
          this.enableAttribute$1(attributes.$index(attributes, "color"));
          J.vertexAttribPointer$6$x(this._gl, attributes.$index(attributes, "color"), colorSize, 5126, false, 0, 0);
        }
        t1 = this._gl;
        t2 = position.get$numItems();
        J.drawArrays$3$x(t1, 0, 0, t2.$tdiv(t2, 3));
        t2 = this.info;
        t1 = t2.render;
        t1.calls = t1.calls + 1;
        t2 = t2.render;
        t1 = t2.points;
        t3 = position.get$numItems();
        t2.points = C.JSNumber_methods.$add(t1, t3.$tdiv(t3, 3));
      }
  },
  renderBuffer$6: function(camera, lights, fog, material, geometryGroup, object) {
    var webglobject, webglcamera, t1, t2, program, attributes, wireframeBit, geometryGroupHash, updateBuffers, il, i, attribute, primitives, t3;
    if (!!object.$isWebGLObject)
      webglobject = object;
    else {
      if (object.$index(object, "__webglObject") == null)
        object.$indexSet(object, "__webglObject", new S.WebGLObject(false, false, null, null, null, null, null, null, object, null, null, true, 0, null));
      webglobject = object.$index(object, "__webglObject");
    }
    object = webglobject.get$object();
    if (!!camera.$isWebGLCamera)
      webglcamera = camera;
    else {
      if (camera.$index(camera, "__webglCamera") == null) {
        t1 = new Float32Array(16);
        t1.$dartCachedLength = t1.length;
        t2 = new Float32Array(16);
        t2.$dartCachedLength = t2.length;
        camera.$indexSet(camera, "__webglCamera", new S.WebGLCamera(camera, t1, t2));
      }
      webglcamera = camera.$index(camera, "__webglCamera");
    }
    webglcamera.get$_camera();
    if (J.get$visible$x(material) !== true)
      return;
    program = this.setProgram$5(webglcamera, lights, fog, material, webglobject);
    attributes = program.attributes;
    wireframeBit = material.get$wireframe() ? 1 : 0;
    t1 = J.get$id$x(geometryGroup);
    if (typeof t1 !== "number")
      throw t1.$mul();
    t2 = program.id;
    if (typeof wireframeBit !== "number")
      throw H.iae(wireframeBit);
    geometryGroupHash = t1 * 16777215 + t2 * 2 + wireframeBit;
    if (geometryGroupHash !== this._currentGeometryGroupHash) {
      this._currentGeometryGroupHash = geometryGroupHash;
      updateBuffers = true;
    } else
      updateBuffers = false;
    if (updateBuffers)
      this.disableAttributes$0();
    if (!material.get$morphTargets() && J.$ge$n(attributes.$index(attributes, "position"), 0)) {
      if (updateBuffers) {
        J.bindBuffer$2$x(this._gl, 34962, geometryGroup.get$__webglVertexBuffer());
        this.enableAttribute$1(attributes.$index(attributes, "position"));
        J.vertexAttribPointer$6$x(this._gl, attributes.$index(attributes, "position"), 3, 5126, false, 0, 0);
      }
    } else {
      webglobject.get$morphTargetBase();
      this.setupMorphTargets$3(material, geometryGroup, webglobject);
    }
    if (updateBuffers) {
      if (geometryGroup.get$__webglCustomAttributesList() != null) {
        il = geometryGroup.__webglCustomAttributesList.length;
        i = 0;
        while (true) {
          if (typeof i !== "number")
            throw i.$lt();
          if (!(i < il))
            break;
          t1 = geometryGroup.__webglCustomAttributesList;
          if (i < 0 || i >= t1.length)
            throw H.ioore(t1, i);
          attribute = t1[i];
          if (J.$ge$n(attributes.$index(attributes, attribute.buffer.belongsToAttribute), 0)) {
            t1 = attribute.buffer;
            J.bindBuffer$2$x(t1.context, 34962, t1._glbuffer);
            this.enableAttribute$1(attributes.$index(attributes, attribute.buffer.belongsToAttribute));
            J.vertexAttribPointer$6$x(this._gl, attributes.$index(attributes, attribute.buffer.belongsToAttribute), attribute.size, 5126, false, 0, 0);
          }
          if (typeof 1 !== "number")
            throw H.iae(1);
          ++i;
        }
      }
      if (J.$ge$n(attributes.$index(attributes, "color"), 0)) {
        J.bindBuffer$2$x(this._gl, 34962, geometryGroup.__webglColorBuffer);
        this.enableAttribute$1(attributes.$index(attributes, "color"));
        J.vertexAttribPointer$6$x(this._gl, attributes.$index(attributes, "color"), 3, 5126, false, 0, 0);
      }
      if (J.$ge$n(attributes.$index(attributes, "normal"), 0)) {
        J.bindBuffer$2$x(this._gl, 34962, geometryGroup.__webglNormalBuffer);
        this.enableAttribute$1(attributes.$index(attributes, "normal"));
        J.vertexAttribPointer$6$x(this._gl, attributes.$index(attributes, "normal"), 3, 5126, false, 0, 0);
      }
      if (J.$ge$n(attributes.$index(attributes, "tangent"), 0)) {
        J.bindBuffer$2$x(this._gl, 34962, geometryGroup.__webglTangentBuffer);
        this.enableAttribute$1(attributes.$index(attributes, "tangent"));
        J.vertexAttribPointer$6$x(this._gl, attributes.$index(attributes, "tangent"), 4, 5126, false, 0, 0);
      }
      if (J.$ge$n(attributes.$index(attributes, "uv"), 0)) {
        J.bindBuffer$2$x(this._gl, 34962, geometryGroup.__webglUVBuffer);
        this.enableAttribute$1(attributes.$index(attributes, "uv"));
        J.vertexAttribPointer$6$x(this._gl, attributes.$index(attributes, "uv"), 2, 5126, false, 0, 0);
      }
      if (J.$ge$n(attributes.$index(attributes, "uv2"), 0)) {
        J.bindBuffer$2$x(this._gl, 34962, geometryGroup.__webglUV2Buffer);
        this.enableAttribute$1(attributes.$index(attributes, "uv2"));
        J.vertexAttribPointer$6$x(this._gl, attributes.$index(attributes, "uv2"), 2, 5126, false, 0, 0);
      }
      if (material.get$skinning() && J.$ge$n(attributes.$index(attributes, "skinIndex"), 0) && J.$ge$n(attributes.$index(attributes, "skinWeight"), 0)) {
        J.bindBuffer$2$x(this._gl, 34962, geometryGroup.__webglSkinIndicesBuffer);
        this.enableAttribute$1(attributes.$index(attributes, "skinIndex"));
        J.vertexAttribPointer$6$x(this._gl, attributes.$index(attributes, "skinIndex"), 4, 5126, false, 0, 0);
        J.bindBuffer$2$x(this._gl, 34962, geometryGroup.__webglSkinWeightsBuffer);
        this.enableAttribute$1(attributes.$index(attributes, "skinWeight"));
        J.vertexAttribPointer$6$x(this._gl, attributes.$index(attributes, "skinWeight"), 4, 5126, false, 0, 0);
      }
      if (J.$ge$n(attributes.$index(attributes, "lineDistance"), 0)) {
        J.bindBuffer$2$x(this._gl, 34962, geometryGroup.__webglLineDistanceBuffer);
        this.enableAttribute$1(attributes.$index(attributes, "lineDistance"));
        J.vertexAttribPointer$6$x(this._gl, attributes.get$lineDistance(), 1, 5126, false, 0, 0);
      }
    }
    if (!!object.$isLine) {
      primitives = object.type === 0 ? 3 : 1;
      t1 = material.get$linewidth();
      t2 = this._oldLineWidth;
      if (t1 == null ? t2 != null : t1 !== t2) {
        J.lineWidth$1$x(this._gl, t1);
        this._oldLineWidth = t1;
      }
      J.drawArrays$3$x(this._gl, primitives, 0, geometryGroup.get$__webglLineCount());
      t1 = this.info.render;
      t2 = t1.calls;
      if (typeof 1 !== "number")
        throw H.iae(1);
      t1.calls = t2 + 1;
    } else if (!!object.$isParticleSystem) {
      J.drawArrays$3$x(this._gl, 0, 0, geometryGroup.get$__webglParticleCount());
      t1 = this.info;
      t2 = t1.render;
      t3 = t2.calls;
      if (typeof 1 !== "number")
        throw H.iae(1);
      t2.calls = t3 + 1;
      t1 = t1.render;
      t3 = t1.points;
      t2 = geometryGroup.__webglParticleCount;
      if (typeof t2 !== "number")
        throw H.iae(t2);
      t1.points = t3 + t2;
    }
  },
  enableAttribute$1: function(attribute) {
    var k, t1;
    k = J.toString$0(attribute);
    t1 = this._enabledAttributes;
    if (t1.$index(t1, k) == null || t1.$index(t1, k) !== true) {
      J.enableVertexAttribArray$1$x(this._gl, attribute);
      t1.$indexSet(t1, k, true);
    }
  },
  disableAttributes$0: function() {
    var t1 = this._enabledAttributes;
    t1.forEach$1(t1, new S.WebGLRenderer_disableAttributes_closure(this));
  },
  setupMorphTargets$3: function(material, geometryGroup, object) {
    var attributes, t1, t2, t3;
    attributes = material.get$program().attributes;
    object.get$morphTargetBase();
    if (J.$ge$n(attributes.$index(attributes, "position"), 0)) {
      t1 = this._gl;
      t2 = geometryGroup.get$__webglMorphTargetsBuffers();
      t3 = object.get$morphTargetBase();
      if (t3 >>> 0 !== t3 || t3 >= t2.length)
        throw H.ioore(t2, t3);
      J.bindBuffer$2$x(t1, 34962, t2[t3]);
    } else if (J.$ge$n(attributes.$index(attributes, "position"), 0)) {
      J.bindBuffer$2$x(this._gl, 34962, geometryGroup.get$__webglVertexBuffer());
      this.enableAttribute$1(attributes.$index(attributes, "position"));
      J.vertexAttribPointer$6$x(this._gl, attributes.$index(attributes, "position"), 3, 5126, false, 0, 0);
    }
    t1 = object.get$morphTargetForcedOrder();
    t1 = t1.get$length(t1);
    t1.$gt(t1, 0);
    object.get$morphTargetInfluences();
    t1 = material.program.uniforms;
    if (t1.$index(t1, "morphTargetInfluences") != null) {
      t1 = this._gl;
      t2 = material.program.uniforms;
      J.uniform1fv$2$x(t1, t2.$index(t2, "morphTargetInfluences"), object.__webglMorphTargetInfluences);
    }
  },
  painterSort$2: function(a, b) {
    var t1, t2;
    t1 = J.getInterceptor$x(a);
    if (!J.get$isNaN$n(t1.get$z(a))) {
      t2 = J.getInterceptor$x(b);
      t2 = J.get$isNaN$n(t2.get$z(b)) || J.get$isInfinite$n(t1.get$z(a)) || J.get$isInfinite$n(t2.get$z(b));
    } else
      t2 = true;
    if (t2)
      t1 = 0;
    else {
      t2 = J.get$z$x(b);
      t1 = t1.get$z(a);
      if (typeof t2 !== "number")
        throw t2.$sub();
      if (typeof t1 !== "number")
        throw H.iae(t1);
      t1 = C.JSNumber_methods.toInt$0(t2 - t1);
    }
    return t1;
  },
  get$painterSort: function() {
    return new P.BoundClosure$20(this, S.WebGLRenderer.prototype.painterSort$2, null, "painterSort$2");
  },
  numericalSort$2: function(a, b) {
    return J.toInt$0$n(J.$sub$n(J.$index$asx(b, 0), J.$index$asx(a, 0)));
  },
  get$numericalSort: function() {
    return new P.BoundClosure$20(this, S.WebGLRenderer.prototype.numericalSort$2, null, "numericalSort$2");
  },
  render$2: function(scene, camera) {
    return this._render$2(scene, camera);
  },
  get$render: function() {
    return new P.BoundClosure$20(this, S.WebGLRenderer.prototype.render$2, null, "render$2");
  },
  _render$4$forceClear$renderTarget: function(scene, c, forceClear, renderTarget) {
    var lights, fog, camera, t1, t2, renderList, il, t3, i, webglObject, object, t4;
    lights = scene.get$lights();
    fog = scene.get$fog();
    this._currentMaterialId = -1;
    this._lightsNeedUpdate = true;
    if (this.autoUpdateScene)
      scene.updateMatrixWorld$0();
    camera = S.WebGLCamera_WebGLCamera(c);
    if (J.get$parent$x(camera) == null)
      camera.updateMatrixWorld$0();
    camera.get$matrixWorldInverse().copyInverse$1(camera.get$matrixWorld());
    t1 = this._projScreenMatrix.setFrom$1(camera.get$projectionMatrix());
    t1.multiply$1(t1, camera.get$matrixWorldInverse());
    t1 = this._frustum;
    t1.setFromMatrix$1(this._projScreenMatrix);
    if (this.autoUpdateObjects)
      this.initWebGLObjects$1(scene);
    this.renderPlugins$3(this.renderPluginsPre, scene, camera);
    t2 = this.info;
    t2.render.calls = 0;
    t2.render.vertices = 0;
    t2.render.faces = 0;
    t2.render.points = 0;
    this.setRenderTarget$1(renderTarget);
    if (this.autoClear || forceClear)
      this.clear$3(this, this.autoClearColor, this.autoClearDepth, this.autoClearStencil);
    renderList = scene.$index(scene, "__webglObjects");
    t2 = J.getInterceptor$asx(renderList);
    il = t2.get$length(renderList);
    if (typeof il !== "number")
      throw H.iae(il);
    t3 = this.sortObjects;
    i = 0;
    for (; i < il; ++i) {
      webglObject = t2.$index(renderList, i);
      object = webglObject.get$object();
      webglObject.render = false;
      if (object.get$visible(object))
        if (!!!object.$isParticleSystem || !object.frustumCulled || t1.contains$1(t1, object)) {
          t4 = camera.get$matrixWorldInverse();
          webglObject._modelViewMatrix = t4.$mul(t4, webglObject.object.get$matrixWorld());
          webglObject._normalMatrix = S.calcInverse(webglObject._modelViewMatrix);
          webglObject._normalMatrix.transpose$0();
          this.unrollBufferMaterial$1(webglObject);
          webglObject.render = true;
          if (t3) {
            this._vector3 = object.get$matrixWorld().getTranslation$0();
            this._vector3.applyProjection$1(this._projScreenMatrix);
            webglObject.z = this._vector3.storage[2];
          }
        }
    }
    if (t3)
      t2.sort$1(renderList, this.get$painterSort());
    renderList = scene.$index(scene, "__webglObjectsImmediate");
    t1 = J.getInterceptor$asx(renderList);
    il = t1.get$length(renderList);
    if (typeof il !== "number")
      throw H.iae(il);
    i = 0;
    for (; i < il; ++i) {
      webglObject = t1.$index(renderList, i);
      object = webglObject.get$object();
      if (object.get$visible(object)) {
        t2 = camera.get$matrixWorldInverse();
        webglObject._modelViewMatrix = t2.$mul(t2, webglObject.object.get$matrixWorld());
        webglObject._normalMatrix = S.calcInverse(webglObject._modelViewMatrix);
        webglObject._normalMatrix.transpose$0();
        this.unrollImmediateBufferMaterial$1(webglObject);
      }
    }
    scene.get$overrideMaterial();
    this.setBlending$1(0);
    t1 = scene.get$_data();
    this.renderObjects$8(t1.$index(t1, "__webglObjects"), true, "opaque", camera, lights, fog, false, null);
    t1 = scene.get$_data();
    this.renderObjectsImmediate$7(t1.$index(t1, "__webglObjectsImmediate"), "opaque", camera, lights, fog, false, null);
    t1 = scene.get$_data();
    this.renderObjects$8(t1.$index(t1, "__webglObjects"), false, "transparent", camera, lights, fog, true, null);
    t1 = scene.get$_data();
    this.renderObjectsImmediate$7(t1.$index(t1, "__webglObjectsImmediate"), "transparent", camera, lights, fog, true, null);
    this.renderPlugins$3(this.renderPluginsPost, scene, camera);
    this.setDepthTest$1(true);
    this.setDepthWrite$1(true);
  },
  _render$2: function(scene, c) {
    return this._render$4$forceClear$renderTarget(scene, c, false, null);
  },
  renderPlugins$3: function(plugins, scene, camera) {
    H.IterableMixinWorkaround_forEach(plugins, new S.WebGLRenderer_renderPlugins_closure(this, scene, camera));
  },
  renderObjects$8: function(renderList, reverse, materialType, camera, lights, fog, useBlending, overrideMaterial) {
    var t1, start, end, delta, t2, i, object, buffer, material, webglObject, t3;
    t1 = J.getInterceptor$asx(renderList);
    if (reverse) {
      t1 = t1.get$length(renderList);
      if (typeof t1 !== "number")
        throw t1.$sub();
      start = t1 - 1;
      end = -1;
      delta = -1;
    } else {
      end = t1.get$length(renderList);
      start = 0;
      delta = 1;
    }
    for (t1 = J.getInterceptor$asx(renderList), t2 = materialType === "opaque", i = start, object = null, buffer = null, material = null; i !== end; i += delta) {
      webglObject = t1.$index(renderList, i);
      if (webglObject.get$render() === true) {
        object = webglObject.get$object();
        buffer = webglObject.buffer;
        material = t2 ? webglObject.opaque : webglObject.transparent;
        if (material == null)
          continue;
        if (useBlending)
          this.setBlending$4(material.get$blending(), material.get$blendEquation(material), material.get$blendSrc(), material.get$blendDst());
        this.setDepthTest$1(material.get$depthTest());
        t3 = material.get$depthWrite();
        if (this._oldDepthWrite !== t3) {
          J.depthMask$1$x(this._gl, t3);
          this._oldDepthWrite = t3;
        }
        this.setPolygonOffset$3(material.get$polygonOffset(material), material.get$polygonOffsetFactor(), material.get$polygonOffsetUnits());
        this.setMaterialFaces$1(material);
        if (buffer.get$isBufferGeometry())
          this.renderBufferDirect$6(camera, lights, fog, material, buffer, webglObject);
        else
          this.renderBuffer$6(camera, lights, fog, material, buffer, webglObject);
      }
    }
  },
  renderObjectsImmediate$7: function(renderList, materialType, camera, lights, fog, useBlending, overrideMaterial) {
    var t1, il, material, i, webglObject, object, material0;
    t1 = J.getInterceptor$asx(renderList);
    il = t1.get$length(renderList);
    if (typeof il !== "number")
      throw H.iae(il);
    material = null;
    i = 0;
    for (; i < il; ++i) {
      webglObject = t1.$index(renderList, i);
      object = webglObject.get$object();
      if (object.get$visible(object)) {
        material0 = webglObject.$index(webglObject, materialType);
        material = material0;
        continue;
      }
    }
  },
  renderImmediateObject$5: function(camera, lights, fog, material, object) {
    var program = this.setProgram$5(camera, lights, fog, material, object);
    this._currentGeometryGroupHash = -1;
    this.setMaterialFaces$1(material);
    object.get$immediateRenderCallback();
    object.render$1(new S.WebGLRenderer_renderImmediateObject_closure(this, material, program));
  },
  unrollImmediateBufferMaterial$1: function(webglobject) {
    var t1, t2, material;
    t1 = webglobject.object.get$material();
    if (t1.__data == null)
      t1.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t2 = t1.__data;
    if (t2.$index(t2, "__webglMaterial") == null) {
      if (t1.__data == null)
        t1.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      t2 = t1.__data;
      t2.$indexSet(t2, "__webglMaterial", new S.WebGLMaterial(t1, null, null, null, null, null, 0, 0, false));
    }
    if (t1.__data == null)
      t1.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t1 = t1.__data;
    material = t1.$index(t1, "__webglMaterial");
    if (material.get$transparent() === true) {
      webglobject.transparent = material;
      webglobject.opaque = null;
    } else {
      webglobject.opaque = material;
      webglobject.transparent = null;
    }
  },
  unrollBufferMaterial$1: function(object) {
    var t1, t2, t3, meshMaterial;
    t1 = object.object;
    t2 = t1.get$material();
    if (t2.__data == null)
      t2.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t3 = t2.__data;
    if (t3.$index(t3, "__webglMaterial") == null) {
      if (t2.__data == null)
        t2.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      t3 = t2.__data;
      t3.$indexSet(t3, "__webglMaterial", new S.WebGLMaterial(t2, null, null, null, null, null, 0, 0, false));
    }
    if (t2.__data == null)
      t2.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t2 = t2.__data;
    meshMaterial = t2.$index(t2, "__webglMaterial");
    t1.get$material();
    if (meshMaterial != null)
      if (meshMaterial.get$transparent() != null) {
        object.transparent = meshMaterial;
        object.opaque = null;
      } else {
        object.opaque = meshMaterial;
        object.transparent = null;
      }
  },
  initWebGLObjects$1: function(scene) {
    var t1, ol, o;
    if (scene.$index(scene, "__webglObjects") == null) {
      scene.$indexSet(scene, "__webglObjects", []);
      scene.$indexSet(scene, "__webglObjectsImmediate", []);
      scene.$indexSet(scene, "__webglSprites", []);
      scene.$indexSet(scene, "__webglFlares", []);
    }
    for (; scene.get$__objectsAdded().length > 0;) {
      t1 = scene.__objectsAdded;
      if (0 >= t1.length)
        throw H.ioore(t1, 0);
      this.addObject$2(t1[0], scene);
      C.JSArray_methods.removeAt$1(scene.__objectsAdded, 0);
    }
    for (; t1 = scene.__objectsRemoved, t1.length > 0;) {
      this.removeObject$2(t1[0], scene);
      C.JSArray_methods.removeAt$1(scene.__objectsRemoved, 0);
    }
    ol = J.get$length$asx(scene.$index(scene, "__webglObjects"));
    if (typeof ol !== "number")
      throw H.iae(ol);
    o = 0;
    for (; o < ol; ++o)
      this.updateObject$1(J.$index$asx(scene.$index(scene, "__webglObjects"), o));
  },
  addObject$2: function(object, scene) {
    var webglobject, geometry, t1, t2;
    if (object.$index(object, "__webglObject") == null)
      object.$indexSet(object, "__webglObject", new S.WebGLObject(false, false, null, null, null, null, null, null, object, null, null, true, 0, null));
    webglobject = object.$index(object, "__webglObject");
    geometry = webglobject.get$webglgeometry();
    if (!webglobject.__webglInit) {
      webglobject.__webglInit = true;
      t1 = new Float32Array(16);
      t1.$dartCachedLength = t1.length;
      t1 = new T.Matrix4(t1);
      t1.setIdentity$0();
      webglobject._modelViewMatrix = t1;
      t1 = new Float32Array(9);
      t1.$dartCachedLength = t1.length;
      webglobject._normalMatrix = new T.Matrix3(t1);
      if (geometry != null && geometry.get$__webglInit() == null)
        geometry.set$__webglInit(true);
      if (!!object.$isLine) {
        if (geometry.get$__webglVertexBuffer() == null) {
          geometry.__webglVertexBuffer = J.createBuffer$0$x(this._gl);
          geometry.__webglColorBuffer = J.createBuffer$0$x(this._gl);
          geometry.__webglLineDistanceBuffer = J.createBuffer$0$x(this._gl);
          t1 = this.info.memory;
          t1.geometries = t1.geometries + 1;
          this.initLineBuffers$2(geometry, webglobject);
          geometry.set$verticesNeedUpdate(true);
          geometry.set$colorsNeedUpdate(true);
          geometry.set$lineDistancesNeedUpdate(true);
        }
      } else if (!!object.$isParticleSystem)
        if (geometry.get$__webglVertexBuffer() == null) {
          t1 = object.geometry;
          t2 = J.getInterceptor(t1);
          if (typeof t1 === "object" && t1 !== null && !!t2.$isGeometry && true) {
            geometry.__webglVertexBuffer = J.createBuffer$0$x(this._gl);
            geometry.__webglColorBuffer = J.createBuffer$0$x(this._gl);
            t1 = this.info.memory;
            t1.geometries = t1.geometries + 1;
            this.initParticleBuffers$2(geometry, webglobject);
            geometry.set$verticesNeedUpdate(true);
            geometry.set$colorsNeedUpdate(true);
          }
        }
    }
    if (!webglobject.__webglActive) {
      if (!!object.$isLine || !!object.$isParticleSystem) {
        if (scene.__data == null)
          scene.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
        t1 = scene.__data;
        J.add$1$ax(t1.$index(t1, "__webglObjects"), new S.WebGLObject(false, false, null, null, null, null, null, geometry, webglobject.object, null, null, webglobject.render, webglobject.z, null));
      } else {
        if (object.__data == null)
          object.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
        t1 = object.__data;
        t1 = t1.$index(t1, "immediateRenderCallback") != null;
        if (t1) {
          if (scene.__data == null)
            scene.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
          t1 = scene.__data;
          J.add$1$ax(t1.$index(t1, "__webglObjectsImmediate"), new S.WebGLObject(false, false, null, null, null, null, null, null, webglobject.object, null, null, webglobject.render, webglobject.z, null));
        }
      }
      webglobject.__webglActive = true;
    }
  },
  addBuffer$3: function(objlist, buffer, object) {
    J.add$1$ax(objlist, new S.WebGLObject(false, false, null, null, null, null, null, buffer, object.object, null, null, object.render, object.z, null));
  },
  updateObject$1: function(webglobject) {
    var object, t1, t2, t3, geometry, material, customAttributesDirty;
    object = webglobject.get$object();
    t1 = webglobject.object;
    t1 = !!t1.$isParticleSystem || !!t1.$isLine;
    if ((t1 ? webglobject.object.get$geometry() : null) != null) {
      t1 = webglobject.object;
      t1 = !!t1.$isParticleSystem || !!t1.$isLine;
      t1 = t1 ? webglobject.object.get$geometry() : null;
      if (t1.__data == null)
        t1.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      t2 = t1.__data;
      if (t2.$index(t2, "__webglBuffer") == null) {
        t2 = t1.id;
        if (t1.__data == null)
          t1.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
        t3 = t1.__data;
        t3.$indexSet(t3, "__webglBuffer", new S.WebGLGeometry(t2, null, null, null, 0, 0, 0, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, t1));
      }
      if (t1.__data == null)
        t1.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      t1 = t1.__data;
      geometry = t1.$index(t1, "__webglBuffer");
    } else
      geometry = null;
    if (!!object.$isLine) {
      material = this.getBufferMaterial$2(webglobject, geometry);
      t1 = J.getInterceptor$x(material);
      customAttributesDirty = t1.get$attributes(material) != null && this.areCustomAttributesDirty$1(material);
      if (geometry.get$verticesNeedUpdate() !== true) {
        t2 = geometry._geometry;
        t3 = t2.__data;
        if (t3.containsKey$1(t3, "colorsNeedUpdate")) {
          if (t2.__data == null)
            t2.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
          t3 = t2.__data;
          t3 = t3.$index(t3, "colorsNeedUpdate");
        } else
          t3 = false;
        if (t3 !== true) {
          t3 = t2.__data;
          if (t3.containsKey$1(t3, "lineDistancesNeedUpdate")) {
            if (t2.__data == null)
              t2.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
            t2 = t2.__data;
            t2 = t2.$index(t2, "lineDistancesNeedUpdate");
          } else
            t2 = false;
          t2 = t2 === true || customAttributesDirty;
        } else
          t2 = true;
      } else
        t2 = true;
      if (t2)
        this.setLineBuffers$2(geometry, 35048);
      t2 = geometry._geometry;
      if (t2.__data == null)
        t2.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      t3 = t2.__data;
      t3.$indexSet(t3, "verticesNeedUpdate", false);
      if (t2.__data == null)
        t2.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      t3 = t2.__data;
      t3.$indexSet(t3, "colorsNeedUpdate", false);
      if (t2.__data == null)
        t2.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      t2 = t2.__data;
      t2.$indexSet(t2, "lineDistancesNeedUpdate", false);
      if (t1.get$attributes(material) != null)
        this.clearCustomAttributes$1(material);
    } else if (!!object.$isParticleSystem) {
      material = this.getBufferMaterial$2(webglobject, null);
      t1 = J.getInterceptor$x(material);
      customAttributesDirty = t1.get$attributes(material) != null && this.areCustomAttributesDirty$1(material);
      if (geometry.get$verticesNeedUpdate() !== true) {
        t2 = geometry._geometry;
        t3 = t2.__data;
        if (t3.containsKey$1(t3, "colorsNeedUpdate")) {
          if (t2.__data == null)
            t2.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
          t2 = t2.__data;
          t2 = t2.$index(t2, "colorsNeedUpdate");
        } else
          t2 = false;
        t2 = t2 === true || object.sortParticles || customAttributesDirty;
      } else
        t2 = true;
      if (t2)
        this.setParticleBuffers$3(geometry, 35048, object);
      t2 = geometry._geometry;
      if (t2.__data == null)
        t2.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      t3 = t2.__data;
      t3.$indexSet(t3, "verticesNeedUpdate", false);
      if (t2.__data == null)
        t2.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      t2 = t2.__data;
      t2.$indexSet(t2, "colorsNeedUpdate", false);
      if (t1.get$attributes(material) != null)
        this.clearCustomAttributes$1(material);
    }
  },
  areCustomAttributesDirty$1: function(material) {
    var t1 = J.get$attributes$x(material);
    return J.any$1$ax(t1.get$values(t1), new S.WebGLRenderer_areCustomAttributesDirty_closure());
  },
  clearCustomAttributes$1: function(material) {
    var t1 = J.get$attributes$x(material);
    return t1.forEach$1(t1, new S.WebGLRenderer_clearCustomAttributes_closure());
  },
  removeObject$2: function(object, scene) {
    var webglobject, t1;
    if (object.$index(object, "__webglObject") == null)
      object.$indexSet(object, "__webglObject", new S.WebGLObject(false, false, null, null, null, null, null, null, object, null, null, true, 0, null));
    webglobject = object.$index(object, "__webglObject");
    if (!!object.$isParticleSystem || !!object.$isLine) {
      if (scene.__data == null)
        scene.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      t1 = scene.__data;
      this.removeInstances$2(t1.$index(t1, "__webglObjects"), object);
    } else {
      if (object.__data == null)
        object.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
      t1 = object.__data;
      t1 = t1.$index(t1, "immediateRenderCallback") != null;
      if (t1) {
        if (scene.__data == null)
          scene.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
        t1 = scene.__data;
        this.removeInstances$2(t1.$index(t1, "__webglObjectsImmediate"), object);
      }
    }
    webglobject.set$__webglActive(false);
  },
  removeInstances$2: function(objlist, object) {
    var t1, t2, o;
    t1 = J.getInterceptor$asx(objlist);
    t2 = t1.get$length(objlist);
    if (typeof t2 !== "number")
      throw t2.$sub();
    o = t2 - 1;
    for (; o >= 0; --o)
      if (t1.$index(objlist, o).get$object() === object)
        t1.removeAt$1(objlist, o);
  },
  initMaterial$4: function(material, lights, fog, webglobject) {
    var object, t1, shaderID, maxLightCount, maxShadows, maxBones, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, attributes, i;
    object = webglobject.get$object();
    t1 = material._material;
    if (!!t1.$isLineBasicMaterial)
      shaderID = "basic";
    else
      shaderID = !!t1.$isParticleBasicMaterial ? "particle_basic" : null;
    if (shaderID != null) {
      t1 = S.ShaderLib();
      this.setMaterialShaders$2(material, t1.$index(t1, shaderID));
    }
    maxLightCount = this.allocateLights$1(lights);
    maxShadows = this.allocateShadows$1(lights);
    maxBones = this.allocateBones$1(object);
    t1 = material._material;
    t2 = !!t1.$isShaderMaterial;
    t3 = t2 ? H.interceptedTypeCast(t1, "$isShaderMaterial").fragmentShader : material._fragmentShader;
    t4 = t2 ? H.interceptedTypeCast(t1, "$isShaderMaterial").vertexShader : material._vertexShader;
    t5 = t2 ? H.interceptedTypeCast(t1, "$isShaderMaterial").uniforms : material._uniforms;
    t6 = t2 ? H.interceptedTypeCast(t1, "$isShaderMaterial").attributes : null;
    t7 = t2 ? H.interceptedTypeCast(t1, "$isShaderMaterial").defines : H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t8 = !!t1.$isParticleBasicMaterial ? t1.get$map(t1) : null;
    t9 = material.get$_hasVertexColors() ? t1.get$vertexColors() : 0;
    t10 = material.get$_hasFog() && t1.get$fog();
    t11 = !!t1.$isParticleBasicMaterial && H.interceptedTypeCast(t1, "$isParticleBasicMaterial").sizeAttenuation;
    t12 = t2 && t1.get$skinning();
    if (this.supportsBoneTextures === true)
      t13 = false;
    else
      t13 = false;
    t14 = t2 && t1.get$morphTargets();
    t15 = t2 && t1.get$morphNormals();
    t16 = this.maxMorphTargets;
    t17 = this.maxMorphNormals;
    t18 = maxLightCount.$index(maxLightCount, "directional");
    t19 = maxLightCount.$index(maxLightCount, "point");
    t20 = maxLightCount.$index(maxLightCount, "spot");
    t21 = maxLightCount.$index(maxLightCount, "hemi");
    t22 = this.shadowMapEnabled && object.get$receiveShadow();
    t23 = t1.side;
    material.program = this.buildProgram$41$alphaTest$boneTextureHeight$boneTextureWidth$bumpMap$doubleSided$envMap$flipSided$fog$fogExp$lightMap$map$maxBones$maxDirLights$maxHemiLights$maxMorphNormals$maxMorphTargets$maxPointLights$maxShadows$maxSpotLights$metal$morphNormals$morphTargets$normalMap$perPixel$shadowMapCascade$shadowMapDebug$shadowMapEnabled$shadowMapType$sizeAttenuation$skinning$specularMap$useFog$useVertexTexture$vertexColors$wrapAround(shaderID, t3, t4, t5, t6, t7, t1.alphaTest, null, null, null, t23 === 2, null, t23 === 1, fog, false, null, t8, maxBones, t18, t21, t17, t16, t19, maxShadows, t20, false, t15, t14, null, false, this.shadowMapCascade, this.shadowMapDebug, t22, this.shadowMapType, t11, t12, null, t10, t13, t9, false);
    attributes = material.program.attributes;
    if (t2 && t1.get$morphTargets()) {
      material.numSupportedMorphTargets = 0;
      for (i = 0; i < t16; ++i)
        if (J.$ge$n(attributes.$index(attributes, "morphTarget" + i), 0))
          material.numSupportedMorphTargets = material.numSupportedMorphTargets + 1;
    }
    if (t2 && t1.get$morphNormals()) {
      material.numSupportedMorphNormals = 0;
      for (i = 0; i < t17; ++i)
        if (J.$ge$n(attributes.$index(attributes, "morphNormal" + i), 0))
          material.numSupportedMorphNormals = material.numSupportedMorphNormals + 1;
    }
    material.uniformsList = [];
    t1 = t2 ? H.interceptedTypeCast(t1, "$isShaderMaterial").uniforms : material._uniforms;
    t1.forEach$1(t1, new S.WebGLRenderer_initMaterial_closure(material));
  },
  setMaterialShaders$2: function(material, shaders) {
    var t1 = J.getInterceptor$asx(shaders);
    material.set$uniforms(S.UniformsUtils_clone(t1.$index(shaders, "uniforms")));
    material.set$vertexShader(t1.$index(shaders, "vertexShader"));
    material.set$fragmentShader(t1.$index(shaders, "fragmentShader"));
  },
  setProgram$5: function(camera, lights, fog, material, object) {
    var t1, program, p_uniforms, t2, m_uniforms, t3, refreshMaterial;
    this._usedTextureUnits = 0;
    if (material.get$needsUpdate()) {
      if (material.get$program() != null)
        this.deallocateMaterial$1(material);
      this.initMaterial$4(material, lights, fog, object);
      material._material.needsUpdate = false;
    }
    if (material.get$morphTargets())
      if (object.get$__webglMorphTargetInfluences() == null) {
        t1 = new Float32Array(this.maxMorphTargets);
        t1.$dartCachedLength = t1.length;
        object.__webglMorphTargetInfluences = t1;
      }
    program = material.get$program();
    p_uniforms = program.uniforms;
    t1 = material._material;
    t2 = !!t1.$isShaderMaterial;
    m_uniforms = t2 ? H.interceptedTypeCast(t1, "$isShaderMaterial").uniforms : material._uniforms;
    t3 = this._currentProgram;
    if (program == null ? t3 != null : program !== t3) {
      J.useProgram$1$x(this._gl, program.glProgram);
      this._currentProgram = program;
      refreshMaterial = true;
    } else
      refreshMaterial = false;
    t3 = t1.id;
    if (t3 !== this._currentMaterialId) {
      this._currentMaterialId = t3;
      refreshMaterial = true;
    }
    if (refreshMaterial || camera !== this._currentCamera) {
      J.uniformMatrix4fv$3$x(this._gl, p_uniforms.$index(p_uniforms, "projectionMatrix"), false, camera.get$projectionMatrix().storage);
      if (camera !== this._currentCamera)
        this._currentCamera = camera;
    }
    if (t2 && t1.get$skinning()) {
      if (this.supportsBoneTextures === true)
        object.get$useVertexTexture();
      t3 = p_uniforms.get$boneGlobalMatrices();
      J.uniformMatrix4fv$3$x(this._gl, t3, false, object.get$boneMatrices());
    }
    if (refreshMaterial) {
      if (fog != null && material.get$_hasFog() && t1.get$fog())
        this.refreshUniformsFog$2(m_uniforms, fog);
      t3 = t2 && H.interceptedTypeCast(t1, "$isShaderMaterial").lights;
      if (t3) {
        if (this._lightsNeedUpdate) {
          this.setupLights$2(program, lights);
          this._lightsNeedUpdate = false;
        }
        this.refreshUniformsLights$2(m_uniforms, this._lights);
      }
      if (!!t1.$isLineBasicMaterial)
        this.refreshUniformsLine$2(m_uniforms, material);
      else if (!!t1.$isParticleBasicMaterial)
        this.refreshUniformsParticle$2(m_uniforms, material);
      if (object.get$receiveShadow() && !material.shadowPass)
        this.refreshUniformsShadow$2(m_uniforms, lights);
      this.loadUniformsGeneric$2(program, material.uniformsList);
      t2 = !t2;
      if (t2)
        t3 = false;
      else
        t3 = true;
      if (t3)
        if (p_uniforms.$index(p_uniforms, "cameraPosition") != null) {
          this._vector3 = camera.get$matrixWorld().getTranslation$0();
          t3 = this._vector3.storage;
          J.uniform3f$4$x(this._gl, p_uniforms.$index(p_uniforms, "cameraPosition"), t3[0], t3[1], t3[2]);
        }
      if (t2)
        t1 = false;
      else
        t1 = true;
      if (t1)
        if (p_uniforms.$index(p_uniforms, "viewMatrix") != null)
          J.uniformMatrix4fv$3$x(this._gl, p_uniforms.$index(p_uniforms, "viewMatrix"), false, camera.get$matrixWorldInverse().storage);
    }
    this.loadUniformsMatrices$2(p_uniforms, object);
    if (p_uniforms.$index(p_uniforms, "modelMatrix") != null)
      J.uniformMatrix4fv$3$x(this._gl, p_uniforms.$index(p_uniforms, "modelMatrix"), false, object.get$matrixWorld().get$storage());
    return program;
  },
  refreshUniformsLine$2: function(uniforms, material) {
    var t1 = material._material;
    J.set$value$x(uniforms.$index(uniforms, "diffuse"), t1.get$color(t1));
    J.set$value$x(uniforms.$index(uniforms, "opacity"), t1.opacity);
  },
  refreshUniformsParticle$2: function(uniforms, material) {
    var t1, t2, t3, t4;
    t1 = material._material;
    J.set$value$x(uniforms.$index(uniforms, "psColor"), t1.get$color(t1));
    J.set$value$x(uniforms.$index(uniforms, "opacity"), t1.opacity);
    t2 = uniforms.$index(uniforms, "size");
    t3 = !!t1.$isParticleBasicMaterial;
    J.set$value$x(t2, t3 ? H.interceptedTypeCast(t1, "$isParticleBasicMaterial").size : null);
    t2 = uniforms.$index(uniforms, "scale");
    t4 = J.get$height$x(this.canvas);
    if (typeof t4 !== "number")
      throw t4.$div();
    J.set$value$x(t2, t4 / 2);
    t4 = uniforms.$index(uniforms, "map");
    J.set$value$x(t4, t3 ? t1.get$map(t1) : null);
  },
  refreshUniformsFog$2: function(uniforms, fog) {
    J.set$value$x(uniforms.$index(uniforms, "fogColor"), J.get$color$x(fog));
  },
  refreshUniformsLights$2: function(uniforms, lights) {
    J.set$value$x(uniforms.$index(uniforms, "ambientLightColor"), lights.$index(lights, "ambient"));
    J.set$value$x(uniforms.$index(uniforms, "directionalLightColor"), J.$index$asx(lights.$index(lights, "directional"), "colors"));
    J.set$value$x(uniforms.$index(uniforms, "directionalLightDirection"), J.$index$asx(lights.$index(lights, "directional"), "positions"));
    J.set$value$x(uniforms.$index(uniforms, "pointLightColor"), J.$index$asx(lights.$index(lights, "point"), "colors"));
    J.set$value$x(uniforms.$index(uniforms, "pointLightPosition"), J.$index$asx(lights.$index(lights, "point"), "positions"));
    J.set$value$x(uniforms.$index(uniforms, "pointLightDistance"), J.$index$asx(lights.$index(lights, "point"), "distances"));
    J.set$value$x(uniforms.$index(uniforms, "spotLightColor"), J.$index$asx(lights.$index(lights, "spot"), "colors"));
    J.set$value$x(uniforms.$index(uniforms, "spotLightPosition"), J.$index$asx(lights.$index(lights, "spot"), "positions"));
    J.set$value$x(uniforms.$index(uniforms, "spotLightDistance"), J.$index$asx(lights.$index(lights, "spot"), "distances"));
    J.set$value$x(uniforms.$index(uniforms, "spotLightDirection"), J.$index$asx(lights.$index(lights, "spot"), "directions"));
    J.set$value$x(uniforms.$index(uniforms, "spotLightAngleCos"), J.$index$asx(lights.$index(lights, "spot"), "anglesCos"));
    J.set$value$x(uniforms.$index(uniforms, "spotLightExponent"), J.$index$asx(lights.$index(lights, "spot"), "exponents"));
    J.set$value$x(uniforms.$index(uniforms, "hemisphereLightSkyColor"), J.$index$asx(lights.$index(lights, "hemi"), "skyColors"));
    J.set$value$x(uniforms.$index(uniforms, "hemisphereLightGroundColor"), J.$index$asx(lights.$index(lights, "hemi"), "groundColors"));
    J.set$value$x(uniforms.$index(uniforms, "hemisphereLightDirection"), J.$index$asx(lights.$index(lights, "hemi"), "positions"));
  },
  refreshUniformsShadow$2: function(uniforms, lights) {
    var il, j, i, light, t1, j0;
    if (uniforms.containsKey$1(uniforms, "shadowMatrix"))
      for (il = J.get$length$asx(lights), j = 0, i = 0; i < il; ++i) {
        if (i >= lights.length)
          throw H.ioore(lights, i);
        light = lights[i];
        if (!light.get$castShadow())
          continue;
        t1 = typeof light === "object" && light !== null && !!light.$isDirectionalLight && !light.shadowCascade;
        if (t1) {
          t1 = J.get$length$asx(J.get$value$x(uniforms.$index(uniforms, "shadowMap")));
          j0 = j + 1;
          if (typeof t1 !== "number")
            throw t1.$lt();
          if (t1 < j0) {
            J.set$length$asx(J.get$value$x(uniforms.$index(uniforms, "shadowMap")), j0);
            J.set$length$asx(J.get$value$x(uniforms.$index(uniforms, "shadowMapSize")), j0);
            J.set$length$asx(J.get$value$x(uniforms.$index(uniforms, "shadowMatrix")), j0);
            J.set$length$asx(J.get$value$x(uniforms.$index(uniforms, "shadowDarkness")), j0);
            J.set$length$asx(J.get$value$x(uniforms.$index(uniforms, "shadowBias")), j0);
          }
          J.$indexSet$ax(J.get$value$x(uniforms.$index(uniforms, "shadowMap")), j, light.get$shadowMap());
          J.$indexSet$ax(J.get$value$x(uniforms.$index(uniforms, "shadowMapSize")), j, light.shadowMapSize);
          J.$indexSet$ax(J.get$value$x(uniforms.$index(uniforms, "shadowMatrix")), j, light.shadowMatrix);
          J.$indexSet$ax(J.get$value$x(uniforms.$index(uniforms, "shadowDarkness")), j, light.shadowDarkness);
          J.$indexSet$ax(J.get$value$x(uniforms.$index(uniforms, "shadowBias")), j, light.shadowBias);
          j = j0;
        }
      }
  },
  loadUniformsMatrices$2: function(uniforms, object) {
    J.uniformMatrix4fv$3$x(this._gl, uniforms.$index(uniforms, "modelViewMatrix"), false, object.get$_modelViewMatrix().get$storage());
    if (uniforms.$index(uniforms, "normalMatrix") != null)
      J.uniformMatrix3fv$3$x(this._gl, uniforms.$index(uniforms, "normalMatrix"), false, object._normalMatrix.storage);
  },
  getTextureUnit$0: function() {
    var unit, t1, line;
    unit = this._usedTextureUnits;
    t1 = this.maxTextures;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    if (unit >= t1) {
      line = "WebGLRenderer: trying to use " + unit + " texture units while this GPU supports only " + H.S(this.maxTextures);
      H.printToConsole(line);
    }
    this._usedTextureUnits = this._usedTextureUnits + 1;
    return unit;
  },
  loadUniformsGeneric$2: function(program, uniforms) {
    var jl, uniform, value, type, texture, textureUnit, i, il, j, t1, t2, $location, textures;
    jl = uniforms.length;
    for (uniform = null, value = null, type = null, texture = null, textureUnit = null, i = null, il = null, j = 0; j < jl; ++j) {
      t1 = program.uniforms;
      if (j >= uniforms.length)
        throw H.ioore(uniforms, j);
      t2 = uniforms[j];
      if (1 >= t2.length)
        throw H.ioore(t2, 1);
      $location = t1.$index(t1, t2[1]);
      if ($location == null)
        continue;
      if (j >= uniforms.length)
        throw H.ioore(uniforms, j);
      t1 = uniforms[j];
      if (0 >= t1.length)
        throw H.ioore(t1, 0);
      uniform = t1[0];
      type = J.get$type$x(uniform);
      value = uniform.get$typedValue();
      if (type === "i")
        J.uniform1i$2$x(this._gl, $location, value);
      else if (type === "f")
        J.uniform1f$2$x(this._gl, $location, value);
      else if (type === "v2") {
        t1 = J.getInterceptor$x(value);
        J.uniform2f$3$x(this._gl, $location, t1.get$x(value), t1.get$y(value));
      } else if (type === "v3") {
        t1 = J.getInterceptor$x(value);
        J.uniform3f$4$x(this._gl, $location, t1.get$x(value), t1.get$y(value), t1.get$z(value));
      } else if (type === "v4") {
        t1 = J.getInterceptor$x(value);
        J.uniform4f$5$x(this._gl, $location, t1.get$x(value), t1.get$y(value), t1.get$z(value), value.get$w());
      } else if (type === "c") {
        t1 = J.getInterceptor$x(value);
        J.uniform3f$4$x(this._gl, $location, t1.get$r(value), value.get$g(), t1.get$b(value));
      } else if (type === "iv1")
        J.uniform1iv$2$x(this._gl, $location, value);
      else if (type === "iv")
        J.uniform3iv$2$x(this._gl, $location, value);
      else if (type === "fv1")
        J.uniform1fv$2$x(this._gl, $location, value);
      else if (type === "fv")
        J.uniform3fv$2$x(this._gl, $location, value);
      else if (type === "v2v")
        J.uniform2fv$2$x(this._gl, $location, value);
      else if (type === "v3v")
        J.uniform3fv$2$x(this._gl, $location, value);
      else if (type === "v4v")
        J.uniform4fv$2$x(this._gl, $location, value);
      else if (type === "m2")
        J.uniformMatrix2fv$3$x(this._gl, $location, false, value);
      else if (type === "m3")
        J.uniformMatrix3fv$3$x(this._gl, $location, false, value);
      else if (type === "m4")
        J.uniformMatrix4fv$3$x(this._gl, $location, false, value);
      else if (type === "m4v")
        J.uniformMatrix4fv$3$x(this._gl, $location, false, value);
      else if (type === "t") {
        texture = uniform._three$_value;
        textureUnit = this.getTextureUnit$0();
        J.uniform1i$2$x(this._gl, $location, textureUnit);
        if (texture == null)
          continue;
        texture.get$image();
        this.setTexture$2(texture, textureUnit);
      } else if (type === "tv") {
        textures = uniform._three$_value;
        t1 = J.getInterceptor$ax(textures);
        t2 = new Int32Array(J.toList$0$ax(t1.map$1(textures, new S.WebGLRenderer_loadUniformsGeneric_closure(this))));
        t2.$dartCachedLength = t2.length;
        uniform._three$_array = t2;
        J.uniform1iv$2$x(this._gl, $location, uniform._three$_array);
        il = t1.get$length(textures);
        if (typeof il !== "number")
          throw H.iae(il);
        i = 0;
        for (; i < il; ++i) {
          texture = J.$index$asx(uniform._three$_value, i);
          t1 = uniform._three$_array;
          if (i >= C.JS_CONST_ZYJ(t1))
            throw H.ioore(t1, i);
          textureUnit = t1[i];
          if (texture == null)
            continue;
          this.setTexture$2(texture, textureUnit);
        }
      }
    }
  },
  setColorGamma$4: function(array, offset, color, intensitySq) {
    var t1, t2;
    t1 = J.getInterceptor$x(color);
    t2 = J.getInterceptor$ax(array);
    t2.$indexSet(array, offset, t1.get$r(color) * t1.get$r(color) * intensitySq);
    t2.$indexSet(array, offset + 1, color.get$g() * color._g * intensitySq);
    t1 = color._b;
    t2.$indexSet(array, offset + 2, t1 * t1 * intensitySq);
  },
  setColorLinear$4: function(array, offset, color, intensity) {
    var t1, t2;
    t1 = J.get$r$x(color);
    if (typeof intensity !== "number")
      throw H.iae(intensity);
    t2 = J.getInterceptor$ax(array);
    t2.$indexSet(array, offset, t1 * intensity);
    t2.$indexSet(array, offset + 1, color.get$g() * intensity);
    t2.$indexSet(array, offset + 2, color._b * intensity);
  },
  setupLights$2: function(program, lights) {
    var zlights, dirColors, dirPositions, pointColors, pointDistances, spotColors, hemiSkyColors, hemiGroundColors, ll, t1, t2, t3, l, r, g, b, color, skyColor, groundColor, intensity, intensitySq, position, distance, dirLength, pointLength, spotLength, hemiLength, dirCount, pointCount, spotCount, hemiCount, dirOffset, pointOffset, spotOffset, hemiOffset, light, t4, t5, t6, l0;
    zlights = this._lights;
    dirColors = J.$index$asx(zlights.$index(zlights, "directional"), "colors");
    dirPositions = J.$index$asx(zlights.$index(zlights, "directional"), "positions");
    pointColors = J.$index$asx(zlights.$index(zlights, "point"), "colors");
    J.$index$asx(zlights.$index(zlights, "point"), "positions");
    pointDistances = J.$index$asx(zlights.$index(zlights, "point"), "distances");
    spotColors = J.$index$asx(zlights.$index(zlights, "spot"), "colors");
    J.$index$asx(zlights.$index(zlights, "spot"), "positions");
    J.$index$asx(zlights.$index(zlights, "spot"), "distances");
    J.$index$asx(zlights.$index(zlights, "spot"), "directions");
    J.$index$asx(zlights.$index(zlights, "spot"), "anglesCos");
    J.$index$asx(zlights.$index(zlights, "spot"), "exponents");
    hemiSkyColors = J.$index$asx(zlights.$index(zlights, "hemi"), "skyColors");
    hemiGroundColors = J.$index$asx(zlights.$index(zlights, "hemi"), "groundColors");
    J.$index$asx(zlights.$index(zlights, "hemi"), "positions");
    ll = J.get$length$asx(lights);
    for (t1 = this.gammaInput, t2 = J.getInterceptor$asx(dirColors), t3 = J.getInterceptor$asx(dirPositions), l = 0, r = 0, g = 0, b = 0, color = null, skyColor = null, groundColor = null, intensity = null, intensitySq = null, position = null, distance = null, dirLength = 0, pointLength = 0, spotLength = 0, hemiLength = 0, dirCount = 0, pointCount = 0, spotCount = 0, hemiCount = 0, dirOffset = 0, pointOffset = 0, spotOffset = 0, hemiOffset = 0; l < ll; ++l) {
      if (l >= lights.length)
        throw H.ioore(lights, l);
      light = lights[l];
      t4 = J.getInterceptor(light);
      t5 = typeof light === "object" && light !== null && !!t4.$isDirectionalLight;
      t6 = !t5;
      if ((t5 || false) && light.get$onlyShadow() || t4.get$visible(light) !== true)
        continue;
      color = t4.get$color(light);
      if (t6)
        t4 = false;
      else
        t4 = true;
      if (t4) {
        intensity = light.get$intensity();
        distance = light.distance;
      }
      if (t5) {
        ++dirCount;
        if (!light.visible)
          continue;
        this._direction = light.matrixWorld.getTranslation$0();
        this._vector3 = light.target.matrixWorld.getTranslation$0();
        this._direction.sub$1(this._vector3);
        t4 = this._direction;
        t4.normalize$0(t4);
        t4 = this._direction.storage;
        if (t4[0] === 0 && t4[1] === 0 && t4[2] === 0)
          continue;
        dirOffset = dirLength * 3;
        t4 = dirOffset + 3;
        t2.set$length(dirColors, t4);
        t3.set$length(dirPositions, t4);
        t3.$indexSet(dirPositions, dirOffset, this._direction.storage[0]);
        t3.$indexSet(dirPositions, dirOffset + 1, this._direction.storage[1]);
        t3.$indexSet(dirPositions, dirOffset + 2, this._direction.storage[2]);
        if (t1) {
          if (typeof intensity !== "number")
            throw intensity.$mul();
          this.setColorGamma$4(dirColors, dirOffset, color, intensity * intensity);
        } else
          this.setColorLinear$4(dirColors, dirOffset, color, intensity);
        ++dirLength;
      }
    }
    ll = P.max(t2.get$length(dirColors), dirCount * 3);
    for (l = dirLength * 3; l < ll; ++l)
      t2.$indexSet(dirColors, l, 0);
    t1 = J.getInterceptor$asx(pointColors);
    ll = P.max(t1.get$length(pointColors), pointCount * 3);
    for (l = pointLength * 3; l < ll; ++l)
      t1.$indexSet(pointColors, l, 0);
    t1 = J.getInterceptor$asx(spotColors);
    ll = P.max(t1.get$length(spotColors), spotCount * 3);
    for (l = spotLength * 3; l < ll; ++l)
      t1.$indexSet(spotColors, l, 0);
    t1 = J.getInterceptor$asx(hemiSkyColors);
    t2 = hemiCount * 3;
    ll = P.max(t1.get$length(hemiSkyColors), t2);
    for (l = hemiLength * 3, l0 = l; l0 < ll; ++l0)
      t1.$indexSet(hemiSkyColors, l0, 0);
    t1 = J.getInterceptor$asx(hemiGroundColors);
    ll = P.max(t1.get$length(hemiGroundColors), t2);
    for (; l < ll; ++l)
      t1.$indexSet(hemiGroundColors, l, 0);
    J.$indexSet$ax(zlights.$index(zlights, "directional"), "length", dirLength);
    J.$indexSet$ax(zlights.$index(zlights, "point"), "length", pointLength);
    J.$indexSet$ax(zlights.$index(zlights, "spot"), "length", spotLength);
    J.$indexSet$ax(zlights.$index(zlights, "hemi"), "length", hemiLength);
    J.$indexSet$ax(zlights.$index(zlights, "ambient"), 0, r);
    J.$indexSet$ax(zlights.$index(zlights, "ambient"), 1, g);
    J.$indexSet$ax(zlights.$index(zlights, "ambient"), 2, b);
  },
  setMaterialFaces$1: function(material) {
    var doubleSided, flipSided, t1;
    doubleSided = material.get$side() === 2;
    flipSided = material.get$side() === 1;
    if (this._oldDoubleSided !== doubleSided) {
      t1 = this._gl;
      if (doubleSided)
        J.disable$1$x(t1, 2884);
      else
        J.enable$1$x(t1, 2884);
      this._oldDoubleSided = doubleSided;
    }
    if (this._oldFlipSided !== flipSided) {
      t1 = this._gl;
      if (flipSided)
        J.frontFace$1$x(t1, 2304);
      else
        J.frontFace$1$x(t1, 2305);
      this._oldFlipSided = flipSided;
    }
  },
  setDepthTest$1: function(depthTest) {
    var t1;
    if (this._oldDepthTest !== depthTest) {
      t1 = this._gl;
      if (depthTest)
        J.enable$1$x(t1, 2929);
      else
        J.disable$1$x(t1, 2929);
      this._oldDepthTest = depthTest;
    }
  },
  setDepthWrite$1: function(depthWrite) {
    if (this._oldDepthWrite !== depthWrite) {
      J.depthMask$1$x(this._gl, depthWrite);
      this._oldDepthWrite = depthWrite;
    }
  },
  setPolygonOffset$3: function(polygonoffset, factor, units) {
    var t1;
    if (this._oldPolygonOffset !== polygonoffset) {
      t1 = this._gl;
      if (polygonoffset)
        J.enable$1$x(t1, 32823);
      else
        J.disable$1$x(t1, 32823);
      this._oldPolygonOffset = polygonoffset;
    }
    if (polygonoffset)
      t1 = this._oldPolygonOffsetFactor !== factor || this._oldPolygonOffsetUnits !== units;
    else
      t1 = false;
    if (t1) {
      J.polygonOffset$2$x(this._gl, factor, units);
      this._oldPolygonOffsetFactor = factor;
      this._oldPolygonOffsetUnits = units;
    }
  },
  setBlending$4: function(blending, blendEquation, blendSrc, blendDst) {
    var t1;
    if (blending !== this._oldBlending) {
      if (blending === 0)
        J.disable$1$x(this._gl, 3042);
      else if (blending === 2) {
        J.enable$1$x(this._gl, 3042);
        J.blendEquation$1$x(this._gl, 32774);
        J.blendFunc$2$x(this._gl, 770, 1);
      } else if (blending === 3) {
        J.enable$1$x(this._gl, 3042);
        J.blendEquation$1$x(this._gl, 32774);
        J.blendFunc$2$x(this._gl, 0, 769);
      } else if (blending === 4) {
        J.enable$1$x(this._gl, 3042);
        J.blendEquation$1$x(this._gl, 32774);
        J.blendFunc$2$x(this._gl, 0, 768);
      } else {
        t1 = this._gl;
        if (blending === 5)
          J.enable$1$x(t1, 3042);
        else {
          J.enable$1$x(t1, 3042);
          J.blendEquationSeparate$2$x(this._gl, 32774, 32774);
          J.blendFuncSeparate$4$x(this._gl, 770, 771, 1, 771);
        }
      }
      this._oldBlending = blending;
    }
    if (blending === 5) {
      t1 = this._oldBlendEquation;
      if (blendEquation == null ? t1 != null : blendEquation !== t1) {
        J.blendEquation$1$x(this._gl, this.paramThreeToGL$1(blendEquation));
        this._oldBlendEquation = blendEquation;
      }
      t1 = this._oldBlendSrc;
      if (blendSrc == null ? t1 == null : blendSrc === t1) {
        t1 = this._oldBlendDst;
        t1 = blendDst == null ? t1 != null : blendDst !== t1;
      } else
        t1 = true;
      if (t1) {
        J.blendFunc$2$x(this._gl, this.paramThreeToGL$1(blendSrc), this.paramThreeToGL$1(blendDst));
        this._oldBlendSrc = blendSrc;
        this._oldBlendDst = blendDst;
      }
    } else {
      this._oldBlendEquation = null;
      this._oldBlendSrc = null;
      this._oldBlendDst = null;
    }
  },
  setBlending$1: function(blending) {
    return this.setBlending$4(blending, null, null, null);
  },
  generateDefines$1: function(defines) {
    var t1, chunks;
    t1 = {};
    t1.chunk_0 = null;
    chunks = [];
    defines.forEach$1(defines, new S.WebGLRenderer_generateDefines_closure(t1, chunks));
    return C.JSArray_methods.join$1(chunks, "\n");
  },
  buildProgram$41$alphaTest$boneTextureHeight$boneTextureWidth$bumpMap$doubleSided$envMap$flipSided$fog$fogExp$lightMap$map$maxBones$maxDirLights$maxHemiLights$maxMorphNormals$maxMorphTargets$maxPointLights$maxShadows$maxSpotLights$metal$morphNormals$morphTargets$normalMap$perPixel$shadowMapCascade$shadowMapDebug$shadowMapEnabled$shadowMapType$sizeAttenuation$skinning$specularMap$useFog$useVertexTexture$vertexColors$wrapAround: function(shaderID, fragmentShader, vertexShader, uniforms, attributes, defines, alphaTest, boneTextureHeight, boneTextureWidth, bumpMap, doubleSided, envMap, flipSided, fog, fogExp, lightMap, map, maxBones, maxDirLights, maxHemiLights, maxMorphNormals, maxMorphTargets, maxPointLights, maxShadows, maxSpotLights, metal, morphNormals, morphTargets, normalMap, perPixel, shadowMapCascade, shadowMapDebug, shadowMapEnabled, shadowMapType, sizeAttenuation, skinning, specularMap, useFog, useVertexTexture, vertexColors, wrapAround) {
    var t1, chunks, code, t2, pl, p, program, shadowMapTypeDefine, customDefines, glprogram, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, prefix_vertex, glFragmentShader, glVertexShader, $status, error, i;
    t1 = {};
    chunks = [];
    if (shaderID != null)
      chunks.push(shaderID);
    else {
      chunks.push(fragmentShader);
      chunks.push(vertexShader);
    }
    defines.forEach$1(defines, new S.WebGLRenderer_buildProgram_closure(chunks));
    code = C.JSArray_methods.join$0(chunks) + "maxDirLights" + H.S(maxDirLights) + "maxPointLights" + H.S(maxPointLights) + "maxSpotLights" + H.S(maxSpotLights) + "maxHemiLights" + H.S(maxHemiLights) + "maxShadows" + maxShadows + "maxBones" + H.S(maxBones) + "map" + H.S(map) + "envMap" + H.S(envMap) + "lightMap" + H.S(lightMap) + "bumpMap" + H.S(bumpMap) + "normalMap" + H.S(normalMap) + "specularMap" + H.S(specularMap) + "vertexColors" + H.S(vertexColors) + "fog" + H.S(fog) + "useFog" + useFog + "fogExp" + fogExp + "skinning" + skinning + "useVertexTexture" + useVertexTexture + "boneTextureWidth" + H.S(boneTextureWidth) + "boneTextureHeight" + H.S(boneTextureHeight) + "morphTargets" + morphTargets + "morphNormals" + morphNormals + "perPixel" + perPixel + "wrapAround" + wrapAround + "doubleSided" + doubleSided + "flipSided" + flipSided + "shadowMapEnabled" + shadowMapEnabled + "shadowMapType" + shadowMapType + "shadowMapDebug" + shadowMapDebug + "shadowMapCascade" + shadowMapCascade + "sizeAttenuation" + sizeAttenuation;
    t2 = this._programs;
    pl = t2.length;
    for (p = 0; p < pl; ++p) {
      program = t2[p];
      if (program.code === code) {
        program.usedTimes = program.usedTimes + 1;
        return program;
      }
    }
    if (shadowMapType === 1)
      shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF";
    else
      shadowMapTypeDefine = shadowMapType === 2 ? "SHADOWMAP_TYPE_PCF_SOFT" : "SHADOWMAP_TYPE_BASIC";
    customDefines = this.generateDefines$1(defines);
    glprogram = J.createProgram$0$x(this._gl);
    t2 = "precision " + this.precision + " float;";
    t3 = this.supportsVertexTextures === true ? "#define VERTEX_TEXTURES" : "";
    t4 = this.gammaInput;
    t5 = t4 ? "#define GAMMA_INPUT" : "";
    t6 = this.gammaOutput;
    t7 = t6 ? "#define GAMMA_OUTPUT" : "";
    t8 = this.physicallyBasedShading;
    t9 = t8 ? "#define PHYSICALLY_BASED_SHADING" : "";
    t10 = "#define MAX_DIR_LIGHTS " + H.S(maxDirLights);
    t11 = "#define MAX_POINT_LIGHTS " + H.S(maxPointLights);
    t12 = "#define MAX_SPOT_LIGHTS " + H.S(maxSpotLights);
    t13 = "#define MAX_HEMI_LIGHTS " + H.S(maxHemiLights);
    t14 = "#define MAX_SHADOWS " + maxShadows;
    t15 = "#define MAX_BONES " + H.S(maxBones);
    t16 = typeof vertexColors === "boolean";
    if (!(t16 && vertexColors))
      t17 = typeof vertexColors === "number" && Math.floor(vertexColors) === vertexColors && vertexColors !== 0;
    else
      t17 = true;
    t17 = t17 ? "#define USE_COLOR" : "";
    t18 = skinning ? "#define USE_SKINNING" : "";
    t19 = useVertexTexture ? "#define BONE_TEXTURE" : "";
    t20 = morphTargets ? "#define USE_MORPHTARGETS" : "";
    t21 = morphNormals ? "#define USE_MORPHNORMALS" : "";
    t22 = perPixel ? "#define PHONG_PER_PIXEL" : "";
    t23 = wrapAround ? "#define WRAP_AROUND" : "";
    t24 = doubleSided ? "#define DOUBLE_SIDED" : "";
    t25 = flipSided ? "#define FLIP_SIDED" : "";
    t26 = shadowMapEnabled ? "#define USE_SHADOWMAP" : "";
    t27 = shadowMapEnabled ? "#define " + shadowMapTypeDefine : "";
    t28 = shadowMapDebug ? "#define SHADOWMAP_DEBUG" : "";
    t29 = shadowMapCascade ? "#define SHADOWMAP_CASCADE" : "";
    prefix_vertex = C.JSArray_methods.join$1([t2, customDefines, t3, t5, t7, t9, t10, t11, t12, t13, t14, t15, "", "", "", "", "", "", t17, t18, t19, "", "", t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", "uniform vec3 cameraPosition;", "attribute vec3 position;", "attribute vec3 normal;", "attribute vec2 uv;", "attribute vec2 uv2;", "#ifdef USE_COLOR", "attribute vec3 color;", "#endif", "#ifdef USE_MORPHTARGETS", "attribute vec3 morphTarget0;", "attribute vec3 morphTarget1;", "attribute vec3 morphTarget2;", "attribute vec3 morphTarget3;", "#ifdef USE_MORPHNORMALS", "attribute vec3 morphNormal0;", "attribute vec3 morphNormal1;", "attribute vec3 morphNormal2;", "attribute vec3 morphNormal3;", "#else", "attribute vec3 morphTarget4;", "attribute vec3 morphTarget5;", "attribute vec3 morphTarget6;", "attribute vec3 morphTarget7;", "#endif", "#endif", "#ifdef USE_SKINNING", "attribute vec4 skinIndex;", "attribute vec4 skinWeight;", "#endif", ""], "\n");
    t2 = "precision " + this.precision + " float;";
    t3 = "#define MAX_DIR_LIGHTS " + H.S(maxDirLights);
    t5 = "#define MAX_POINT_LIGHTS " + H.S(maxPointLights);
    t7 = "#define MAX_SPOT_LIGHTS " + H.S(maxSpotLights);
    t9 = "#define MAX_HEMI_LIGHTS " + H.S(maxHemiLights);
    t10 = "#define MAX_SHADOWS " + maxShadows;
    t11 = alphaTest !== 0 ? "#define ALPHATEST " + alphaTest : "";
    t4 = t4 ? "#define GAMMA_INPUT" : "";
    t6 = t6 ? "#define GAMMA_OUTPUT" : "";
    t8 = t8 ? "#define PHYSICALLY_BASED_SHADING" : "";
    t12 = useFog && fog != null ? "#define USE_FOG" : "";
    if (useFog)
      ;
    if (!(t16 && vertexColors))
      t13 = typeof vertexColors === "number" && Math.floor(vertexColors) === vertexColors && vertexColors !== 0;
    else
      t13 = true;
    t13 = t13 ? "#define USE_COLOR" : "";
    t14 = metal ? "#define METAL" : "";
    t15 = perPixel ? "#define PHONG_PER_PIXEL" : "";
    t16 = wrapAround ? "#define WRAP_AROUND" : "";
    t17 = doubleSided ? "#define DOUBLE_SIDED" : "";
    t18 = flipSided ? "#define FLIP_SIDED" : "";
    t19 = shadowMapEnabled ? "#define USE_SHADOWMAP" : "";
    t20 = shadowMapEnabled ? "#define " + shadowMapTypeDefine : "";
    t21 = shadowMapDebug ? "#define SHADOWMAP_DEBUG" : "";
    glFragmentShader = this.getShader$2("fragment", C.JSArray_methods.join$1([t2, "", customDefines, "", t3, t5, t7, t9, t10, t11, t4, t6, t8, t12, "", "", "", "", "", "", "", t13, t14, t15, t16, t17, t18, t19, t20, t21, shadowMapCascade ? "#define SHADOWMAP_CASCADE" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", ""], "\n") + H.S(fragmentShader));
    glVertexShader = this.getShader$2("vertex", prefix_vertex + H.S(vertexShader));
    J.attachShader$2$x(this._gl, glprogram, glVertexShader);
    J.attachShader$2$x(this._gl, glprogram, glFragmentShader);
    J.linkProgram$1$x(this._gl, glprogram);
    if (J.getProgramParameter$2$x(this._gl, glprogram, 35714) !== true) {
      $status = J.getProgramParameter$2$x(this._gl, glprogram, 35715);
      error = J.getError$0$x(this._gl);
      P.print("Could not initialise shader\nVALIDATE_STATUS: " + H.S($status) + ", gl error [" + H.S(error) + "]");
    }
    J.deleteShader$1$x(this._gl, glFragmentShader);
    J.deleteShader$1$x(this._gl, glVertexShader);
    t2 = this._programs_counter;
    this._programs_counter = t2 + 1;
    t3 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    program = new S.Program(t2, glprogram, code, 1, H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), t3);
    t1.identifiers_0 = null;
    t1.identifiers_0 = ["viewMatrix", "modelViewMatrix", "projectionMatrix", "normalMatrix", "modelMatrix", "cameraPosition", "morphTargetInfluences"];
    t2 = t1.identifiers_0;
    if (useVertexTexture)
      t2.push("boneTexture");
    else
      t2.push("boneGlobalMatrices");
    uniforms.forEach$1(uniforms, new S.WebGLRenderer_buildProgram_closure0(t1));
    this.cacheUniformLocations$2(program, t1.identifiers_0);
    t1.identifiers_0 = ["position", "normal", "uv", "uv2", "tangent", "color", "skinIndex", "skinWeight", "lineDistance"];
    for (i = 0; i < maxMorphTargets; ++i)
      t1.identifiers_0.push("morphTarget" + i);
    for (i = 0; i < maxMorphNormals; ++i)
      t1.identifiers_0.push("morphNormal" + i);
    if (attributes != null)
      attributes.forEach$1(attributes, new S.WebGLRenderer_buildProgram_closure1(t1));
    this.cacheAttributeLocations$2(program, t1.identifiers_0);
    this._programs.push(program);
    this.info.memory.programs = this._programs.length;
    return program;
  },
  cacheUniformLocations$2: function(program, identifiers) {
    var l, t1, i, id, t2;
    l = identifiers.length;
    for (t1 = program.glProgram, i = 0; i < l; ++i) {
      if (i >= identifiers.length)
        throw H.ioore(identifiers, i);
      id = identifiers[i];
      t2 = program.uniforms;
      t2.$indexSet(t2, id, J.getUniformLocation$2$x(this._gl, t1, id));
    }
  },
  cacheAttributeLocations$2: function(program, identifiers) {
    var l, t1, t2, i, id;
    l = identifiers.length;
    for (t1 = program.attributes, t2 = program.glProgram, i = 0; i < l; ++i) {
      if (i >= identifiers.length)
        throw H.ioore(identifiers, i);
      id = identifiers[i];
      t1.$indexSet(t1, id, J.getAttribLocation$2$x(this._gl, t2, id));
    }
  },
  addLineNumbers$1: function(string) {
    var chunks, il, i, i0, t1;
    chunks = string.split("\n");
    il = chunks.length;
    for (i = 0; i < il; i = i0) {
      i0 = i + 1;
      t1 = "" + i0 + ":";
      if (i >= chunks.length)
        throw H.ioore(chunks, i);
      t1 += H.S(chunks[i]);
      if (i >= chunks.length)
        throw H.ioore(chunks, i);
      chunks[i] = t1;
    }
    return C.JSArray_methods.join$1(chunks, "\n");
  },
  getShader$2: function(type, string) {
    var shader;
    if (type === "fragment")
      shader = J.createShader$1$x(this._gl, 35632);
    else
      shader = type === "vertex" ? J.createShader$1$x(this._gl, 35633) : null;
    J.shaderSource$2$x(this._gl, shader, string);
    J.compileShader$1$x(this._gl, shader);
    if (J.getShaderParameter$2$x(this._gl, shader, 35713) !== true) {
      P.print(J.getShaderInfoLog$1$x(this._gl, shader));
      P.print(this.addLineNumbers$1(string));
      return;
    }
    return shader;
  },
  setTextureParameters$3: function(textureType, texture, isImagePowerOfTwo) {
    var t1, t2, t3;
    t1 = this._gl;
    t2 = texture.magFilter;
    t3 = texture.minFilter;
    if (isImagePowerOfTwo) {
      J.texParameteri$3$x(t1, textureType, 10242, this.paramThreeToGL$1(texture.wrapS));
      J.texParameteri$3$x(this._gl, textureType, 10243, this.paramThreeToGL$1(texture.wrapT));
      J.texParameteri$3$x(this._gl, textureType, 10240, this.paramThreeToGL$1(t2));
      J.texParameteri$3$x(this._gl, textureType, 10241, this.paramThreeToGL$1(t3));
    } else {
      J.texParameteri$3$x(t1, textureType, 10242, 33071);
      J.texParameteri$3$x(this._gl, textureType, 10243, 33071);
      J.texParameteri$3$x(this._gl, textureType, 10240, this.filterFallback$1(t2));
      J.texParameteri$3$x(this._gl, textureType, 10241, this.filterFallback$1(t3));
    }
    if (this._glExtensionTextureFilterAnisotropic != null && texture.type !== 15) {
      t1 = texture.anisotropy;
      if (t1 <= 1) {
        t2 = texture.get$_data();
        t2 = t2.$index(t2, "__oldAnisotropy") != null;
      } else
        t2 = true;
      if (t2) {
        J.texParameterf$3$x(this._gl, textureType, 34046, P.min(t1, this.maxAnisotropy));
        t2 = texture.get$_data();
        t2.$indexSet(t2, "__oldAnisotropy", t1);
      }
    }
  },
  setTexture$2: function(texture, slot) {
    var t1, image, t2, isImagePowerOfTwo, glFormat, glType, mipmaps, i, mipmap;
    if (texture.get$needsUpdate()) {
      if (texture.$index(texture, "__webglInit") == null) {
        texture.$indexSet(texture, "__webglInit", true);
        texture.$indexSet(texture, "__webglTexture", J.createTexture$0$x(this._gl));
        t1 = this.info.memory;
        t1.textures = t1.textures + 1;
      }
      t1 = this._gl;
      if (typeof 33984 !== "number")
        throw 33984 .$add();
      J.activeTexture$1$x(t1, 33984 + slot);
      J.bindTexture$2$x(this._gl, 3553, texture.$index(texture, "__webglTexture"));
      t1 = this._gl;
      J.pixelStorei$2$x(t1, 37440, texture.get$flipY(texture) ? 1 : 0);
      t1 = this._gl;
      J.pixelStorei$2$x(t1, 37441, texture.premultiplyAlpha ? 1 : 0);
      J.pixelStorei$2$x(this._gl, 3317, texture.unpackAlignment);
      image = texture.image;
      t1 = J.getInterceptor$x(image);
      t2 = t1.get$width(image);
      if (typeof t2 !== "number")
        throw t2.$sub();
      if ((t2 & t2 - 1) >>> 0 === 0) {
        t1 = t1.get$height(image);
        if (typeof t1 !== "number")
          throw t1.$sub();
        isImagePowerOfTwo = (t1 & t1 - 1) >>> 0 === 0;
      } else
        isImagePowerOfTwo = false;
      glFormat = this.paramThreeToGL$1(texture.format);
      glType = this.paramThreeToGL$1(texture.type);
      this.setTextureParameters$3(3553, texture, isImagePowerOfTwo);
      mipmaps = texture.mipmaps;
      t1 = mipmaps.length;
      if (t1 > 0 && isImagePowerOfTwo) {
        for (i = 0; i < t1; ++i) {
          if (i >= mipmaps.length)
            throw H.ioore(mipmaps, i);
          mipmap = mipmaps[i];
          J.texImage2D$6$x(this._gl, 3553, i, glFormat, glFormat, glType, mipmap);
        }
        texture.set$generateMipmaps(false);
      } else {
        t1 = texture.image;
        t2 = J.getInterceptor(t1);
        if (typeof t1 === "object" && t1 !== null && !!t2.$isImageElement)
          J.texImage2DImage$6$x(this._gl, 3553, 0, glFormat, glFormat, glType, t1);
        else if (typeof t1 === "object" && t1 !== null && !!t2.$isCanvasElement)
          J.texImage2DCanvas$6$x(this._gl, 3553, 0, glFormat, glFormat, glType, t1);
        else if (typeof t1 === "object" && t1 !== null && !!t2.$isVideoElement)
          J.texImage2DVideo$6$x(this._gl, 3553, 0, glFormat, glFormat, glType, t1);
      }
      if (texture.get$generateMipmaps() && isImagePowerOfTwo)
        J.generateMipmap$1$x(this._gl, 3553);
      texture.needsUpdate = false;
    } else {
      t1 = this._gl;
      if (typeof 33984 !== "number")
        throw 33984 .$add();
      J.activeTexture$1$x(t1, 33984 + slot);
      J.bindTexture$2$x(this._gl, 3553, texture.$index(texture, "__webglTexture"));
    }
  },
  setupFrameBuffer$3: function(framebuffer, renderTarget, textureTarget) {
    var t1, t2;
    J.bindFramebuffer$2$x(this._gl, 36160, framebuffer);
    t1 = this._gl;
    if (renderTarget.__data == null)
      renderTarget.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    t2 = renderTarget.__data;
    J.framebufferTexture2D$5$x(t1, 36160, 36064, textureTarget, t2.$index(t2, "__webglTexture"), 0);
  },
  setupRenderBuffer$2: function(renderbuffer, renderTarget) {
    var t1, t2, t3, t4;
    J.bindRenderbuffer$2$x(this._gl, 36161, renderbuffer);
    t1 = renderTarget.depthBuffer;
    if (t1 && !renderTarget.stencilBuffer) {
      J.renderbufferStorage$4$x(this._gl, 36161, 33189, renderTarget.width, renderTarget.height);
      J.framebufferRenderbuffer$4$x(this._gl, 36160, 36096, 36161, renderbuffer);
    } else {
      t1 = t1 && renderTarget.stencilBuffer;
      t2 = renderTarget.width;
      t3 = this._gl;
      t4 = renderTarget.height;
      if (t1) {
        J.renderbufferStorage$4$x(t3, 36161, 34041, t2, t4);
        J.framebufferRenderbuffer$4$x(this._gl, 36160, 33306, 36161, renderbuffer);
      } else
        J.renderbufferStorage$4$x(t3, 36161, 32854, t2, t4);
    }
  },
  setRenderTarget$1: function(renderTarget) {
    var t1, t2, t3, isTargetPowerOfTwo, glFormat, glType, framebuffer, width, height, vx, vy;
    t1 = renderTarget != null;
    if (t1 && renderTarget.__webglFramebuffer == null) {
      renderTarget.depthBuffer;
      renderTarget.stencilBuffer;
      t2 = J.createTexture$0$x(this._gl);
      t3 = renderTarget.get$_data();
      t3.$indexSet(t3, "__webglTexture", t2);
      t2 = this.info.memory;
      t2.textures = t2.textures + 1;
      t2 = renderTarget.width;
      if ((t2 & t2 - 1) >>> 0 === 0) {
        t2 = renderTarget.height;
        isTargetPowerOfTwo = (t2 & t2 - 1) >>> 0 === 0;
      } else
        isTargetPowerOfTwo = false;
      glFormat = this.paramThreeToGL$1(renderTarget.format);
      glType = this.paramThreeToGL$1(renderTarget.type);
      renderTarget.__webglFramebuffer = J.createFramebuffer$0$x(this._gl);
      renderTarget.__webglRenderbuffer = J.createRenderbuffer$0$x(this._gl);
      t2 = this._gl;
      t3 = renderTarget.get$_data();
      J.bindTexture$2$x(t2, 3553, t3.$index(t3, "__webglTexture"));
      this.setTextureParameters$3(3553, renderTarget, isTargetPowerOfTwo);
      J.texImage2DTyped$9$x(this._gl, 3553, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);
      this.setupFrameBuffer$3(renderTarget.__webglFramebuffer, renderTarget, 3553);
      this.setupRenderBuffer$2(renderTarget.__webglRenderbuffer, renderTarget);
      if (isTargetPowerOfTwo)
        J.generateMipmap$1$x(this._gl, 3553);
      J.bindTexture$2$x(this._gl, 3553, null);
      J.bindRenderbuffer$2$x(this._gl, 36161, null);
      J.bindFramebuffer$2$x(this._gl, 36160, null);
    }
    if (t1) {
      framebuffer = renderTarget.__webglFramebuffer;
      width = renderTarget.width;
      height = renderTarget.height;
      vx = 0;
      vy = 0;
    } else {
      width = this._viewportWidth;
      height = this._viewportHeight;
      vx = this._viewportX;
      vy = this._viewportY;
      framebuffer = null;
    }
    t1 = this._currentFramebuffer;
    if (framebuffer == null ? t1 != null : framebuffer !== t1) {
      J.bindFramebuffer$2$x(this._gl, 36160, framebuffer);
      J.viewport$4$x(this._gl, vx, vy, width, height);
      this._currentFramebuffer = framebuffer;
    }
    this._currentWidth = width;
    this._currentHeight = height;
  },
  filterFallback$1: function(f) {
    if (f === 3 || f === 4 || f === 5)
      return 9728;
    return 9729;
  },
  paramThreeToGL$1: function(p) {
    if (p == null ? 0 == null : p === 0)
      return 10497;
    if (p == null ? 1 == null : p === 1)
      return 33071;
    if (p === 2)
      return 33648;
    if (p === 3)
      return 9728;
    if (p === 4)
      return 9984;
    if (p === 5)
      return 9986;
    if (p === 6)
      return 9729;
    if (p === 7)
      return 9985;
    if (p === 8)
      return 9987;
    if (p === 10)
      return 5121;
    if (p === 1016)
      return 32819;
    if (p === 1017)
      return 32820;
    if (p === 1018)
      return 33635;
    if (p === 9)
      return 5120;
    if (p === 11)
      return 5122;
    if (p === 12)
      return 5123;
    if (p === 13)
      return 5124;
    if (p === 14)
      return 5125;
    if (p === 15)
      return 5126;
    if (p === 16)
      return 6406;
    if (p === 17)
      return 6407;
    if (p === 18)
      return 6408;
    if (p === 19)
      return 6409;
    if (p === 20)
      return 6410;
    if (p === 100)
      return 32774;
    if (p === 101)
      return 32778;
    if (p === 102)
      return 32779;
    if (p === 200)
      return 0;
    if (p === 201)
      return 1;
    if (p === 202)
      return 768;
    if (p === 203)
      return 769;
    if (p === 204)
      return 770;
    if (p === 205)
      return 771;
    if (p === 206)
      return 772;
    if (p === 207)
      return 773;
    if (p === 208)
      return 774;
    if (p === 209)
      return 775;
    if (p === 210)
      return 776;
    if (this._glExtensionCompressedTextureS3TC != null) {
      if (p === 2001)
        return 33776;
      if (p === 2002)
        return 33777;
      if (p === 2003)
        return 33778;
      if (p === 2004)
        return 33779;
    }
    return 0;
  },
  allocateBones$1: function(object) {
    var t1, nVertexUniforms, nVertexMatrices;
    if (this.supportsBoneTextures === true)
      t1 = false;
    else
      t1 = false;
    if (t1)
      return 1024;
    else {
      nVertexUniforms = J.getParameter$1$x(this._gl, 36347);
      if (typeof nVertexUniforms !== "number")
        throw nVertexUniforms.$sub();
      nVertexMatrices = C.JSInt_methods.toInt$0(C.JSNumber_methods.toInt$0(Math.floor((nVertexUniforms - 20) / 4)));
      return nVertexMatrices;
    }
  },
  allocateLights$1: function(lights) {
    var ll, t1, l, dirLights, pointLights, spotLights, hemiLights, light, t2;
    ll = J.get$length$asx(lights);
    for (t1 = lights.length, l = 0, dirLights = 0, pointLights = 0, spotLights = 0, hemiLights = 0; l < ll; ++l) {
      if (l >= t1)
        throw H.ioore(lights, l);
      light = lights[l];
      t2 = J.getInterceptor(light);
      t2 = typeof light === "object" && light !== null && !!t2.$isDirectionalLight;
      if ((t2 || false) && light.get$onlyShadow())
        continue;
      if (t2)
        ++dirLights;
    }
    return H.fillLiteralMap(["directional", dirLights, "point", pointLights, "spot", spotLights, "hemi", hemiLights], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  },
  allocateShadows$1: function(lights) {
    var ll, t1, l, maxShadows, light;
    ll = J.get$length$asx(lights);
    for (t1 = lights.length, l = 0, maxShadows = 0; l < ll; ++l) {
      if (l >= t1)
        throw H.ioore(lights, l);
      light = lights[l];
      if (!light.get$castShadow())
        continue;
      if (typeof light === "object" && light !== null && !!light.$isDirectionalLight && !light.shadowCascade)
        ++maxShadows;
    }
    return maxShadows;
  },
  initGL$0: function() {
    var error, exception, t1;
    try {
      this._gl = J.getContext3d$5$alpha$antialias$premultipliedAlpha$preserveDrawingBuffer$stencil$x(this.canvas, this.alpha, this.antialias, this.premultipliedAlpha, this.preserveDrawingBuffer, this.stencil);
      if (this._gl == null)
        throw H.wrapException("Error creating WebGL context.");
    } catch (exception) {
      t1 = H.unwrapException(exception);
      error = t1;
      P.print(error);
    }

    this._glExtensionTextureFloat = J.getExtension$1$x(this._gl, "OES_texture_float");
    this._glExtensionStandardDerivatives = J.getExtension$1$x(this._gl, "OES_standard_derivatives");
    this._glExtensionTextureFilterAnisotropic = J.getExtension$1$x(this._gl, "EXT_texture_filter_anisotropic");
    if (this._glExtensionTextureFilterAnisotropic == null)
      this._glExtensionTextureFilterAnisotropic = J.getExtension$1$x(this._gl, "MOZ_EXT_texture_filter_anisotropic");
    if (this._glExtensionTextureFilterAnisotropic == null)
      this._glExtensionTextureFilterAnisotropic = J.getExtension$1$x(this._gl, "WEBKIT_EXT_texture_filter_anisotropic");
    if (this._glExtensionCompressedTextureS3TC == null)
      this._glExtensionCompressedTextureS3TC = J.getExtension$1$x(this._gl, "WEBGL_compressed_texture_s3tc");
    if (this._glExtensionCompressedTextureS3TC == null)
      this._glExtensionCompressedTextureS3TC = J.getExtension$1$x(this._gl, "MOZ_WEBGL_compressed_texture_s3tc");
    if (this._glExtensionCompressedTextureS3TC == null)
      this._glExtensionCompressedTextureS3TC = J.getExtension$1$x(this._gl, "WEBKIT_WEBGL_compressed_texture_s3tc");
    if (this._glExtensionTextureFloat == null)
      P.print("THREE.WebGLRenderer: Float textures not supported.");
    if (this._glExtensionStandardDerivatives == null)
      P.print("THREE.WebGLRenderer: Standard derivatives not supported.");
    if (this._glExtensionTextureFilterAnisotropic == null)
      P.print("THREE.WebGLRenderer: Anisotropic texture filtering not supported.");
    if (this._glExtensionCompressedTextureS3TC == null)
      P.print("THREE.WebGLRenderer: S3TC compressed textures not supported.");
  },
  setDefaultGLState$0: function() {
    J.clearColor$4$x(this._gl, 0, 0, 0, 1);
    J.clearDepth$1$x(this._gl, 1);
    J.clearStencil$1$x(this._gl, 0);
    J.enable$1$x(this._gl, 2929);
    J.depthFunc$1$x(this._gl, 515);
    J.frontFace$1$x(this._gl, 2305);
    J.cullFace$1$x(this._gl, 1029);
    J.enable$1$x(this._gl, 2884);
    J.enable$1$x(this._gl, 3042);
    J.blendEquation$1$x(this._gl, 32774);
    J.blendFunc$2$x(this._gl, 770, 771);
    var t1 = this._clearColor;
    J.clearColor$4$x(this._gl, t1._r, t1._g, t1._b, this._clearAlpha);
  },
  WebGLRenderer$10$alpha$antialias$canvas$clearAlpha$clearColorHex$devicePixelRatio$precision$premultipliedAlpha$preserveDrawingBuffer$stencil: function(alpha, antialias, canvas, clearAlpha, clearColorHex, devicePixelRatio, precision, premultipliedAlpha, preserveDrawingBuffer, stencil) {
    var t1, _vertexShaderPrecisionHighpFloat, _vertexShaderPrecisionMediumpFloat, _fragmentShaderPrecisionHighpFloat, _fragmentShaderPrecisionMediumpFloat, highpAvailable, mediumpAvailable;
    t1 = window.devicePixelRatio != null ? window.devicePixelRatio : 1;
    this.devicePixelRatio = t1;
    this._lights = H.fillLiteralMap(["ambient", [0, 0, 0], "directional", H.fillLiteralMap(["length", 0, "colors", [], "positions", []], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), "point", H.fillLiteralMap(["length", 0, "colors", [], "positions", [], "distances", []], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), "spot", H.fillLiteralMap(["length", 0, "colors", [], "positions", [], "distances", [], "directions", [], "anglesCos", [], "exponents", []], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)), "hemi", H.fillLiteralMap(["length", 0, "skyColors", [], "groundColors", [], "positions", []], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    if (this.canvas == null)
      this.canvas = W.CanvasElement_CanvasElement(null, null);
    this.initGL$0();
    this.setDefaultGLState$0();
    this.maxTextures = J.getParameter$1$x(this._gl, 34930);
    this.maxVertexTextures = J.getParameter$1$x(this._gl, 35660);
    this.maxTextureSize = J.getParameter$1$x(this._gl, 3379);
    this.maxCubemapSize = J.getParameter$1$x(this._gl, 34076);
    this.maxAnisotropy = this._glExtensionTextureFilterAnisotropic != null ? J.getParameter$1$x(this._gl, 34047) : 0;
    t1 = this.maxVertexTextures;
    if (typeof t1 !== "number")
      throw t1.$gt();
    this.supportsVertexTextures = t1 > 0;
    this.supportsBoneTextures = this.supportsVertexTextures === true && this._glExtensionTextureFloat != null;
    if (this._glExtensionCompressedTextureS3TC != null)
      J.getParameter$1$x(this._gl, 34467);
    _vertexShaderPrecisionHighpFloat = J.getShaderPrecisionFormat$2$x(this._gl, 35633, 36338);
    _vertexShaderPrecisionMediumpFloat = J.getShaderPrecisionFormat$2$x(this._gl, 35633, 36337);
    J.getShaderPrecisionFormat$2$x(this._gl, 35633, 36336);
    _fragmentShaderPrecisionHighpFloat = J.getShaderPrecisionFormat$2$x(this._gl, 35632, 36338);
    _fragmentShaderPrecisionMediumpFloat = J.getShaderPrecisionFormat$2$x(this._gl, 35632, 36337);
    J.getShaderPrecisionFormat$2$x(this._gl, 35632, 36336);
    J.getShaderPrecisionFormat$2$x(this._gl, 35633, 36341);
    J.getShaderPrecisionFormat$2$x(this._gl, 35633, 36340);
    J.getShaderPrecisionFormat$2$x(this._gl, 35633, 36339);
    J.getShaderPrecisionFormat$2$x(this._gl, 35632, 36341);
    J.getShaderPrecisionFormat$2$x(this._gl, 35632, 36340);
    J.getShaderPrecisionFormat$2$x(this._gl, 35632, 36339);
    t1 = _vertexShaderPrecisionHighpFloat.precision;
    if (typeof t1 !== "number")
      throw t1.$gt();
    if (t1 > 0) {
      t1 = _fragmentShaderPrecisionHighpFloat.precision;
      if (typeof t1 !== "number")
        throw t1.$gt();
      highpAvailable = t1 > 0;
    } else
      highpAvailable = false;
    t1 = _vertexShaderPrecisionMediumpFloat.precision;
    if (typeof t1 !== "number")
      throw t1.$gt();
    if (t1 > 0) {
      t1 = _fragmentShaderPrecisionMediumpFloat.precision;
      if (typeof t1 !== "number")
        throw t1.$gt();
      mediumpAvailable = t1 > 0;
    } else
      mediumpAvailable = false;
    if (this.precision === "highp" && !highpAvailable)
      if (mediumpAvailable) {
        this.precision = "mediump";
        P.print("WebGLRenderer: highp not supported, using mediump");
      } else {
        this.precision = "lowp";
        P.print("WebGLRenderer: highp and mediump not supported, using lowp");
      }
    if (this.precision === "mediump" && !mediumpAvailable) {
      this.precision = "lowp";
      P.print("WebGLRenderer: mediump not supported, using lowp");
    }
    this.shadowMapPlugin = S.ShadowMapPlugin$();
    t1 = this.shadowMapPlugin;
    t1.init$1(this);
    this.renderPluginsPre.push(t1);
  },
  static: {
"": "WebGLRenderer_PRECISION_HIGH",
WebGLRenderer$: function(alpha, antialias, canvas, clearAlpha, clearColorHex, devicePixelRatio, precision, premultipliedAlpha, preserveDrawingBuffer, stencil) {
  var t1, t2, t3, t4, t5, t6, t7, t8;
  H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  t1 = S.Color$(clearColorHex);
  t2 = S.WebGLRendererInfo$();
  t3 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  t4 = S.Frustum$();
  t5 = new Float32Array(16);
  t5.$dartCachedLength = t5.length;
  t5 = new T.Matrix4(t5);
  t5.setIdentity$0();
  t6 = new Float32Array(16);
  t6.$dartCachedLength = t6.length;
  t6 = new T.Matrix4(t6);
  t6.setIdentity$0();
  t7 = new Float32Array(3);
  t7.$dartCachedLength = t7.length;
  t8 = new Float32Array(3);
  t8.$dartCachedLength = t8.length;
  t8 = new S.WebGLRenderer(canvas, null, precision, t1, clearAlpha, null, alpha, premultipliedAlpha, antialias, stencil, preserveDrawingBuffer, true, true, true, true, true, true, true, false, false, false, false, true, false, false, 1, 2, 8, 4, true, [], [], t2, [], 0, null, null, -1, null, null, 0, 0, t3, -1, -1, -1, -1, -1, -1, -1, -1, null, null, null, null, 0, 0, 0, 0, 0, 0, t4, t5, t6, new T.Vector3(t7), new T.Vector3(t8), null, true, null, null, null, null, null, null, null, null, null, null, null, null);
  t8.WebGLRenderer$10$alpha$antialias$canvas$clearAlpha$clearColorHex$devicePixelRatio$precision$premultipliedAlpha$preserveDrawingBuffer$stencil(alpha, antialias, canvas, clearAlpha, clearColorHex, devicePixelRatio, precision, premultipliedAlpha, preserveDrawingBuffer, stencil);
  return t8;
}}

},

WebGLRenderer_initCustomAttributes_closure: {"": "Closure;this_0,geometry_1,nvertices_2",
  call$2: function(key, attribute) {
    var t1;
    if (!attribute.get$__webglInitialized() || attribute.createUniqueBuffers) {
      attribute.__webglInitialized = true;
      t1 = new Float32Array(this.nvertices_2 * attribute.size);
      t1.$dartCachedLength = t1.length;
      attribute.array = t1;
      t1 = new S.Buffer(this.this_0._gl, null, null);
      t1._glbuffer = J.createBuffer$0$x(t1.context);
      attribute.buffer = t1;
      attribute.buffer.belongsToAttribute = key;
      attribute.needsUpdate = true;
    }
    this.geometry_1.__webglCustomAttributesList.push(attribute);
  },
  $is_args2: true
},

WebGLRenderer_initMeshBuffers_closure: {"": "Closure;this_0,geometryGroup_1,nvertices_2",
  call$2: function(key, attribute) {
    var t1, buffer, a;
    if (!attribute.get$__webglInitialized() || attribute.createUniqueBuffers) {
      attribute.__webglInitialized = true;
      t1 = new Float32Array(this.nvertices_2 * attribute.size);
      t1.$dartCachedLength = t1.length;
      attribute.array = t1;
      buffer = new S.Buffer(this.this_0._gl, null, null);
      buffer._glbuffer = J.createBuffer$0$x(buffer.context);
      buffer.belongsToAttribute = key;
      attribute.buffer = buffer;
      a = S.Attribute$(attribute.type, attribute.value);
      a.needsUpdate = true;
      attribute.__original = a;
    }
    this.geometryGroup_1.__webglCustomAttributesList.push(attribute);
  },
  $is_args2: true
},

WebGLRenderer_disableAttributes_closure: {"": "Closure;this_0",
  call$2: function(attribute, enabled) {
    var t1;
    if (enabled === true) {
      t1 = this.this_0;
      J.disableVertexAttribArray$1$x(t1._gl, H.Primitives_parseInt(attribute, null, null));
      t1 = t1._enabledAttributes;
      t1.$indexSet(t1, attribute, false);
    }
  },
  $is_args2: true
},

WebGLRenderer_renderPlugins_closure: {"": "Closure;this_0,scene_1,camera_2",
  call$1: function(plugin) {
    var t1 = this.this_0;
    t1._currentProgram = null;
    t1._currentCamera = null;
    t1._oldBlending = -1;
    t1._oldDepthTest = -1;
    t1._oldDepthWrite = -1;
    t1._oldDoubleSided = -1;
    t1._oldFlipSided = -1;
    t1._currentGeometryGroupHash = -1;
    t1._currentMaterialId = -1;
    t1._lightsNeedUpdate = true;
    plugin.render$4(this.scene_1, this.camera_2.get$_camera(), t1._currentWidth, t1._currentHeight);
    t1._currentProgram = null;
    t1._currentCamera = null;
    t1._oldBlending = -1;
    t1._oldDepthTest = -1;
    t1._oldDepthWrite = -1;
    t1._oldDoubleSided = -1;
    t1._oldFlipSided = -1;
    t1._currentGeometryGroupHash = -1;
    t1._currentMaterialId = -1;
    t1._lightsNeedUpdate = true;
  },
  $is_args1: true
},

WebGLRenderer_renderImmediateObject_closure: {"": "Closure;this_0,material_1,program_2",
  call$1: function(object) {
    this.this_0.renderBufferImmediate$3(object, this.program_2, this.material_1);
  },
  $is_args1: true
},

WebGLRenderer_addObject_closure: {"": "Closure;this_0,webglobject_1,geometry_2",
  call$2: function(k, geometryGroup) {
    var t1, t2;
    if (geometryGroup.get$__webglVertexBuffer() == null) {
      t1 = this.this_0;
      t1.createMeshBuffers$1(geometryGroup);
      t1.initMeshBuffers$2(geometryGroup, this.webglobject_1);
      t1 = this.geometry_2._geometry;
      t2 = t1.get$_data();
      t2.$indexSet(t2, "verticesNeedUpdate", true);
      t2 = t1.get$_data();
      t2.$indexSet(t2, "morphTargetsNeedUpdate", true);
      t2 = t1.get$_data();
      t2.$indexSet(t2, "elementsNeedUpdate", true);
      t2 = t1.get$_data();
      t2.$indexSet(t2, "uvsNeedUpdate", true);
      t2 = t1.get$_data();
      t2.$indexSet(t2, "normalsNeedUpdate", true);
      t2 = t1.get$_data();
      t2.$indexSet(t2, "tangentsNeedUpdate", true);
      t1 = t1.get$_data();
      t1.$indexSet(t1, "colorsNeedUpdate", true);
    }
  },
  $is_args2: true
},

WebGLRenderer_addObject_closure0: {"": "Closure;this_3,scene_4,webglobject_5",
  call$2: function(k, geometryGroup) {
    var t1 = this.scene_4.get$_data();
    this.this_3.addBuffer$3(t1.$index(t1, "__webglObjects"), geometryGroup, this.webglobject_5);
  },
  $is_args2: true
},

WebGLRenderer_areCustomAttributesDirty_closure: {"": "Closure;",
  call$1: function(a) {
    return a.get$needsUpdate();
  },
  $is_args1: true
},

WebGLRenderer_clearCustomAttributes_closure: {"": "Closure;",
  call$2: function(_, a) {
    a.set$needsUpdate(false);
  },
  $is_args2: true
},

WebGLRenderer_initMaterial_closure: {"": "Closure;material_0",
  call$2: function(k, u) {
    return this.material_0.uniformsList.push([u, k]);
  },
  $is_args2: true
},

WebGLRenderer_loadUniformsGeneric_closure: {"": "Closure;this_0",
  call$1: function(_) {
    return this.this_0.getTextureUnit$0();
  },
  $is_args1: true
},

WebGLRenderer_generateDefines_closure: {"": "Closure;box_0,chunks_1",
  call$2: function(d, value) {
    var t1;
    if (!J.$eq(value, false)) {
      t1 = this.box_0;
      t1.chunk_0 = "#define " + H.S(d) + " " + H.S(value);
      this.chunks_1.push(t1.chunk_0);
    }
  },
  $is_args2: true
},

WebGLRenderer_buildProgram_closure: {"": "Closure;chunks_1",
  call$2: function(d, define) {
    var t1 = this.chunks_1;
    t1.push(d);
    t1.push(define);
  },
  $is_args2: true
},

WebGLRenderer_buildProgram_closure0: {"": "Closure;box_0",
  call$2: function(u, _) {
    return this.box_0.identifiers_0.push(u);
  },
  $is_args2: true
},

WebGLRenderer_buildProgram_closure1: {"": "Closure;box_0",
  call$2: function(a, _) {
    return this.box_0.identifiers_0.push(a);
  },
  $is_args2: true
},

WebGLRendererInfo: {"": "Object;memory,render<",
  render$4: function(arg0, arg1, arg2, arg3) {
    return this.render.call$4(arg0, arg1, arg2, arg3);
  },
  WebGLRendererInfo$0: function() {
    this.memory = new S.WebGLRendererMemoryInfo(0, 0, 0);
    this.render = new S.WebGLRendererRenderInfo(0, 0, 0, 0);
  },
  static: {
WebGLRendererInfo$: function() {
  var t1 = new S.WebGLRendererInfo(null, null);
  t1.WebGLRendererInfo$0();
  return t1;
}}

},

WebGLRendererMemoryInfo: {"": "Object;programs,geometries,textures"},

WebGLRendererRenderInfo: {"": "Object;calls,vertices<,faces,points"},

Program: {"": "Object;id>,glProgram,code,usedTimes,attributes>,uniforms"},

Buffer: {"": "Object;context,_glbuffer,belongsToAttribute"},

WebGLObject: {"": "Object;__webglInit@,__webglActive?,_modelViewMatrix<,_normalMatrix,_normalMatrixArray,_modelViewMatrixArray,modelMatrixArray,buffer,object<,opaque,transparent<,render<,z>,__webglMorphTargetInfluences<",
  render$4: function(arg0, arg1, arg2, arg3) {
    return this.render.call$4(arg0, arg1, arg2, arg3);
  },
  get$geometry: function() {
    return this.get$_hasGeometry() ? this.object.get$geometry() : null;
  },
  get$webglgeometry: function() {
    if ((this.get$_hasGeometry() ? this.object.get$geometry() : null) != null)
      var t1 = S.WebGLGeometry_WebGLGeometry$from(this.get$_hasGeometry() ? this.object.get$geometry() : null);
    else
      t1 = null;
    return t1;
  },
  get$material: function() {
    return this.object.get$material();
  },
  get$matrixWorld: function() {
    return this.object.get$matrixWorld();
  },
  get$_hasGeometry: function() {
    var t1 = this.object;
    t1 = !!t1.$isParticleSystem || !!t1.$isLine;
    return t1;
  },
  get$morphTargetBase: function() {
    return this.object.get$morphTargetBase();
  },
  get$receiveShadow: function() {
    return this.object.get$receiveShadow();
  },
  get$morphTargetForcedOrder: function() {
    return H.interceptedTypeCast(this.object, "$isMesh").get$morphTargetForcedOrder();
  },
  get$morphTargetInfluences: function() {
    return H.interceptedTypeCast(this.object, "$isMesh").get$morphTargetInfluences();
  },
  get$useVertexTexture: function() {
    return this.object.get$useVertexTexture();
  },
  get$boneMatrices: function() {
    return this.object.get$boneMatrices();
  },
  $isWebGLObject: true
},

WebGLGeometry: {"": "Object;id>,_vertices,faces3<,faces4,materialIndex,numMorphTargets,numMorphNormals,geometryGroups,geometryGroupsList,__webglInit@,__inittedArrays,__vertexArray?,__normalArray,__tangentArray,__colorArray,__lineDistanceArray,__uvArray,__uv2Array,__skinVertexAArray,__skinVertexBArray,__skinIndexArray,__skinWeightArray,__faceArray,__lineArray,__morphTargetsArrays,__morphNormalsArrays,__webglFaceCount,__webglLineCount<,__webglParticleCount<,__webglVertexCount,__sortArray,__webglCustomAttributesList<,__webglVertexBuffer<,__webglNormalBuffer,__webglTangentBuffer,__webglColorBuffer,__webglLineDistanceBuffer,__webglUVBuffer,__webglUV2Buffer,__webglSkinVertexABuffer,__webglSkinVertexBBuffer,__webglSkinIndicesBuffer,__webglSkinWeightsBuffer,__webglFaceBuffer,__webglLineBuffer,__webglMorphTargetsBuffers<,__webglMorphNormalsBuffers,_geometry",
  get$vertices: function() {
    var t1 = this._vertices;
    if (t1 == null && this._geometry != null)
      return this._geometry.vertices;
    return t1;
  },
  get$attributes: function(_) {
    return C.JSNull_methods.get$attributes(H.interceptedTypeCast(this._geometry, "$isBufferGeometry"));
  },
  get$verticesNeedUpdate: function() {
    var t1, t2;
    t1 = this._geometry;
    t2 = t1.__data;
    if (t2.containsKey$1(t2, "verticesNeedUpdate")) {
      t1 = t1.get$_data();
      t1 = t1.$index(t1, "verticesNeedUpdate");
    } else
      t1 = false;
    return t1;
  },
  set$verticesNeedUpdate: function(flag) {
    var t1 = this._geometry.get$_data();
    t1.$indexSet(t1, "verticesNeedUpdate", flag);
  },
  set$colorsNeedUpdate: function(flag) {
    var t1 = this._geometry.get$_data();
    t1.$indexSet(t1, "colorsNeedUpdate", flag);
  },
  set$lineDistancesNeedUpdate: function(flag) {
    var t1 = this._geometry.get$_data();
    t1.$indexSet(t1, "lineDistancesNeedUpdate", flag);
  },
  get$isBufferGeometry: function() {
    return false;
  },
  static: {
WebGLGeometry$_internal: function(geometry) {
  return new S.WebGLGeometry(geometry.id, null, null, null, 0, 0, 0, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, geometry);
},

WebGLGeometry_WebGLGeometry$from: function(geometry) {
  var t1, __webglBuffer;
  t1 = geometry.get$_data();
  if (t1.$index(t1, "__webglBuffer") == null) {
    __webglBuffer = S.WebGLGeometry$_internal(geometry);
    t1 = geometry.get$_data();
    t1.$indexSet(t1, "__webglBuffer", __webglBuffer);
  }
  t1 = geometry.get$_data();
  return t1.$index(t1, "__webglBuffer");
}}

},

WebGLMaterial: {"": "Object;_material,program<,_fragmentShader,_vertexShader,_uniforms,uniformsList,numSupportedMorphTargets,numSupportedMorphNormals,shadowPass?",
  get$attributes: function(_) {
    var t1 = this._material;
    return !!t1.$isShaderMaterial ? H.interceptedTypeCast(t1, "$isShaderMaterial").attributes : null;
  },
  set$fragmentShader: function(v) {
    var t1 = this._material;
    if (!!t1.$isShaderMaterial)
      H.interceptedTypeCast(t1, "$isShaderMaterial").fragmentShader = v;
    else
      this._fragmentShader = v;
    return v;
  },
  set$vertexShader: function(v) {
    var t1 = this._material;
    if (!!t1.$isShaderMaterial)
      H.interceptedTypeCast(t1, "$isShaderMaterial").vertexShader = v;
    else
      this._vertexShader = v;
    return v;
  },
  set$uniforms: function(v) {
    var t1 = this._material;
    if (!!t1.$isShaderMaterial)
      H.interceptedTypeCast(t1, "$isShaderMaterial").uniforms = v;
    else
      this._uniforms = v;
    return v;
  },
  get$needsSmoothNormals: function() {
    var t1 = this._material.get$shading();
    t1 = t1 === 2;
    return t1;
  },
  get$needsNormals: function() {
    return !false;
  },
  get$id: function(_) {
    return this._material.id;
  },
  get$side: function() {
    return this._material.side;
  },
  get$blending: function() {
    return this._material.blending;
  },
  get$blendSrc: function() {
    return this._material.blendSrc;
  },
  get$blendDst: function() {
    return this._material.blendDst;
  },
  get$blendEquation: function(_) {
    return this._material.blendEquation;
  },
  get$polygonOffsetFactor: function() {
    return this._material.polygonOffsetFactor;
  },
  get$polygonOffsetUnits: function() {
    return this._material.polygonOffsetUnits;
  },
  get$transparent: function() {
    return this._material.transparent;
  },
  get$depthTest: function() {
    return this._material.depthTest;
  },
  get$depthWrite: function() {
    return this._material.depthWrite;
  },
  get$polygonOffset: function(_) {
    return this._material.polygonOffset;
  },
  get$visible: function(_) {
    return this._material.visible;
  },
  get$needsUpdate: function() {
    return this._material.needsUpdate;
  },
  set$needsUpdate: function(flag) {
    this._material.needsUpdate = flag;
    return flag;
  },
  get$vertexColors: function() {
    return this.get$_hasVertexColors() ? this._material.get$vertexColors() : 0;
  },
  get$color: function(_) {
    var t1 = this._material;
    return t1.get$color(t1);
  },
  get$lights: function() {
    var t1 = this._material;
    return !!t1.$isShaderMaterial && H.interceptedTypeCast(t1, "$isShaderMaterial").lights;
  },
  get$morphTargets: function() {
    var t1 = this._material;
    t1 = !!t1.$isShaderMaterial;
    return t1 && this._material.get$morphTargets();
  },
  get$fog: function() {
    return this.get$_hasFog() && this._material.get$fog();
  },
  get$map: function(_) {
    var t1 = this._material;
    t1 = !!t1.$isParticleBasicMaterial;
    if (t1) {
      t1 = this._material;
      t1 = t1.get$map(t1);
    } else
      t1 = null;
    return t1;
  },
  map$1: function($receiver, arg0) {
    return this.get$map($receiver).call$1(arg0);
  },
  get$lightMap: function() {
    return;
  },
  get$bumpMap: function() {
    return;
  },
  get$normalMap: function() {
    return;
  },
  get$specularMap: function() {
    return;
  },
  get$wireframe: function() {
    var t1 = this._material;
    return !t1.$isLineBasicMaterial && !t1.$isParticleBasicMaterial && t1.get$wireframe();
  },
  get$linewidth: function() {
    var t1 = this._material;
    return !!t1.$isLineBasicMaterial ? t1.get$linewidth() : null;
  },
  get$skinning: function() {
    var t1 = this._material;
    t1 = !!t1.$isShaderMaterial;
    return t1 && this._material.get$skinning();
  },
  get$isShaderMaterial: function() {
    var t1 = this._material;
    return !!t1.$isShaderMaterial;
  },
  get$_hasVertexColors: function() {
    var t1 = this._material;
    return !!t1.$isLineBasicMaterial || !!t1.$isParticleBasicMaterial || !!t1.$isShaderMaterial;
  },
  get$_hasFog: function() {
    var t1 = this._material;
    return !!t1.$isLineBasicMaterial || !!t1.$isParticleBasicMaterial || !!t1.$isShaderMaterial;
  },
  static: {
WebGLMaterial_WebGLMaterial$from: function(material) {
  var t1 = material.get$_data();
  if (t1.$index(t1, "__webglMaterial") == null) {
    t1 = material.get$_data();
    t1.$indexSet(t1, "__webglMaterial", new S.WebGLMaterial(material, null, null, null, null, null, 0, 0, false));
  }
  t1 = material.get$_data();
  return t1.$index(t1, "__webglMaterial");
}}

},

WebGLCamera: {"": "Object;_camera<,_viewMatrixArray,_projectionMatrixArray",
  get$parent: function(_) {
    return J.get$parent$x(this._camera);
  },
  get$matrixWorld: function() {
    return this._camera.get$matrixWorld();
  },
  get$matrixWorldInverse: function() {
    return this._camera.get$matrixWorldInverse();
  },
  get$projectionMatrix: function() {
    return this._camera.get$projectionMatrix();
  },
  updateMatrixWorld$1$force: function(force) {
    return this._camera.updateMatrixWorld$0();
  },
  updateMatrixWorld$0: function() {
    return this.updateMatrixWorld$1$force(false);
  },
  $isWebGLCamera: true,
  static: {
WebGLCamera$_internal: function(camera) {
  var t1, t2;
  t1 = new Float32Array(16);
  t1.$dartCachedLength = t1.length;
  t2 = new Float32Array(16);
  t2.$dartCachedLength = t2.length;
  return new S.WebGLCamera(camera, t1, t2);
},

WebGLCamera_WebGLCamera: function(camera) {
  var t1 = J.getInterceptor$asx(camera);
  if (t1.$index(camera, "__webglCamera") == null)
    t1.$indexSet(camera, "__webglCamera", S.WebGLCamera$_internal(camera));
  return t1.$index(camera, "__webglCamera");
}}

},

UniformsUtils_merge_closure: {"": "Closure;merged_0",
  call$1: function(uniforms) {
    J.forEach$1$ax(uniforms, new S.UniformsUtils_merge__closure(this.merged_0));
  },
  $is_args1: true
},

UniformsUtils_merge__closure: {"": "Closure;merged_1",
  call$2: function(k, uniform) {
    var t1 = this.merged_1;
    t1.$indexSet(t1, k, J.clone$0$x(uniform));
  },
  $is_args2: true
},

UniformsUtils_clone_closure: {"": "Closure;result_0",
  call$2: function(k, uniform) {
    var t1 = this.result_0;
    t1.$indexSet(t1, k, J.clone$0$x(uniform));
  },
  $is_args2: true
},

Attribute: {"": "Object;type>,value*,array,buffer,size,boundTo,needsUpdate@,__webglInitialized<,createUniqueBuffers,__original",
  clone$0: function(_) {
    return S.Attribute$(this.type, this.value);
  },
  Attribute$2: function(type, value) {
    var t1;
    this.size = 1;
    t1 = this.type;
    if (t1 === "v2")
      this.size = 2;
    else if (t1 === "v3")
      this.size = 3;
    else if (t1 === "v4")
      this.size = 4;
    else if (t1 === "c")
      this.size = 3;
    if (this.value == null)
      this.value = [];
  },
  static: {
Attribute$: function(type, value) {
  var t1 = new S.Attribute(type, value, null, null, null, null, false, false, false, null);
  t1.Attribute$2(type, value);
  return t1;
},

Attribute_Attribute$color: function(hex) {
  return S.Attribute$("c", null);
}}

},

Attribute_Attribute$color_closure: {"": "Closure;",
  call$1: function(h) {
    return S.Color$(h);
  },
  $is_args1: true
},

Uniform: {"": "Object;type>,_three$_value,_dirty,_three$_array",
  get$value: function(_) {
    return this._three$_value;
  },
  set$value: function(_, v) {
    if (this.type === "f")
      v = J.toDouble$0$n(v);
    this._dirty = true;
    this._three$_value = v;
  },
  get$typedValue: function() {
    var t1, t2, t3, values, typedValues, i, offset, lst;
    if (!this._dirty && this._three$_array != null)
      return this._three$_array;
    t1 = this.type;
    if (t1 === "fv" || t1 === "fv1") {
      t2 = this._three$_value;
      t3 = J.getInterceptor(t2);
      t3 = typeof t2 !== "object" || t2 === null || !t3.$isFloat32List;
      t2 = t3;
    } else
      t2 = false;
    if (t2) {
      t1 = J.map$1$ax(H.listTypeCast(this._three$_value), new S.Uniform_typedValue_closure());
      t1 = new Float32Array(t1.toList$0(t1));
      t1.$dartCachedLength = t1.length;
      this._three$_array = t1;
    } else {
      if (t1 === "iv" || t1 === "iv1") {
        t2 = this._three$_value;
        t3 = J.getInterceptor(t2);
        t3 = typeof t2 !== "object" || t2 === null || !t3.$isInt32List;
        t2 = t3;
      } else
        t2 = false;
      if (t2) {
        t1 = J.map$1$ax(H.listTypeCast(this._three$_value), new S.Uniform_typedValue_closure0());
        t1 = new Int32Array(t1.toList$0(t1));
        t1.$dartCachedLength = t1.length;
        this._three$_array = t1;
      } else if (t1 === "v2v") {
        values = H.subtypeCast(this._three$_value, "$isList", [T.Vector2], "$asList");
        if (this._three$_array == null) {
          t1 = J.get$length$asx(values);
          if (typeof t1 !== "number")
            throw H.iae(t1);
          t1 = new Float32Array(2 * t1);
          t1.$dartCachedLength = t1.length;
          this._three$_array = t1;
        }
        typedValues = H.interceptedTypeCast(this._three$_array, "$isFloat32List");
        t1 = J.getInterceptor$asx(values);
        i = 0;
        while (true) {
          t2 = t1.get$length(values);
          if (typeof t2 !== "number")
            throw H.iae(t2);
          if (!(i < t2))
            break;
          offset = i * 2;
          t2 = J.get$x$x(t1.$index(values, i));
          if (offset < 0 || offset >= C.JS_CONST_ZYJ(typedValues))
            throw H.ioore(typedValues, offset);
          typedValues[offset] = t2;
          t2 = offset + 1;
          t3 = J.get$y$x(t1.$index(values, i));
          if (t2 >= C.JS_CONST_ZYJ(typedValues))
            throw H.ioore(typedValues, t2);
          typedValues[t2] = t3;
          ++i;
        }
      } else if (t1 === "v3v") {
        values = H.subtypeCast(this._three$_value, "$isList", [T.Vector3], "$asList");
        if (this._three$_array == null) {
          t1 = J.get$length$asx(values);
          if (typeof t1 !== "number")
            throw H.iae(t1);
          t1 = new Float32Array(3 * t1);
          t1.$dartCachedLength = t1.length;
          this._three$_array = t1;
        }
        typedValues = H.interceptedTypeCast(this._three$_array, "$isFloat32List");
        t1 = J.getInterceptor$asx(values);
        i = 0;
        while (true) {
          t2 = t1.get$length(values);
          if (typeof t2 !== "number")
            throw H.iae(t2);
          if (!(i < t2))
            break;
          offset = i * 3;
          t2 = J.get$x$x(t1.$index(values, i));
          if (offset < 0 || offset >= C.JS_CONST_ZYJ(typedValues))
            throw H.ioore(typedValues, offset);
          typedValues[offset] = t2;
          t2 = offset + 1;
          t3 = J.get$y$x(t1.$index(values, i));
          if (t2 >= C.JS_CONST_ZYJ(typedValues))
            throw H.ioore(typedValues, t2);
          typedValues[t2] = t3;
          t3 = offset + 2;
          t2 = J.get$z$x(t1.$index(values, i));
          if (t3 >= C.JS_CONST_ZYJ(typedValues))
            throw H.ioore(typedValues, t3);
          typedValues[t3] = t2;
          ++i;
        }
      } else if (t1 === "v4v") {
        values = H.subtypeCast(this._three$_value, "$isList", [T.Vector4], "$asList");
        if (this._three$_array == null) {
          t1 = J.get$length$asx(values);
          if (typeof t1 !== "number")
            throw H.iae(t1);
          t1 = new Float32Array(4 * t1);
          t1.$dartCachedLength = t1.length;
          this._three$_array = t1;
        }
        typedValues = H.interceptedTypeCast(this._three$_array, "$isFloat32List");
        t1 = J.getInterceptor$asx(values);
        i = 0;
        while (true) {
          t2 = t1.get$length(values);
          if (typeof t2 !== "number")
            throw H.iae(t2);
          if (!(i < t2))
            break;
          offset = i * 4;
          t2 = J.get$x$x(t1.$index(values, i));
          if (offset < 0 || offset >= C.JS_CONST_ZYJ(typedValues))
            throw H.ioore(typedValues, offset);
          typedValues[offset] = t2;
          t2 = offset + 1;
          t3 = J.get$y$x(t1.$index(values, i));
          if (t2 >= C.JS_CONST_ZYJ(typedValues))
            throw H.ioore(typedValues, t2);
          typedValues[t2] = t3;
          t3 = offset + 2;
          t2 = J.get$z$x(t1.$index(values, i));
          if (t3 >= C.JS_CONST_ZYJ(typedValues))
            throw H.ioore(typedValues, t3);
          typedValues[t3] = t2;
          t2 = offset + 3;
          t3 = t1.$index(values, i).get$w();
          if (t2 >= C.JS_CONST_ZYJ(typedValues))
            throw H.ioore(typedValues, t2);
          typedValues[t2] = t3;
          ++i;
        }
      } else if (t1 === "m2")
        this._three$_array = H.interceptedTypeCast(this._three$_value, "$isMatrix2").get$storage();
      else if (t1 === "m3")
        this._three$_array = H.interceptedTypeCast(this._three$_value, "$isMatrix3").storage;
      else if (t1 === "m4")
        this._three$_array = H.interceptedTypeCast(this._three$_value, "$isMatrix4").storage;
      else {
        t2 = this._three$_value;
        if (t1 === "m4v") {
          lst = [];
          J.forEach$1$ax(H.subtypeCast(t2, "$isList", [T.Matrix4], "$asList"), new S.Uniform_typedValue_closure1(lst));
          t1 = new Float32Array(lst);
          t1.$dartCachedLength = t1.length;
          this._three$_array = t1;
        } else
          return t2;
      }
    }
    return this._three$_array;
  },
  clone$0: function(_) {
    var dst, t1;
    dst = this._three$_value;
    t1 = J.getInterceptor$x(dst);
    if (typeof dst === "object" && dst !== null && !!t1.$isColor || typeof dst === "object" && dst !== null && !!t1.$isVector2 || typeof dst === "object" && dst !== null && !!t1.$isVector3 || typeof dst === "object" && dst !== null && !!t1.$isVector4 || typeof dst === "object" && dst !== null && !!t1.$isMatrix4 || typeof dst === "object" && dst !== null && !!t1.$isTexture)
      dst = t1.clone$0(dst);
    else if (typeof dst === "object" && dst !== null && (dst.constructor === Array || !!t1.$isList))
      dst = P.List_List$from(H.listTypeCast(dst), true, null);
    t1 = new S.Uniform(this.type, null, true, null);
    t1.set$value(t1, dst);
    return t1;
  }
},

Uniform_typedValue_closure: {"": "Closure;",
  call$1: function(_) {
    return J.toDouble$0$n(_);
  },
  $is_args1: true
},

Uniform_typedValue_closure0: {"": "Closure;",
  call$1: function(_) {
    return J.toInt$0$n(_);
  },
  $is_args1: true
},

Uniform_typedValue_closure1: {"": "Closure;lst_0",
  call$1: function(m) {
    C.JSArray_methods.addAll$1(this.lst_0, m.get$storage());
  },
  $is_args1: true
},

Scene: {"": "Object3D;fog<,overrideMaterial<,objects,lights<,__objectsAdded<,__objectsRemoved,id,name,properties,parent,children,up,position,rotation,scale,eulerOrder,_dynamic,doubleSided,flipSided,rotationAutoUpdate,renderDepth,matrix,matrixWorld,matrixRotationWorld,matrixAutoUpdate,matrixWorldNeedsUpdate,quaternion,useQuaternion,boundRadius,boundRadiusScale,visible,castShadow,receiveShadow,frustumCulled,_vector,customDepthMaterial,__data",
  addObject$1: function(object) {
    var t1, i, c;
    if (!!object.$isLight) {
      t1 = this.lights;
      if (H.Arrays_indexOf(t1, object, 0, t1.length) === -1)
        this.lights.push(object);
    } else if (!(!!object.$isCamera || false)) {
      t1 = this.objects;
      if (H.Arrays_indexOf(t1, object, 0, t1.length) === -1) {
        this.objects.push(object);
        this.__objectsAdded.push(object);
        t1 = this.__objectsRemoved;
        i = H.Arrays_indexOf(t1, object, 0, t1.length);
        if (i !== -1)
          C.JSArray_methods.removeAt$1(this.__objectsRemoved, i);
      }
    }
    for (t1 = object.children, c = 0; c < t1.length; ++c)
      this.addObject$1(t1[c]);
  },
  removeObject$1: function(object) {
    var t1, i, ai, c;
    if (!!object.$isLight) {
      t1 = this.lights;
      i = H.Arrays_indexOf(t1, object, 0, t1.length);
      if (i !== -1)
        C.JSArray_methods.removeAt$1(this.lights, i);
    } else if (!object.$isCamera) {
      t1 = this.objects;
      i = H.Arrays_indexOf(t1, object, 0, t1.length);
      if (i !== -1) {
        C.JSArray_methods.removeAt$1(this.objects, i);
        this.__objectsRemoved.push(object);
        t1 = this.__objectsAdded;
        ai = H.Arrays_indexOf(t1, object, 0, t1.length);
        if (ai !== -1)
          C.JSArray_methods.removeAt$1(this.__objectsAdded, ai);
      }
    }
    for (t1 = object.children, c = 0; c < t1.length; ++c)
      this.removeObject$1(t1[c]);
  },
  Scene$0: function() {
    this.fog = null;
    this.overrideMaterial = null;
    this.matrixAutoUpdate = false;
    this.objects = [];
    this.lights = [];
    this.__objectsAdded = [];
    this.__objectsRemoved = [];
  },
  $isScene: true,
  static: {
Scene$: function() {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11;
  t1 = $.Object3DCount;
  $.Object3DCount = t1 + 1;
  t2 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  t3 = new Float32Array(3);
  t3.$dartCachedLength = t3.length;
  t3 = new T.Vector3(t3);
  t3.setValues$3(0, 1, 0);
  t4 = new Float32Array(3);
  t4.$dartCachedLength = t4.length;
  t4 = new T.Vector3(t4);
  t4.setValues$3(0, 0, 0);
  t5 = new Float32Array(3);
  t5.$dartCachedLength = t5.length;
  t5 = new T.Vector3(t5);
  t5.setValues$3(0, 0, 0);
  t6 = new Float32Array(3);
  t6.$dartCachedLength = t6.length;
  t6 = new T.Vector3(t6);
  t6.setValues$3(1, 1, 1);
  t7 = new Float32Array(16);
  t7.$dartCachedLength = t7.length;
  t7 = new T.Matrix4(t7);
  t7.setIdentity$0();
  t8 = new Float32Array(16);
  t8.$dartCachedLength = t8.length;
  t8 = new T.Matrix4(t8);
  t8.setIdentity$0();
  t9 = new Float32Array(16);
  t9.$dartCachedLength = t9.length;
  t9 = new T.Matrix4(t9);
  t9.setIdentity$0();
  t10 = T.Quaternion$identity();
  t11 = new Float32Array(3);
  t11.$dartCachedLength = t11.length;
  t11 = new S.Scene(null, null, null, null, null, null, t1, "", t2, null, [], t3, t4, t5, t6, "XYZ", null, null, null, true, null, t7, t8, t9, true, true, t10, false, 0, 1, true, false, false, true, new T.Vector3(t11), null, null);
  t11.Scene$0();
  return t11;
}}

},

Texture: {"": "Object;id>,image<,mapping,wrapS,wrapT,magFilter,minFilter,format,type>,anisotropy,offset*,repeat@,generateMipmaps@,premultiplyAlpha,needsUpdate@,onUpdate,flipY>,unpackAlignment,mipmaps,__data",
  clone$0: function(_) {
    var clonedTexture = S.Texture$(this.image, this.mapping, this.wrapS, this.wrapT, this.magFilter, this.minFilter, this.format, this.type, this.anisotropy);
    clonedTexture.mipmaps = P.List_List$from(this.mipmaps, true, null);
    clonedTexture.offset.setFrom$1(this.get$offset(this));
    clonedTexture.repeat.setFrom$1(this.get$repeat());
    return clonedTexture;
  },
  get$_data: function() {
    if (this.__data == null)
      this.__data = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
    return this.__data;
  },
  $index: function(_, key) {
    var t1 = this.get$_data();
    return t1.$index(t1, key);
  },
  $indexSet: function(_, key, value) {
    var t1 = this.get$_data();
    t1.$indexSet(t1, key, value);
    return value;
  },
  Texture$9: function(image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
    var t1, t2;
    t1 = $.TextureCount;
    $.TextureCount = t1 + 1;
    this.id = t1;
    t1 = this.mapping;
    this.mapping = t1 != null ? t1 : new S.UVMapping();
    t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    this.set$offset(this, new T.Vector2(t1));
    t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector2(t1);
    t2 = t1.storage;
    t2[0] = 1;
    t2[1] = 1;
    this.set$repeat(t1);
    this.set$generateMipmaps(true);
    this.premultiplyAlpha = false;
    this.flipY = true;
    this.needsUpdate = false;
    this.onUpdate = null;
  },
  $isTexture: true,
  static: {
Texture$: function(image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
  var t1 = new S.Texture(null, image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, null, null, null, null, null, null, null, 4, [], null);
  t1.Texture$9(image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);
  return t1;
}}

}}],
["vector_math", "package:vector_math/vector_math.dart", , T, {
makePerspectiveMatrix: function(fovYRadians, aspectRatio, zNear, zFar) {
  var height, width, t1, view;
  height = Math.tan(fovYRadians * 0.5) * zNear;
  width = height * aspectRatio;
  t1 = new Float32Array(16);
  t1.$dartCachedLength = t1.length;
  view = new T.Matrix4(t1);
  T.setFrustumMatrix(view, -width, width, -height, height, zNear, zFar);
  return view;
},

setFrustumMatrix: function(perspectiveMatrix, left, right, bottom, $top, near, far) {
  var two_near, right_minus_left, top_minus_bottom, far_minus_near, t1;
  two_near = 2 * near;
  right_minus_left = right - left;
  top_minus_bottom = $top - bottom;
  far_minus_near = far - near;
  t1 = perspectiveMatrix.setZero$0().storage;
  t1[0] = two_near / right_minus_left;
  t1[5] = two_near / top_minus_bottom;
  t1[8] = (right + left) / right_minus_left;
  t1[9] = ($top + bottom) / top_minus_bottom;
  t1[10] = -(far + near) / far_minus_near;
  t1[11] = -1;
  t1[14] = -(two_near * far) / far_minus_near;
},

setOrthographicMatrix: function(orthographicMatrix, left, right, bottom, $top, near, far) {
  var rml, tmb, fmn, t1;
  rml = right - left;
  tmb = $top - bottom;
  fmn = far - near;
  t1 = orthographicMatrix.setZero$0().storage;
  t1[0] = 2 / rml;
  t1[5] = 2 / tmb;
  t1[10] = -2 / fmn;
  t1[12] = -(right + left) / rml;
  t1[13] = -($top + bottom) / tmb;
  t1[14] = -(far + near) / fmn;
  t1[15] = 1;
},

Matrix3: {"": "Object;storage<",
  setValues$9: function(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
    var t1 = this.storage;
    t1[8] = arg8;
    t1[7] = arg7;
    t1[6] = arg6;
    t1[5] = arg5;
    t1[4] = arg4;
    t1[3] = arg3;
    t1[2] = arg2;
    t1[1] = arg1;
    t1[0] = arg0;
    return this;
  },
  setFrom$1: function(arg) {
    var t1, t2;
    t1 = this.storage;
    t2 = arg.get$storage();
    if (8 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 8);
    t1[8] = t2[8];
    t2 = arg.get$storage();
    if (7 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 7);
    t1[7] = t2[7];
    t2 = arg.get$storage();
    if (6 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 6);
    t1[6] = t2[6];
    t2 = arg.get$storage();
    if (5 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 5);
    t1[5] = t2[5];
    t2 = arg.get$storage();
    if (4 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 4);
    t1[4] = t2[4];
    t2 = arg.get$storage();
    if (3 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 3);
    t1[3] = t2[3];
    t2 = arg.get$storage();
    if (2 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 2);
    t1[2] = t2[2];
    t2 = arg.get$storage();
    if (1 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 1);
    t1[1] = t2[1];
    t2 = arg.get$storage();
    if (0 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 0);
    t1[0] = t2[0];
    return this;
  },
  toString$0: function(_) {
    return "[0] " + H.S(this.getRow$1(0)) + "\n[1] " + H.S(this.getRow$1(1)) + "\n[2] " + H.S(this.getRow$1(2)) + "\n";
  },
  get$dimension: function() {
    return 3;
  },
  $index: function(_, i) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 9)
      throw H.ioore(t1, i);
    return t1[i];
  },
  $indexSet: function(_, i, v) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 9)
      throw H.ioore(t1, i);
    t1[i] = v;
  },
  getRow$1: function(row) {
    var t1, r, t2, t3;
    t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    r = new T.Vector3(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = 0 + row;
    if (t3 < 0 || t3 >= 9)
      throw H.ioore(t2, t3);
    t1[0] = t2[t3];
    t3 = 3 + row;
    if (t3 < 0 || t3 >= 9)
      throw H.ioore(t2, t3);
    t1[1] = t2[t3];
    t3 = 6 + row;
    if (t3 < 0 || t3 >= 9)
      throw H.ioore(t2, t3);
    t1[2] = t2[t3];
    return r;
  },
  clone$0: function(_) {
    var t1 = new Float32Array(9);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Matrix3(t1);
    t1.setFrom$1(this);
    return t1;
  },
  _mul_scale$1: function(arg) {
    var t1, r, t2;
    t1 = new Float32Array(9);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix3(t1);
    t1 = r.storage;
    t2 = this.storage;
    t1[8] = t2[8] * arg;
    t1[7] = t2[7] * arg;
    t1[6] = t2[6] * arg;
    t1[5] = t2[5] * arg;
    t1[4] = t2[4] * arg;
    t1[3] = t2[3] * arg;
    t1[2] = t2[2] * arg;
    t1[1] = t2[1] * arg;
    t1[0] = t2[0] * arg;
    return r;
  },
  $mul: function(_, arg) {
    if (typeof arg === "number")
      return this._mul_scale$1(arg);
    arg.get$dimension();
    throw H.wrapException(new P.ArgumentError(arg));
  },
  $add: function(_, arg) {
    var t1, r, t2, t3, t4;
    t1 = new Float32Array(9);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix3(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = t2[0];
    t4 = arg.get$storage();
    if (0 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 0);
    t1[0] = t3 + t4[0];
    t4 = t2[1];
    t3 = arg.get$storage();
    if (1 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 1);
    t1[1] = t4 + t3[1];
    t3 = t2[2];
    t4 = arg.get$storage();
    if (2 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 2);
    t1[2] = t3 + t4[2];
    t4 = t2[3];
    t3 = arg.get$storage();
    if (3 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 3);
    t1[3] = t4 + t3[3];
    t3 = t2[4];
    t4 = arg.get$storage();
    if (4 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 4);
    t1[4] = t3 + t4[4];
    t4 = t2[5];
    t3 = arg.get$storage();
    if (5 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 5);
    t1[5] = t4 + t3[5];
    t3 = t2[6];
    t4 = arg.get$storage();
    if (6 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 6);
    t1[6] = t3 + t4[6];
    t4 = t2[7];
    t3 = arg.get$storage();
    if (7 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 7);
    t1[7] = t4 + t3[7];
    t2 = t2[8];
    t3 = arg.get$storage();
    if (8 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 8);
    t1[8] = t2 + t3[8];
    return r;
  },
  $sub: function(_, arg) {
    var t1, r, t2, t3, t4;
    t1 = new Float32Array(9);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix3(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = t2[0];
    t4 = arg.get$storage();
    if (0 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 0);
    t1[0] = t3 - t4[0];
    t4 = t2[1];
    t3 = arg.get$storage();
    if (1 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 1);
    t1[1] = t4 - t3[1];
    t3 = t2[2];
    t4 = arg.get$storage();
    if (2 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 2);
    t1[2] = t3 - t4[2];
    t4 = t2[3];
    t3 = arg.get$storage();
    if (3 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 3);
    t1[3] = t4 - t3[3];
    t3 = t2[4];
    t4 = arg.get$storage();
    if (4 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 4);
    t1[4] = t3 - t4[4];
    t4 = t2[5];
    t3 = arg.get$storage();
    if (5 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 5);
    t1[5] = t4 - t3[5];
    t3 = t2[6];
    t4 = arg.get$storage();
    if (6 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 6);
    t1[6] = t3 - t4[6];
    t4 = t2[7];
    t3 = arg.get$storage();
    if (7 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 7);
    t1[7] = t4 - t3[7];
    t2 = t2[8];
    t3 = arg.get$storage();
    if (8 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 8);
    t1[8] = t2 - t3[8];
    return r;
  },
  $negate: function(_) {
    var t1, r, t2;
    t1 = new Float32Array(9);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix3(t1);
    t1 = this.storage;
    t2 = r.storage;
    t2[0] = -t1[0];
    t2[1] = -t1[1];
    t2[2] = -t1[2];
    return r;
  },
  transpose$0: function() {
    var t1, temp;
    t1 = this.storage;
    temp = t1[3];
    t1[3] = t1[1];
    t1[1] = temp;
    temp = t1[6];
    t1[6] = t1[2];
    t1[2] = temp;
    temp = t1[7];
    t1[7] = t1[5];
    t1[5] = temp;
    return this;
  },
  add$1: function(_, o) {
    var t1, t2, t3;
    t1 = this.storage;
    t2 = t1[0];
    t3 = o.get$storage();
    if (0 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 0);
    t1[0] = t2 + t3[0];
    t3 = t1[1];
    t2 = o.get$storage();
    if (1 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 1);
    t1[1] = t3 + t2[1];
    t2 = t1[2];
    t3 = o.get$storage();
    if (2 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 2);
    t1[2] = t2 + t3[2];
    t3 = t1[3];
    t2 = o.get$storage();
    if (3 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 3);
    t1[3] = t3 + t2[3];
    t2 = t1[4];
    t3 = o.get$storage();
    if (4 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 4);
    t1[4] = t2 + t3[4];
    t3 = t1[5];
    t2 = o.get$storage();
    if (5 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 5);
    t1[5] = t3 + t2[5];
    t2 = t1[6];
    t3 = o.get$storage();
    if (6 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 6);
    t1[6] = t2 + t3[6];
    t3 = t1[7];
    t2 = o.get$storage();
    if (7 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 7);
    t1[7] = t3 + t2[7];
    t2 = t1[8];
    t3 = o.get$storage();
    if (8 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 8);
    t1[8] = t2 + t3[8];
    return this;
  },
  $isMatrix3: true
},

Matrix4: {"": "Object;storage<",
  setValues$16: function(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15) {
    var t1 = this.storage;
    t1[15] = arg15;
    t1[14] = arg14;
    t1[13] = arg13;
    t1[12] = arg12;
    t1[11] = arg11;
    t1[10] = arg10;
    t1[9] = arg9;
    t1[8] = arg8;
    t1[7] = arg7;
    t1[6] = arg6;
    t1[5] = arg5;
    t1[4] = arg4;
    t1[3] = arg3;
    t1[2] = arg2;
    t1[1] = arg1;
    t1[0] = arg0;
    return this;
  },
  setFrom$1: function(arg) {
    var t1, t2;
    t1 = this.storage;
    t2 = arg.get$storage();
    if (15 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 15);
    t1[15] = t2[15];
    t2 = arg.get$storage();
    if (14 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 14);
    t1[14] = t2[14];
    t2 = arg.get$storage();
    if (13 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 13);
    t1[13] = t2[13];
    t2 = arg.get$storage();
    if (12 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 12);
    t1[12] = t2[12];
    t2 = arg.get$storage();
    if (11 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 11);
    t1[11] = t2[11];
    t2 = arg.get$storage();
    if (10 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 10);
    t1[10] = t2[10];
    t2 = arg.get$storage();
    if (9 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 9);
    t1[9] = t2[9];
    t2 = arg.get$storage();
    if (8 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 8);
    t1[8] = t2[8];
    t2 = arg.get$storage();
    if (7 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 7);
    t1[7] = t2[7];
    t2 = arg.get$storage();
    if (6 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 6);
    t1[6] = t2[6];
    t2 = arg.get$storage();
    if (5 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 5);
    t1[5] = t2[5];
    t2 = arg.get$storage();
    if (4 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 4);
    t1[4] = t2[4];
    t2 = arg.get$storage();
    if (3 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 3);
    t1[3] = t2[3];
    t2 = arg.get$storage();
    if (2 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 2);
    t1[2] = t2[2];
    t2 = arg.get$storage();
    if (1 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 1);
    t1[1] = t2[1];
    t2 = arg.get$storage();
    if (0 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 0);
    t1[0] = t2[0];
    return this;
  },
  toString$0: function(_) {
    return "[0] " + H.S(this.getRow$1(0)) + "\n[1] " + H.S(this.getRow$1(1)) + "\n[2] " + H.S(this.getRow$1(2)) + "\n[3] " + H.S(this.getRow$1(3)) + "\n";
  },
  get$dimension: function() {
    return 4;
  },
  $index: function(_, i) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 16)
      throw H.ioore(t1, i);
    return t1[i];
  },
  $indexSet: function(_, i, v) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 16)
      throw H.ioore(t1, i);
    t1[i] = v;
  },
  getRow$1: function(row) {
    var t1, r, t2, t3;
    t1 = new Float32Array(4);
    t1.$dartCachedLength = t1.length;
    r = new T.Vector4(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = 0 + row;
    if (t3 < 0 || t3 >= 16)
      throw H.ioore(t2, t3);
    t1[0] = t2[t3];
    t3 = 4 + row;
    if (t3 < 0 || t3 >= 16)
      throw H.ioore(t2, t3);
    t1[1] = t2[t3];
    t3 = 8 + row;
    if (t3 < 0 || t3 >= 16)
      throw H.ioore(t2, t3);
    t1[2] = t2[t3];
    t3 = 12 + row;
    if (t3 < 0 || t3 >= 16)
      throw H.ioore(t2, t3);
    t1[3] = t2[t3];
    return r;
  },
  clone$0: function(_) {
    var t1 = new Float32Array(16);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Matrix4(t1);
    t1.setFrom$1(this);
    return t1;
  },
  _mul_scale$1: function(arg) {
    var t1, r, t2;
    t1 = new Float32Array(16);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix4(t1);
    t1 = r.storage;
    t2 = this.storage;
    t1[15] = t2[15] * arg;
    t1[14] = t2[14] * arg;
    t1[13] = t2[13] * arg;
    t1[12] = t2[12] * arg;
    t1[11] = t2[11] * arg;
    t1[10] = t2[10] * arg;
    t1[9] = t2[9] * arg;
    t1[8] = t2[8] * arg;
    t1[7] = t2[7] * arg;
    t1[6] = t2[6] * arg;
    t1[5] = t2[5] * arg;
    t1[4] = t2[4] * arg;
    t1[3] = t2[3] * arg;
    t1[2] = t2[2] * arg;
    t1[1] = t2[1] * arg;
    t1[0] = t2[0] * arg;
    return r;
  },
  _mul_matrix$1: function(arg) {
    var t1, r, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11;
    t1 = new Float32Array(16);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix4(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = t2[0];
    t4 = arg.get$storage();
    t5 = C.JS_CONST_ZYJ(t4);
    if (0 >= t5)
      throw H.ioore(t4, 0);
    t6 = t4[0];
    t7 = t2[4];
    if (1 >= t5)
      throw H.ioore(t4, 1);
    t8 = t4[1];
    t9 = t2[8];
    if (2 >= t5)
      throw H.ioore(t4, 2);
    t10 = t4[2];
    t11 = t2[12];
    if (3 >= t5)
      throw H.ioore(t4, 3);
    t1[0] = t3 * t6 + t7 * t8 + t9 * t10 + t11 * t4[3];
    t4 = t2[0];
    t11 = arg.get$storage();
    t10 = C.JS_CONST_ZYJ(t11);
    if (4 >= t10)
      throw H.ioore(t11, 4);
    t9 = t11[4];
    t8 = t2[4];
    if (5 >= t10)
      throw H.ioore(t11, 5);
    t7 = t11[5];
    t6 = t2[8];
    if (6 >= t10)
      throw H.ioore(t11, 6);
    t3 = t11[6];
    t5 = t2[12];
    if (7 >= t10)
      throw H.ioore(t11, 7);
    t1[4] = t4 * t9 + t8 * t7 + t6 * t3 + t5 * t11[7];
    t11 = t2[0];
    t5 = arg.get$storage();
    t3 = C.JS_CONST_ZYJ(t5);
    if (8 >= t3)
      throw H.ioore(t5, 8);
    t6 = t5[8];
    t7 = t2[4];
    if (9 >= t3)
      throw H.ioore(t5, 9);
    t8 = t5[9];
    t9 = t2[8];
    if (10 >= t3)
      throw H.ioore(t5, 10);
    t4 = t5[10];
    t10 = t2[12];
    if (11 >= t3)
      throw H.ioore(t5, 11);
    t1[8] = t11 * t6 + t7 * t8 + t9 * t4 + t10 * t5[11];
    t5 = t2[0];
    t10 = arg.get$storage();
    t4 = C.JS_CONST_ZYJ(t10);
    if (12 >= t4)
      throw H.ioore(t10, 12);
    t9 = t10[12];
    t8 = t2[4];
    if (13 >= t4)
      throw H.ioore(t10, 13);
    t7 = t10[13];
    t6 = t2[8];
    if (14 >= t4)
      throw H.ioore(t10, 14);
    t11 = t10[14];
    t3 = t2[12];
    if (15 >= t4)
      throw H.ioore(t10, 15);
    t1[12] = t5 * t9 + t8 * t7 + t6 * t11 + t3 * t10[15];
    t10 = t2[1];
    t3 = arg.get$storage();
    t11 = C.JS_CONST_ZYJ(t3);
    if (0 >= t11)
      throw H.ioore(t3, 0);
    t6 = t3[0];
    t7 = t2[5];
    if (1 >= t11)
      throw H.ioore(t3, 1);
    t8 = t3[1];
    t9 = t2[9];
    if (2 >= t11)
      throw H.ioore(t3, 2);
    t5 = t3[2];
    t4 = t2[13];
    if (3 >= t11)
      throw H.ioore(t3, 3);
    t1[1] = t10 * t6 + t7 * t8 + t9 * t5 + t4 * t3[3];
    t3 = t2[1];
    t4 = arg.get$storage();
    t5 = C.JS_CONST_ZYJ(t4);
    if (4 >= t5)
      throw H.ioore(t4, 4);
    t9 = t4[4];
    t8 = t2[5];
    if (5 >= t5)
      throw H.ioore(t4, 5);
    t7 = t4[5];
    t6 = t2[9];
    if (6 >= t5)
      throw H.ioore(t4, 6);
    t10 = t4[6];
    t11 = t2[13];
    if (7 >= t5)
      throw H.ioore(t4, 7);
    t1[5] = t3 * t9 + t8 * t7 + t6 * t10 + t11 * t4[7];
    t4 = t2[1];
    t11 = arg.get$storage();
    t10 = C.JS_CONST_ZYJ(t11);
    if (8 >= t10)
      throw H.ioore(t11, 8);
    t6 = t11[8];
    t7 = t2[5];
    if (9 >= t10)
      throw H.ioore(t11, 9);
    t8 = t11[9];
    t9 = t2[9];
    if (10 >= t10)
      throw H.ioore(t11, 10);
    t3 = t11[10];
    t5 = t2[13];
    if (11 >= t10)
      throw H.ioore(t11, 11);
    t1[9] = t4 * t6 + t7 * t8 + t9 * t3 + t5 * t11[11];
    t11 = t2[1];
    t5 = arg.get$storage();
    t3 = C.JS_CONST_ZYJ(t5);
    if (12 >= t3)
      throw H.ioore(t5, 12);
    t9 = t5[12];
    t8 = t2[5];
    if (13 >= t3)
      throw H.ioore(t5, 13);
    t7 = t5[13];
    t6 = t2[9];
    if (14 >= t3)
      throw H.ioore(t5, 14);
    t4 = t5[14];
    t10 = t2[13];
    if (15 >= t3)
      throw H.ioore(t5, 15);
    t1[13] = t11 * t9 + t8 * t7 + t6 * t4 + t10 * t5[15];
    t5 = t2[2];
    t10 = arg.get$storage();
    t4 = C.JS_CONST_ZYJ(t10);
    if (0 >= t4)
      throw H.ioore(t10, 0);
    t6 = t10[0];
    t7 = t2[6];
    if (1 >= t4)
      throw H.ioore(t10, 1);
    t8 = t10[1];
    t9 = t2[10];
    if (2 >= t4)
      throw H.ioore(t10, 2);
    t11 = t10[2];
    t3 = t2[14];
    if (3 >= t4)
      throw H.ioore(t10, 3);
    t1[2] = t5 * t6 + t7 * t8 + t9 * t11 + t3 * t10[3];
    t10 = t2[2];
    t3 = arg.get$storage();
    t11 = C.JS_CONST_ZYJ(t3);
    if (4 >= t11)
      throw H.ioore(t3, 4);
    t9 = t3[4];
    t8 = t2[6];
    if (5 >= t11)
      throw H.ioore(t3, 5);
    t7 = t3[5];
    t6 = t2[10];
    if (6 >= t11)
      throw H.ioore(t3, 6);
    t5 = t3[6];
    t4 = t2[14];
    if (7 >= t11)
      throw H.ioore(t3, 7);
    t1[6] = t10 * t9 + t8 * t7 + t6 * t5 + t4 * t3[7];
    t3 = t2[2];
    t4 = arg.get$storage();
    t5 = C.JS_CONST_ZYJ(t4);
    if (8 >= t5)
      throw H.ioore(t4, 8);
    t6 = t4[8];
    t7 = t2[6];
    if (9 >= t5)
      throw H.ioore(t4, 9);
    t8 = t4[9];
    t9 = t2[10];
    if (10 >= t5)
      throw H.ioore(t4, 10);
    t10 = t4[10];
    t11 = t2[14];
    if (11 >= t5)
      throw H.ioore(t4, 11);
    t1[10] = t3 * t6 + t7 * t8 + t9 * t10 + t11 * t4[11];
    t4 = t2[2];
    t11 = arg.get$storage();
    t10 = C.JS_CONST_ZYJ(t11);
    if (12 >= t10)
      throw H.ioore(t11, 12);
    t9 = t11[12];
    t8 = t2[6];
    if (13 >= t10)
      throw H.ioore(t11, 13);
    t7 = t11[13];
    t6 = t2[10];
    if (14 >= t10)
      throw H.ioore(t11, 14);
    t3 = t11[14];
    t5 = t2[14];
    if (15 >= t10)
      throw H.ioore(t11, 15);
    t1[14] = t4 * t9 + t8 * t7 + t6 * t3 + t5 * t11[15];
    t11 = t2[3];
    t5 = arg.get$storage();
    t3 = C.JS_CONST_ZYJ(t5);
    if (0 >= t3)
      throw H.ioore(t5, 0);
    t6 = t5[0];
    t7 = t2[7];
    if (1 >= t3)
      throw H.ioore(t5, 1);
    t8 = t5[1];
    t9 = t2[11];
    if (2 >= t3)
      throw H.ioore(t5, 2);
    t4 = t5[2];
    t10 = t2[15];
    if (3 >= t3)
      throw H.ioore(t5, 3);
    t1[3] = t11 * t6 + t7 * t8 + t9 * t4 + t10 * t5[3];
    t5 = t2[3];
    t10 = arg.get$storage();
    t4 = C.JS_CONST_ZYJ(t10);
    if (4 >= t4)
      throw H.ioore(t10, 4);
    t9 = t10[4];
    t8 = t2[7];
    if (5 >= t4)
      throw H.ioore(t10, 5);
    t7 = t10[5];
    t6 = t2[11];
    if (6 >= t4)
      throw H.ioore(t10, 6);
    t11 = t10[6];
    t3 = t2[15];
    if (7 >= t4)
      throw H.ioore(t10, 7);
    t1[7] = t5 * t9 + t8 * t7 + t6 * t11 + t3 * t10[7];
    t10 = t2[3];
    t3 = arg.get$storage();
    t11 = C.JS_CONST_ZYJ(t3);
    if (8 >= t11)
      throw H.ioore(t3, 8);
    t6 = t3[8];
    t7 = t2[7];
    if (9 >= t11)
      throw H.ioore(t3, 9);
    t8 = t3[9];
    t9 = t2[11];
    if (10 >= t11)
      throw H.ioore(t3, 10);
    t5 = t3[10];
    t4 = t2[15];
    if (11 >= t11)
      throw H.ioore(t3, 11);
    t1[11] = t10 * t6 + t7 * t8 + t9 * t5 + t4 * t3[11];
    t3 = t2[3];
    t4 = arg.get$storage();
    t5 = C.JS_CONST_ZYJ(t4);
    if (12 >= t5)
      throw H.ioore(t4, 12);
    t9 = t4[12];
    t8 = t2[7];
    if (13 >= t5)
      throw H.ioore(t4, 13);
    t7 = t4[13];
    t6 = t2[11];
    if (14 >= t5)
      throw H.ioore(t4, 14);
    t10 = t4[14];
    t2 = t2[15];
    if (15 >= t5)
      throw H.ioore(t4, 15);
    t1[15] = t3 * t9 + t8 * t7 + t6 * t10 + t2 * t4[15];
    return r;
  },
  _mul_vector$1: function(arg) {
    var t1, r, t2, t3;
    t1 = new Float32Array(4);
    t1.$dartCachedLength = t1.length;
    r = new T.Vector4(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = arg.storage;
    t1[3] = t2[3] * t3[0] + t2[7] * t3[1] + t2[11] * t3[2] + t2[15] * t3[3];
    t1[2] = t2[2] * t3[0] + t2[6] * t3[1] + t2[10] * t3[2] + t2[14] * t3[3];
    t1[1] = t2[1] * t3[0] + t2[5] * t3[1] + t2[9] * t3[2] + t2[13] * t3[3];
    t1[0] = t2[0] * t3[0] + t2[4] * t3[1] + t2[8] * t3[2] + t2[12] * t3[3];
    return r;
  },
  _mul_vector3$1: function(arg) {
    var t1, r, t2, t3;
    t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    r = new T.Vector3(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = arg.storage;
    t1[0] = t2[0] * t3[0] + t2[4] * t3[1] + t2[8] * t3[2] + t2[12];
    t1[1] = t2[1] * t3[0] + t2[5] * t3[1] + t2[9] * t3[2] + t2[13];
    t1[2] = t2[2] * t3[0] + t2[6] * t3[1] + t2[10] * t3[2] + t2[14];
    return r;
  },
  $mul: function(_, arg) {
    var t1;
    if (typeof arg === "number")
      return this._mul_scale$1(arg);
    t1 = J.getInterceptor(arg);
    if (typeof arg === "object" && arg !== null && !!t1.$isVector4)
      return this._mul_vector$1(arg);
    if (typeof arg === "object" && arg !== null && !!t1.$isVector3)
      return this._mul_vector3$1(arg);
    if (4 === arg.get$dimension())
      return this._mul_matrix$1(arg);
    throw H.wrapException(new P.ArgumentError(arg));
  },
  $add: function(_, arg) {
    var t1, r, t2, t3, t4;
    t1 = new Float32Array(16);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix4(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = t2[0];
    t4 = arg.get$storage();
    if (0 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 0);
    t1[0] = t3 + t4[0];
    t4 = t2[1];
    t3 = arg.get$storage();
    if (1 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 1);
    t1[1] = t4 + t3[1];
    t3 = t2[2];
    t4 = arg.get$storage();
    if (2 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 2);
    t1[2] = t3 + t4[2];
    t4 = t2[3];
    t3 = arg.get$storage();
    if (3 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 3);
    t1[3] = t4 + t3[3];
    t3 = t2[4];
    t4 = arg.get$storage();
    if (4 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 4);
    t1[4] = t3 + t4[4];
    t4 = t2[5];
    t3 = arg.get$storage();
    if (5 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 5);
    t1[5] = t4 + t3[5];
    t3 = t2[6];
    t4 = arg.get$storage();
    if (6 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 6);
    t1[6] = t3 + t4[6];
    t4 = t2[7];
    t3 = arg.get$storage();
    if (7 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 7);
    t1[7] = t4 + t3[7];
    t3 = t2[8];
    t4 = arg.get$storage();
    if (8 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 8);
    t1[8] = t3 + t4[8];
    t4 = t2[9];
    t3 = arg.get$storage();
    if (9 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 9);
    t1[9] = t4 + t3[9];
    t3 = t2[10];
    t4 = arg.get$storage();
    if (10 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 10);
    t1[10] = t3 + t4[10];
    t4 = t2[11];
    t3 = arg.get$storage();
    if (11 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 11);
    t1[11] = t4 + t3[11];
    t3 = t2[12];
    t4 = arg.get$storage();
    if (12 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 12);
    t1[12] = t3 + t4[12];
    t4 = t2[13];
    t3 = arg.get$storage();
    if (13 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 13);
    t1[13] = t4 + t3[13];
    t3 = t2[14];
    t4 = arg.get$storage();
    if (14 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 14);
    t1[14] = t3 + t4[14];
    t2 = t2[15];
    t4 = arg.get$storage();
    if (15 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 15);
    t1[15] = t2 + t4[15];
    return r;
  },
  $sub: function(_, arg) {
    var t1, r, t2, t3, t4;
    t1 = new Float32Array(16);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix4(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = t2[0];
    t4 = arg.get$storage();
    if (0 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 0);
    t1[0] = t3 - t4[0];
    t4 = t2[1];
    t3 = arg.get$storage();
    if (1 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 1);
    t1[1] = t4 - t3[1];
    t3 = t2[2];
    t4 = arg.get$storage();
    if (2 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 2);
    t1[2] = t3 - t4[2];
    t4 = t2[3];
    t3 = arg.get$storage();
    if (3 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 3);
    t1[3] = t4 - t3[3];
    t3 = t2[4];
    t4 = arg.get$storage();
    if (4 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 4);
    t1[4] = t3 - t4[4];
    t4 = t2[5];
    t3 = arg.get$storage();
    if (5 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 5);
    t1[5] = t4 - t3[5];
    t3 = t2[6];
    t4 = arg.get$storage();
    if (6 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 6);
    t1[6] = t3 - t4[6];
    t4 = t2[7];
    t3 = arg.get$storage();
    if (7 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 7);
    t1[7] = t4 - t3[7];
    t3 = t2[8];
    t4 = arg.get$storage();
    if (8 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 8);
    t1[8] = t3 - t4[8];
    t4 = t2[9];
    t3 = arg.get$storage();
    if (9 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 9);
    t1[9] = t4 - t3[9];
    t3 = t2[10];
    t4 = arg.get$storage();
    if (10 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 10);
    t1[10] = t3 - t4[10];
    t4 = t2[11];
    t3 = arg.get$storage();
    if (11 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 11);
    t1[11] = t4 - t3[11];
    t3 = t2[12];
    t4 = arg.get$storage();
    if (12 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 12);
    t1[12] = t3 - t4[12];
    t4 = t2[13];
    t3 = arg.get$storage();
    if (13 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 13);
    t1[13] = t4 - t3[13];
    t3 = t2[14];
    t4 = arg.get$storage();
    if (14 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 14);
    t1[14] = t3 - t4[14];
    t2 = t2[15];
    t4 = arg.get$storage();
    if (15 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 15);
    t1[15] = t2 - t4[15];
    return r;
  },
  scale$3: function(_, x, y, z) {
    var t1, sx, sy, sz, t2;
    t1 = x.storage;
    sx = t1[0];
    sy = t1[1];
    sz = t1[2];
    t1 = this.storage;
    t2 = t1[0];
    if (typeof sx !== "number")
      throw H.iae(sx);
    t1[0] = t2 * sx;
    t1[1] = t1[1] * sx;
    t1[2] = t1[2] * sx;
    t1[3] = t1[3] * sx;
    t2 = t1[4];
    if (typeof sy !== "number")
      throw H.iae(sy);
    t1[4] = t2 * sy;
    t1[5] = t1[5] * sy;
    t1[6] = t1[6] * sy;
    t1[7] = t1[7] * sy;
    t2 = t1[8];
    if (typeof sz !== "number")
      throw H.iae(sz);
    t1[8] = t2 * sz;
    t1[9] = t1[9] * sz;
    t1[10] = t1[10] * sz;
    t1[11] = t1[11] * sz;
    t1[12] = t1[12] * 1;
    t1[13] = t1[13] * 1;
    t1[14] = t1[14] * 1;
    t1[15] = t1[15] * 1;
    return this;
  },
  scale$1: function($receiver, x) {
    return this.scale$3($receiver, x, null, null);
  },
  $negate: function(_) {
    var t1, r, t2;
    t1 = new Float32Array(16);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix4(t1);
    t1 = this.storage;
    t2 = r.storage;
    t2[0] = -t1[0];
    t2[1] = -t1[1];
    t2[2] = -t1[2];
    t2[3] = -t1[3];
    return r;
  },
  setZero$0: function() {
    var t1 = this.storage;
    t1[0] = 0;
    t1[1] = 0;
    t1[2] = 0;
    t1[3] = 0;
    t1[4] = 0;
    t1[5] = 0;
    t1[6] = 0;
    t1[7] = 0;
    t1[8] = 0;
    t1[9] = 0;
    t1[10] = 0;
    t1[11] = 0;
    t1[12] = 0;
    t1[13] = 0;
    t1[14] = 0;
    t1[15] = 0;
    return this;
  },
  setIdentity$0: function() {
    var t1 = this.storage;
    t1[0] = 1;
    t1[1] = 0;
    t1[2] = 0;
    t1[3] = 0;
    t1[4] = 0;
    t1[5] = 1;
    t1[6] = 0;
    t1[7] = 0;
    t1[8] = 0;
    t1[9] = 0;
    t1[10] = 1;
    t1[11] = 0;
    t1[12] = 0;
    t1[13] = 0;
    t1[14] = 0;
    t1[15] = 1;
    return this;
  },
  getTranslation$0: function() {
    var t1, z, y, x;
    t1 = this.storage;
    z = t1[14];
    y = t1[13];
    x = t1[12];
    t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector3(t1);
    t1.setValues$3(x, y, z);
    return t1;
  },
  setTranslation$1: function($T) {
    var t1, z, y, x;
    t1 = $T.storage;
    z = t1[2];
    y = t1[1];
    x = t1[0];
    t1 = this.storage;
    t1[14] = z;
    t1[13] = y;
    t1[12] = x;
  },
  copyInverse$1: function(arg) {
    var t1, t2, a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33, b00, b01, b02, b03, b04, b05, b06, b07, b08, b09, b10, b11, det, invDet, t3;
    t1 = arg.get$storage();
    t2 = C.JS_CONST_ZYJ(t1);
    if (0 >= t2)
      throw H.ioore(t1, 0);
    a00 = t1[0];
    if (1 >= t2)
      throw H.ioore(t1, 1);
    a01 = t1[1];
    if (2 >= t2)
      throw H.ioore(t1, 2);
    a02 = t1[2];
    if (3 >= t2)
      throw H.ioore(t1, 3);
    a03 = t1[3];
    if (4 >= t2)
      throw H.ioore(t1, 4);
    a10 = t1[4];
    if (5 >= t2)
      throw H.ioore(t1, 5);
    a11 = t1[5];
    if (6 >= t2)
      throw H.ioore(t1, 6);
    a12 = t1[6];
    if (7 >= t2)
      throw H.ioore(t1, 7);
    a13 = t1[7];
    if (8 >= t2)
      throw H.ioore(t1, 8);
    a20 = t1[8];
    if (9 >= t2)
      throw H.ioore(t1, 9);
    a21 = t1[9];
    if (10 >= t2)
      throw H.ioore(t1, 10);
    a22 = t1[10];
    if (11 >= t2)
      throw H.ioore(t1, 11);
    a23 = t1[11];
    if (12 >= t2)
      throw H.ioore(t1, 12);
    a30 = t1[12];
    if (13 >= t2)
      throw H.ioore(t1, 13);
    a31 = t1[13];
    if (14 >= t2)
      throw H.ioore(t1, 14);
    a32 = t1[14];
    if (15 >= t2)
      throw H.ioore(t1, 15);
    a33 = t1[15];
    b00 = a00 * a11 - a01 * a10;
    b01 = a00 * a12 - a02 * a10;
    b02 = a00 * a13 - a03 * a10;
    b03 = a01 * a12 - a02 * a11;
    b04 = a01 * a13 - a03 * a11;
    b05 = a02 * a13 - a03 * a12;
    b06 = a20 * a31 - a21 * a30;
    b07 = a20 * a32 - a22 * a30;
    b08 = a20 * a33 - a23 * a30;
    b09 = a21 * a32 - a22 * a31;
    b10 = a21 * a33 - a23 * a31;
    b11 = a22 * a33 - a23 * a32;
    det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (det === 0) {
      this.setFrom$1(arg);
      return 0;
    }
    invDet = 1 / det;
    t1 = this.storage;
    t1[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;
    t1[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;
    t1[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;
    t1[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;
    t2 = -a10;
    t1[4] = (t2 * b11 + a12 * b08 - a13 * b07) * invDet;
    t1[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;
    t3 = -a30;
    t1[6] = (t3 * b05 + a32 * b02 - a33 * b01) * invDet;
    t1[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;
    t1[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;
    t1[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;
    t1[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;
    t1[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;
    t1[12] = (t2 * b09 + a11 * b07 - a12 * b06) * invDet;
    t1[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;
    t1[14] = (t3 * b03 + a31 * b01 - a32 * b00) * invDet;
    t1[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;
    return det;
  },
  add$1: function(_, o) {
    var t1, t2, t3;
    t1 = this.storage;
    t2 = t1[0];
    t3 = o.get$storage();
    if (0 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 0);
    t1[0] = t2 + t3[0];
    t3 = t1[1];
    t2 = o.get$storage();
    if (1 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 1);
    t1[1] = t3 + t2[1];
    t2 = t1[2];
    t3 = o.get$storage();
    if (2 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 2);
    t1[2] = t2 + t3[2];
    t3 = t1[3];
    t2 = o.get$storage();
    if (3 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 3);
    t1[3] = t3 + t2[3];
    t2 = t1[4];
    t3 = o.get$storage();
    if (4 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 4);
    t1[4] = t2 + t3[4];
    t3 = t1[5];
    t2 = o.get$storage();
    if (5 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 5);
    t1[5] = t3 + t2[5];
    t2 = t1[6];
    t3 = o.get$storage();
    if (6 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 6);
    t1[6] = t2 + t3[6];
    t3 = t1[7];
    t2 = o.get$storage();
    if (7 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 7);
    t1[7] = t3 + t2[7];
    t2 = t1[8];
    t3 = o.get$storage();
    if (8 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 8);
    t1[8] = t2 + t3[8];
    t3 = t1[9];
    t2 = o.get$storage();
    if (9 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 9);
    t1[9] = t3 + t2[9];
    t2 = t1[10];
    t3 = o.get$storage();
    if (10 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 10);
    t1[10] = t2 + t3[10];
    t3 = t1[11];
    t2 = o.get$storage();
    if (11 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 11);
    t1[11] = t3 + t2[11];
    t2 = t1[12];
    t3 = o.get$storage();
    if (12 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 12);
    t1[12] = t2 + t3[12];
    t3 = t1[13];
    t2 = o.get$storage();
    if (13 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 13);
    t1[13] = t3 + t2[13];
    t2 = t1[14];
    t3 = o.get$storage();
    if (14 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 14);
    t1[14] = t2 + t3[14];
    t3 = t1[15];
    t2 = o.get$storage();
    if (15 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 15);
    t1[15] = t3 + t2[15];
    return this;
  },
  multiply$1: function(_, arg) {
    var t1, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33, t2, t3, n00, n01, n02, n03, n10, n11, n12, n13, n20, n21, n22, n23, n30, n31, n32, n33;
    t1 = this.storage;
    m00 = t1[0];
    m01 = t1[4];
    m02 = t1[8];
    m03 = t1[12];
    m10 = t1[1];
    m11 = t1[5];
    m12 = t1[9];
    m13 = t1[13];
    m20 = t1[2];
    m21 = t1[6];
    m22 = t1[10];
    m23 = t1[14];
    m30 = t1[3];
    m31 = t1[7];
    m32 = t1[11];
    m33 = t1[15];
    t2 = arg.get$storage();
    t3 = C.JS_CONST_ZYJ(t2);
    if (0 >= t3)
      throw H.ioore(t2, 0);
    n00 = t2[0];
    if (4 >= t3)
      throw H.ioore(t2, 4);
    n01 = t2[4];
    if (8 >= t3)
      throw H.ioore(t2, 8);
    n02 = t2[8];
    if (12 >= t3)
      throw H.ioore(t2, 12);
    n03 = t2[12];
    n10 = t2[1];
    n11 = t2[5];
    n12 = t2[9];
    if (13 >= t3)
      throw H.ioore(t2, 13);
    n13 = t2[13];
    n20 = t2[2];
    n21 = t2[6];
    n22 = t2[10];
    if (14 >= t3)
      throw H.ioore(t2, 14);
    n23 = t2[14];
    n30 = t2[3];
    n31 = t2[7];
    n32 = t2[11];
    if (15 >= t3)
      throw H.ioore(t2, 15);
    n33 = t2[15];
    t1[0] = m00 * n00 + m01 * n10 + m02 * n20 + m03 * n30;
    t1[4] = m00 * n01 + m01 * n11 + m02 * n21 + m03 * n31;
    t1[8] = m00 * n02 + m01 * n12 + m02 * n22 + m03 * n32;
    t1[12] = m00 * n03 + m01 * n13 + m02 * n23 + m03 * n33;
    t1[1] = m10 * n00 + m11 * n10 + m12 * n20 + m13 * n30;
    t1[5] = m10 * n01 + m11 * n11 + m12 * n21 + m13 * n31;
    t1[9] = m10 * n02 + m11 * n12 + m12 * n22 + m13 * n32;
    t1[13] = m10 * n03 + m11 * n13 + m12 * n23 + m13 * n33;
    t1[2] = m20 * n00 + m21 * n10 + m22 * n20 + m23 * n30;
    t1[6] = m20 * n01 + m21 * n11 + m22 * n21 + m23 * n31;
    t1[10] = m20 * n02 + m21 * n12 + m22 * n22 + m23 * n32;
    t1[14] = m20 * n03 + m21 * n13 + m22 * n23 + m23 * n33;
    t1[3] = m30 * n00 + m31 * n10 + m32 * n20 + m33 * n30;
    t1[7] = m30 * n01 + m31 * n11 + m32 * n21 + m33 * n31;
    t1[11] = m30 * n02 + m31 * n12 + m32 * n22 + m33 * n32;
    t1[15] = m30 * n03 + m31 * n13 + m32 * n23 + m33 * n33;
    return this;
  },
  Matrix4$diagonal3Values$3: function(x, y, z) {
    var t1 = this.storage;
    t1[15] = 1;
    t1[10] = z;
    t1[5] = y;
    t1[0] = x;
  },
  $isMatrix4: true,
  static: {
Matrix4$diagonal3Values: function(x, y, z) {
  var t1 = new Float32Array(16);
  t1.$dartCachedLength = t1.length;
  t1 = new T.Matrix4(t1);
  t1.Matrix4$diagonal3Values$3(x, y, z);
  return t1;
}}

},

Quaternion: {"": "Object;storage<",
  get$x: function(_) {
    return this.storage[0];
  },
  get$y: function(_) {
    return this.storage[1];
  },
  get$z: function(_) {
    return this.storage[2];
  },
  get$w: function() {
    return this.storage[3];
  },
  clone$0: function(_) {
    return T.Quaternion$copy(this);
  },
  get$length2: function() {
    var t1, _x, _y, _z, _w;
    t1 = this.storage;
    _x = t1[0];
    _y = t1[1];
    _z = t1[2];
    _w = t1[3];
    return _x * _x + _y * _y + _z * _z + _w * _w;
  },
  get$length: function(_) {
    var t1 = this.get$length2();
    return Math.sqrt(t1);
  },
  $mul: function(_, other) {
    var t1, _w, _z, _y, _x, ow, oz, oy, ox;
    t1 = this.storage;
    _w = t1[3];
    _z = t1[2];
    _y = t1[1];
    _x = t1[0];
    t1 = other.get$storage();
    ow = t1.$index(t1, 3);
    oz = t1.$index(t1, 2);
    oy = t1.$index(t1, 1);
    ox = t1.$index(t1, 0);
    return T.Quaternion$(C.JSNumber_methods.$mul(_w, ox) + C.JSNumber_methods.$mul(_x, ow) + C.JSNumber_methods.$mul(_y, oz) - C.JSNumber_methods.$mul(_z, oy), C.JSNumber_methods.$mul(_w, oy) + C.JSNumber_methods.$mul(_y, ow) + C.JSNumber_methods.$mul(_z, ox) - C.JSNumber_methods.$mul(_x, oz), C.JSNumber_methods.$mul(_w, oz) + C.JSNumber_methods.$mul(_z, ow) + C.JSNumber_methods.$mul(_x, oy) - C.JSNumber_methods.$mul(_y, ox), C.JSNumber_methods.$mul(_w, ow) - C.JSNumber_methods.$mul(_x, ox) - C.JSNumber_methods.$mul(_y, oy) - C.JSNumber_methods.$mul(_z, oz));
  },
  $add: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = this.storage;
    t2 = t1[0];
    t3 = other.get$storage();
    t4 = C.JS_CONST_ZYJ(t3);
    if (0 >= t4)
      throw H.ioore(t3, 0);
    t5 = t3[0];
    t6 = t1[1];
    if (1 >= t4)
      throw H.ioore(t3, 1);
    t7 = t3[1];
    t8 = t1[2];
    if (2 >= t4)
      throw H.ioore(t3, 2);
    t9 = t3[2];
    t1 = t1[3];
    if (3 >= t4)
      throw H.ioore(t3, 3);
    return T.Quaternion$(t2 + t5, t6 + t7, t8 + t9, t1 + t3[3]);
  },
  $sub: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = this.storage;
    t2 = t1[0];
    t3 = other.get$storage();
    t4 = C.JS_CONST_ZYJ(t3);
    if (0 >= t4)
      throw H.ioore(t3, 0);
    t5 = t3[0];
    t6 = t1[1];
    if (1 >= t4)
      throw H.ioore(t3, 1);
    t7 = t3[1];
    t8 = t1[2];
    if (2 >= t4)
      throw H.ioore(t3, 2);
    t9 = t3[2];
    t1 = t1[3];
    if (3 >= t4)
      throw H.ioore(t3, 3);
    return T.Quaternion$(t2 - t5, t6 - t7, t8 - t9, t1 - t3[3]);
  },
  $negate: function(_) {
    var t1 = this.storage;
    return T.Quaternion$(-t1[0], -t1[1], -t1[2], -t1[3]);
  },
  $index: function(_, i) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 4)
      throw H.ioore(t1, i);
    return t1[i];
  },
  $indexSet: function(_, i, arg) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 4)
      throw H.ioore(t1, i);
    t1[i] = arg;
  },
  toString$0: function(_) {
    var t1 = this.storage;
    return H.S(t1[0]) + ", " + H.S(t1[1]) + ", " + H.S(t1[2]) + " @ " + H.S(t1[3]);
  },
  Quaternion$identity$0: function() {
    this.storage[3] = 1;
  },
  Quaternion$4: function(x, y, z, w) {
    var t1 = this.storage;
    t1[0] = x;
    t1[1] = y;
    t1[2] = z;
    t1[3] = w;
  },
  Quaternion$copy$1: function(original) {
    var t1, t2;
    t1 = this.storage;
    t2 = original.storage;
    t1[0] = t2[0];
    t1[1] = t2[1];
    t1[2] = t2[2];
    t1[3] = t2[3];
  },
  static: {
Quaternion$: function(x, y, z, w) {
  var t1 = new Float32Array(4);
  t1.$dartCachedLength = t1.length;
  t1 = new T.Quaternion(t1);
  t1.Quaternion$4(x, y, z, w);
  return t1;
},

Quaternion$copy: function(original) {
  var t1 = new Float32Array(4);
  t1.$dartCachedLength = t1.length;
  t1 = new T.Quaternion(t1);
  t1.Quaternion$copy$1(original);
  return t1;
},

Quaternion$identity: function() {
  var t1 = new Float32Array(4);
  t1.$dartCachedLength = t1.length;
  t1 = new T.Quaternion(t1);
  t1.Quaternion$identity$0();
  return t1;
}}

},

Vector2: {"": "Object;storage<",
  setFrom$1: function(other) {
    var t1, t2;
    t1 = this.storage;
    t2 = other.get$storage();
    if (1 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 1);
    t1[1] = t2[1];
    t2 = other.get$storage();
    if (0 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 0);
    t1[0] = t2[0];
    return this;
  },
  toString$0: function(_) {
    var t1 = this.storage;
    return "[" + H.S(t1[0]) + "," + H.S(t1[1]) + "]";
  },
  $negate: function(_) {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = t1[0];
    t1 = t1[1];
    t3 = new Float32Array(2);
    t3.$dartCachedLength = t3.length;
    t3 = new T.Vector2(t3);
    t4 = t3.storage;
    t4[0] = -t2;
    t4[1] = -t1;
    return t3;
  },
  $sub: function(_, other) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this.storage;
    t2 = t1[0];
    t3 = other.get$storage();
    t4 = C.JS_CONST_ZYJ(t3);
    if (0 >= t4)
      throw H.ioore(t3, 0);
    t5 = t3[0];
    t1 = t1[1];
    if (1 >= t4)
      throw H.ioore(t3, 1);
    t3 = t3[1];
    t4 = new Float32Array(2);
    t4.$dartCachedLength = t4.length;
    t4 = new T.Vector2(t4);
    t6 = t4.storage;
    t6[0] = t2 - t5;
    t6[1] = t1 - t3;
    return t4;
  },
  $add: function(_, other) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this.storage;
    t2 = t1[0];
    t3 = other.get$storage();
    t4 = C.JS_CONST_ZYJ(t3);
    if (0 >= t4)
      throw H.ioore(t3, 0);
    t5 = t3[0];
    t1 = t1[1];
    if (1 >= t4)
      throw H.ioore(t3, 1);
    t3 = t3[1];
    t4 = new Float32Array(2);
    t4.$dartCachedLength = t4.length;
    t4 = new T.Vector2(t4);
    t6 = t4.storage;
    t6[0] = t2 + t5;
    t6[1] = t1 + t3;
    return t4;
  },
  $mul: function(_, scale) {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = t1[0];
    if (typeof scale !== "number")
      throw H.iae(scale);
    t1 = t1[1];
    t3 = new Float32Array(2);
    t3.$dartCachedLength = t3.length;
    t3 = new T.Vector2(t3);
    t4 = t3.storage;
    t4[0] = t2 * scale;
    t4[1] = t1 * scale;
    return t3;
  },
  $index: function(_, i) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 2)
      throw H.ioore(t1, i);
    return t1[i];
  },
  $indexSet: function(_, i, v) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 2)
      throw H.ioore(t1, i);
    t1[i] = v;
  },
  get$length: function(_) {
    var t1, t2;
    t1 = this.storage;
    t2 = t1[0];
    t1 = t1[1];
    return Math.sqrt(t2 * t2 + t1 * t1);
  },
  get$length2: function() {
    var t1, t2;
    t1 = this.storage;
    t2 = t1[0];
    t1 = t1[1];
    return t2 * t2 + t1 * t1;
  },
  add$1: function(_, arg) {
    var t1, t2, t3;
    t1 = this.storage;
    t2 = t1[0];
    t3 = arg.get$storage();
    if (0 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 0);
    t1[0] = t2 + t3[0];
    t3 = t1[1];
    t2 = arg.get$storage();
    if (1 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 1);
    t1[1] = t3 + t2[1];
    return this;
  },
  clone$0: function(_) {
    var t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector2(t1);
    t1.setFrom$1(this);
    return t1;
  },
  get$r: function(_) {
    return this.storage[0];
  },
  get$g: function() {
    return this.storage[1];
  },
  get$x: function(_) {
    return this.storage[0];
  },
  get$y: function(_) {
    return this.storage[1];
  },
  $isVector2: true
},

Vector3: {"": "Object;storage<",
  setValues$3: function(x_, y_, z_) {
    var t1 = this.storage;
    t1[0] = x_;
    t1[1] = y_;
    t1[2] = z_;
    return this;
  },
  setFrom$1: function(other) {
    var t1, t2;
    t1 = this.storage;
    t2 = other.get$storage();
    if (0 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 0);
    t1[0] = t2[0];
    t2 = other.get$storage();
    if (1 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 1);
    t1[1] = t2[1];
    t2 = other.get$storage();
    if (2 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 2);
    t1[2] = t2[2];
    return this;
  },
  toString$0: function(_) {
    var t1 = this.storage;
    return "[" + H.S(t1[0]) + "," + H.S(t1[1]) + "," + H.S(t1[2]) + "]";
  },
  $negate: function(_) {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = t1[0];
    t3 = t1[1];
    t1 = t1[2];
    t4 = new Float32Array(3);
    t4.$dartCachedLength = t4.length;
    t4 = new T.Vector3(t4);
    t4.setValues$3(-t2, -t3, -t1);
    return t4;
  },
  $sub: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7;
    t1 = this.storage;
    t2 = t1[0];
    t3 = other.get$storage();
    t4 = C.JS_CONST_ZYJ(t3);
    if (0 >= t4)
      throw H.ioore(t3, 0);
    t5 = t3[0];
    t6 = t1[1];
    if (1 >= t4)
      throw H.ioore(t3, 1);
    t7 = t3[1];
    t1 = t1[2];
    if (2 >= t4)
      throw H.ioore(t3, 2);
    t3 = t3[2];
    t4 = new Float32Array(3);
    t4.$dartCachedLength = t4.length;
    t4 = new T.Vector3(t4);
    t4.setValues$3(t2 - t5, t6 - t7, t1 - t3);
    return t4;
  },
  $add: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7;
    t1 = this.storage;
    t2 = t1[0];
    t3 = other.get$storage();
    t4 = C.JS_CONST_ZYJ(t3);
    if (0 >= t4)
      throw H.ioore(t3, 0);
    t5 = t3[0];
    t6 = t1[1];
    if (1 >= t4)
      throw H.ioore(t3, 1);
    t7 = t3[1];
    t1 = t1[2];
    if (2 >= t4)
      throw H.ioore(t3, 2);
    t3 = t3[2];
    t4 = new Float32Array(3);
    t4.$dartCachedLength = t4.length;
    t4 = new T.Vector3(t4);
    t4.setValues$3(t2 + t5, t6 + t7, t1 + t3);
    return t4;
  },
  $mul: function(_, scale) {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = t1[0];
    if (typeof scale !== "number")
      throw H.iae(scale);
    t3 = t1[1];
    t1 = t1[2];
    t4 = new Float32Array(3);
    t4.$dartCachedLength = t4.length;
    t4 = new T.Vector3(t4);
    t4.setValues$3(t2 * scale, t3 * scale, t1 * scale);
    return t4;
  },
  $index: function(_, i) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 3)
      throw H.ioore(t1, i);
    return t1[i];
  },
  $indexSet: function(_, i, v) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 3)
      throw H.ioore(t1, i);
    t1[i] = v;
  },
  get$length: function(_) {
    var t1, t2, t3;
    t1 = this.storage;
    t2 = t1[0];
    t3 = t1[1];
    t1 = t1[2];
    return Math.sqrt(t2 * t2 + t3 * t3 + t1 * t1);
  },
  get$length2: function() {
    var t1, t2, t3;
    t1 = this.storage;
    t2 = t1[0];
    t3 = t1[1];
    t1 = t1[2];
    return t2 * t2 + t3 * t3 + t1 * t1;
  },
  normalize$0: function(_) {
    var l, t1;
    l = this.get$length(this);
    if (l === 0)
      return this;
    l = 1 / l;
    t1 = this.storage;
    t1[0] = t1[0] * l;
    t1[1] = t1[1] * l;
    t1[2] = t1[2] * l;
    return this;
  },
  cross$1: function(other) {
    var t1, _x, _y, _z, ox, oy, oz;
    t1 = this.storage;
    _x = t1[0];
    _y = t1[1];
    _z = t1[2];
    t1 = other.storage;
    ox = t1[0];
    oy = t1[1];
    oz = t1[2];
    t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector3(t1);
    t1.setValues$3(_y * oz - _z * oy, _z * ox - _x * oz, _x * oy - _y * ox);
    return t1;
  },
  applyProjection$1: function(arg) {
    var t1, _x, _y, _z, t2, t3, t4, t5, t6, d;
    t1 = this.storage;
    _x = t1[0];
    _y = t1[1];
    _z = t1[2];
    t2 = arg.get$storage();
    t3 = C.JS_CONST_ZYJ(t2);
    if (3 >= t3)
      throw H.ioore(t2, 3);
    t4 = t2[3];
    if (7 >= t3)
      throw H.ioore(t2, 7);
    t5 = t2[7];
    if (11 >= t3)
      throw H.ioore(t2, 11);
    t6 = t2[11];
    if (15 >= t3)
      throw H.ioore(t2, 15);
    d = 1 / (t4 * _x + t5 * _y + t6 * _z + t2[15]);
    t1[0] = (t2[0] * _x + t2[4] * _y + t2[8] * _z + t2[12]) * d;
    t2 = arg.get$storage();
    t6 = C.JS_CONST_ZYJ(t2);
    if (1 >= t6)
      throw H.ioore(t2, 1);
    t5 = t2[1];
    if (5 >= t6)
      throw H.ioore(t2, 5);
    t4 = t2[5];
    if (9 >= t6)
      throw H.ioore(t2, 9);
    t3 = t2[9];
    if (13 >= t6)
      throw H.ioore(t2, 13);
    t1[1] = (t5 * _x + t4 * _y + t3 * _z + t2[13]) * d;
    t2 = arg.get$storage();
    t3 = C.JS_CONST_ZYJ(t2);
    if (2 >= t3)
      throw H.ioore(t2, 2);
    t4 = t2[2];
    if (6 >= t3)
      throw H.ioore(t2, 6);
    t5 = t2[6];
    if (10 >= t3)
      throw H.ioore(t2, 10);
    t6 = t2[10];
    if (14 >= t3)
      throw H.ioore(t2, 14);
    t1[2] = (t4 * _x + t5 * _y + t6 * _z + t2[14]) * d;
    return this;
  },
  add$1: function(_, arg) {
    var t1, t2, t3;
    t1 = this.storage;
    t2 = t1[0];
    t3 = arg.get$storage();
    if (0 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 0);
    t1[0] = t2 + t3[0];
    t3 = t1[1];
    t2 = arg.get$storage();
    if (1 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 1);
    t1[1] = t3 + t2[1];
    t2 = t1[2];
    t3 = arg.get$storage();
    if (2 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 2);
    t1[2] = t2 + t3[2];
    return this;
  },
  sub$1: function(arg) {
    var t1, t2;
    t1 = this.storage;
    t2 = arg.storage;
    t1[0] = t1[0] - t2[0];
    t1[1] = t1[1] - t2[1];
    t1[2] = t1[2] - t2[2];
    return this;
  },
  scale$1: function(_, arg) {
    var t1 = this.storage;
    t1[2] = t1[2] * arg;
    t1[1] = t1[1] * arg;
    t1[0] = t1[0] * arg;
    return this;
  },
  clone$0: function(_) {
    var t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector3(t1);
    t1.setFrom$1(this);
    return t1;
  },
  get$r: function(_) {
    return this.storage[0];
  },
  get$g: function() {
    return this.storage[1];
  },
  get$b: function(_) {
    return this.storage[2];
  },
  get$x: function(_) {
    return this.storage[0];
  },
  get$y: function(_) {
    return this.storage[1];
  },
  get$z: function(_) {
    return this.storage[2];
  },
  $isVector3: true
},

Vector4: {"": "Object;storage<",
  setValues$4: function(x_, y_, z_, w_) {
    var t1 = this.storage;
    t1[3] = w_;
    t1[2] = z_;
    t1[1] = y_;
    t1[0] = x_;
    return this;
  },
  setFrom$1: function(other) {
    var t1, t2;
    t1 = this.storage;
    t2 = other.get$storage();
    if (3 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 3);
    t1[3] = t2[3];
    t2 = other.get$storage();
    if (2 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 2);
    t1[2] = t2[2];
    t2 = other.get$storage();
    if (1 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 1);
    t1[1] = t2[1];
    t2 = other.get$storage();
    if (0 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 0);
    t1[0] = t2[0];
    return this;
  },
  toString$0: function(_) {
    var t1 = this.storage;
    return H.S(t1[0]) + "," + H.S(t1[1]) + "," + H.S(t1[2]) + "," + H.S(t1[3]);
  },
  $negate: function(_) {
    var t1, t2, t3, t4, t5;
    t1 = this.storage;
    t2 = t1[0];
    t3 = t1[1];
    t4 = t1[2];
    t1 = t1[3];
    t5 = new Float32Array(4);
    t5.$dartCachedLength = t5.length;
    t5 = new T.Vector4(t5);
    t5.setValues$4(-t2, -t3, -t4, -t1);
    return t5;
  },
  $sub: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = this.storage;
    t2 = t1[0];
    t3 = other.get$storage();
    t4 = C.JS_CONST_ZYJ(t3);
    if (0 >= t4)
      throw H.ioore(t3, 0);
    t5 = t3[0];
    t6 = t1[1];
    if (1 >= t4)
      throw H.ioore(t3, 1);
    t7 = t3[1];
    t8 = t1[2];
    if (2 >= t4)
      throw H.ioore(t3, 2);
    t9 = t3[2];
    t1 = t1[3];
    if (3 >= t4)
      throw H.ioore(t3, 3);
    t3 = t3[3];
    t4 = new Float32Array(4);
    t4.$dartCachedLength = t4.length;
    t4 = new T.Vector4(t4);
    t4.setValues$4(t2 - t5, t6 - t7, t8 - t9, t1 - t3);
    return t4;
  },
  $add: function(_, other) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = this.storage;
    t2 = t1[0];
    t3 = other.get$storage();
    t4 = C.JS_CONST_ZYJ(t3);
    if (0 >= t4)
      throw H.ioore(t3, 0);
    t5 = t3[0];
    t6 = t1[1];
    if (1 >= t4)
      throw H.ioore(t3, 1);
    t7 = t3[1];
    t8 = t1[2];
    if (2 >= t4)
      throw H.ioore(t3, 2);
    t9 = t3[2];
    t1 = t1[3];
    if (3 >= t4)
      throw H.ioore(t3, 3);
    t3 = t3[3];
    t4 = new Float32Array(4);
    t4.$dartCachedLength = t4.length;
    t4 = new T.Vector4(t4);
    t4.setValues$4(t2 + t5, t6 + t7, t8 + t9, t1 + t3);
    return t4;
  },
  $mul: function(_, scale) {
    var t1, t2, t3, t4, t5;
    t1 = this.storage;
    t2 = t1[0];
    if (typeof scale !== "number")
      throw H.iae(scale);
    t3 = t1[1];
    t4 = t1[2];
    t1 = t1[3];
    t5 = new Float32Array(4);
    t5.$dartCachedLength = t5.length;
    t5 = new T.Vector4(t5);
    t5.setValues$4(t2 * scale, t3 * scale, t4 * scale, t1 * scale);
    return t5;
  },
  $index: function(_, i) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 4)
      throw H.ioore(t1, i);
    return t1[i];
  },
  $indexSet: function(_, i, v) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 4)
      throw H.ioore(t1, i);
    t1[i] = v;
  },
  get$length: function(_) {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = t1[0];
    t3 = t1[1];
    t4 = t1[2];
    t1 = t1[3];
    return Math.sqrt(t2 * t2 + t3 * t3 + t4 * t4 + t1 * t1);
  },
  get$length2: function() {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = t1[0];
    t3 = t1[1];
    t4 = t1[2];
    t1 = t1[3];
    return t2 * t2 + t3 * t3 + t4 * t4 + t1 * t1;
  },
  add$1: function(_, arg) {
    var t1, t2, t3;
    t1 = this.storage;
    t2 = t1[0];
    t3 = arg.get$storage();
    if (0 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 0);
    t1[0] = t2 + t3[0];
    t3 = t1[1];
    t2 = arg.get$storage();
    if (1 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 1);
    t1[1] = t3 + t2[1];
    t2 = t1[2];
    t3 = arg.get$storage();
    if (2 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 2);
    t1[2] = t2 + t3[2];
    t3 = t1[3];
    t2 = arg.get$storage();
    if (3 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 3);
    t1[3] = t3 + t2[3];
    return this;
  },
  scale$1: function(_, arg) {
    var t1 = this.storage;
    t1[0] = t1[0] * arg;
    t1[1] = t1[1] * arg;
    t1[2] = t1[2] * arg;
    t1[3] = t1[3] * arg;
    return this;
  },
  clone$0: function(_) {
    var t1 = new Float32Array(4);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector4(t1);
    t1.setFrom$1(this);
    return t1;
  },
  get$r: function(_) {
    return this.storage[0];
  },
  get$g: function() {
    return this.storage[1];
  },
  get$b: function(_) {
    return this.storage[2];
  },
  get$x: function(_) {
    return this.storage[0];
  },
  get$y: function(_) {
    return this.storage[1];
  },
  get$z: function(_) {
    return this.storage[2];
  },
  get$w: function() {
    return this.storage[3];
  },
  $isVector4: true
}}],
["", "web_gl_custom_attributes_particles.dart", , B, {
main: function() {
  B.init();
  var t1 = window;
  C.Window_methods._ensureRequestAnimationFrame$0(t1);
  C.Window_methods._requestAnimationFrame$1(t1, W._wrapZone(B.animate$closure));
  B.render();
},

init: function() {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, shaderMaterial, geometry, i, vertex, vertices, v;
  $.container = W._ElementFactoryProvider_createElement_tag("div", null);
  t1 = document.body;
  t1.toString;
  new W._ChildNodeListLazy(t1)._this.appendChild($.container);
  t1 = window.innerWidth;
  t2 = window.innerHeight;
  if (typeof t1 !== "number")
    throw t1.$div();
  if (typeof t2 !== "number")
    throw H.iae(t2);
  t3 = new Float32Array(16);
  t3.$dartCachedLength = t3.length;
  t3 = new T.Matrix4(t3);
  t3.setIdentity$0();
  t4 = new Float32Array(16);
  t4.$dartCachedLength = t4.length;
  t4 = new T.Matrix4(t4);
  t4.setIdentity$0();
  t5 = new Float32Array(16);
  t5.$dartCachedLength = t5.length;
  t5 = new T.Matrix4(t5);
  t5.setIdentity$0();
  t6 = $.Object3DCount;
  $.Object3DCount = t6 + 1;
  t7 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  t8 = new Float32Array(3);
  t8.$dartCachedLength = t8.length;
  t8 = new T.Vector3(t8);
  t8.setValues$3(0, 1, 0);
  t9 = new Float32Array(3);
  t9.$dartCachedLength = t9.length;
  t9 = new T.Vector3(t9);
  t9.setValues$3(0, 0, 0);
  t10 = new Float32Array(3);
  t10.$dartCachedLength = t10.length;
  t10 = new T.Vector3(t10);
  t10.setValues$3(0, 0, 0);
  t11 = new Float32Array(3);
  t11.$dartCachedLength = t11.length;
  t11 = new T.Vector3(t11);
  t11.setValues$3(1, 1, 1);
  t12 = new Float32Array(16);
  t12.$dartCachedLength = t12.length;
  t12 = new T.Matrix4(t12);
  t12.setIdentity$0();
  t13 = new Float32Array(16);
  t13.$dartCachedLength = t13.length;
  t13 = new T.Matrix4(t13);
  t13.setIdentity$0();
  t14 = new Float32Array(16);
  t14.$dartCachedLength = t14.length;
  t14 = new T.Matrix4(t14);
  t14.setIdentity$0();
  t15 = T.Quaternion$identity();
  t16 = new Float32Array(3);
  t16.$dartCachedLength = t16.length;
  t16 = new S.PerspectiveCamera(40, t1 / t2, null, null, null, null, null, null, t3, t4, t5, 1, 10000, t6, "", t7, null, [], t8, t9, t10, t11, "XYZ", null, null, null, true, null, t12, t13, t14, true, true, t15, false, 0, 1, true, false, false, true, new T.Vector3(t16), null, null);
  t16.updateProjectionMatrix$0();
  t16.position.storage[1] = 300;
  $.camera = t16;
  $.scene = S.Scene$();
  $.size = S.Attribute$("f", null);
  $.customColor = S.Attribute_Attribute$color(null);
  $.attributes = H.fillLiteralMap(["size", $.size, "customColor", $.customColor], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  t16 = new S.Uniform("f", null, true, null);
  t16.set$value(t16, 1);
  $.amplitude = t16;
  t16 = new S.Uniform("c", null, true, null);
  t16.set$value(t16, S.Color$(16777215));
  $.color = t16;
  t16 = $.amplitude;
  t15 = $.color;
  t14 = new S.Uniform("t", null, true, null);
  t14.set$value(t14, L.loadTexture("spark1.png", null, null, null));
  $.uniforms = H.fillLiteralMap(["amplitude", t16, "color", t15, "texture", t14], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  t14 = $.uniforms;
  t15 = $.attributes;
  t16 = document.querySelector("#vertexshader").textContent;
  t13 = document.querySelector("#fragmentshader").textContent;
  t12 = H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  t11 = $.MaterialCount;
  $.MaterialCount = t11 + 1;
  shaderMaterial = new S.ShaderMaterial(t13, t16, null, 2, false, 1, false, false, false, false, 0, true, t15, t12, "", t11, 0, 1, 2, 204, 205, 100, 0, false, 0, 0, true, false, true, false, true, true, null);
  shaderMaterial.uniforms = t14 != null ? t14 : H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
  geometry = S.Geometry$();
  for (i = 0; i < 100000; ++i) {
    t1 = new Float32Array(3);
    t1.$dartCachedLength = t1.length;
    vertex = new T.Vector3(t1);
    $.get$rnd().toString;
    t1 = vertex.storage;
    t1[0] = Math.random() * 2 - 1;
    $.get$rnd().toString;
    t1[1] = Math.random() * 2 - 1;
    $.get$rnd().toString;
    t1[2] = Math.random() * 2 - 1;
    vertex.scale$1(vertex, 200);
    J.add$1$ax(geometry.vertices, vertex);
  }
  $.sphere = S.ParticleSystem$(geometry, shaderMaterial);
  t1 = $.sphere;
  t1._dynamic = true;
  vertices = t1.geometry.vertices;
  for (t1 = J.getInterceptor$asx(vertices), v = 0; v < t1.get$length(vertices); ++v) {
    J.add$1$ax($.size.value, 10);
    t2 = $.customColor.value;
    t3 = new S.Color(1, 1, 1);
    t3.setHex$1(16755200);
    J.add$1$ax(t2, t3);
    if (v >= vertices.length)
      throw H.ioore(vertices, v);
    t2 = J.get$x$x(vertices[v]);
    if (typeof t2 !== "number")
      throw t2.$lt();
    t3 = $.customColor;
    if (t2 < 0)
      J.$index$asx(t3.value, v).setHSL$3(0.5 + 0.1 * (v / vertices.length), 0.7, 0.5);
    else
      J.$index$asx(t3.value, v).setHSL$3(0 + 0.1 * (v / vertices.length), 0.9, 0.5);
  }
  t1 = $.scene;
  t1.add$1(t1, $.sphere);
  $.renderer = S.WebGLRenderer$(true, true, null, 0, 0, null, "highp", true, false, true);
  $.renderer.setSize$2(window.innerWidth, window.innerHeight);
  J.get$nodes$x($.container)._this.appendChild($.renderer.canvas);
  t1 = new W._EventStream(window, C.EventStreamProvider_resize._eventType, false);
  H.setRuntimeTypeInfo(t1, [null]);
  t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(B.onWindowResize$closure), t1._useCapture);
  H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
  t2._tryResume$0();
},

onWindowResize: function($event) {
  var t1, t2, t3;
  t1 = $.camera;
  t2 = window.innerWidth;
  t3 = window.innerHeight;
  if (typeof t2 !== "number")
    throw t2.$div();
  if (typeof t3 !== "number")
    throw H.iae(t3);
  t1.aspect = t2 / t3;
  t1.updateProjectionMatrix$0();
  $.renderer.setSize$2(window.innerWidth, window.innerHeight);
},

animate: function(time) {
  var t1 = window;
  C.Window_methods._ensureRequestAnimationFrame$0(t1);
  C.Window_methods._requestAnimationFrame$1(t1, W._wrapZone(B.animate$closure));
  B.render();
},

render: function() {
  var t1, t2, delta_in_sec, i, t3;
  if ($.start_time == null)
    $.start_time = P.DateTime$_now().millisecondsSinceEpoch;
  t1 = P.DateTime$_now();
  t2 = $.start_time;
  if (typeof t2 !== "number")
    throw H.iae(t2);
  delta_in_sec = (t1.millisecondsSinceEpoch - t2) * 0.001;
  $.sphere.rotation.storage[2] = delta_in_sec * 0.05;
  t1 = delta_in_sec * 5;
  i = 0;
  while (true) {
    t2 = J.get$length$asx($.size.value);
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t3 = $.size;
    if (!(i < t2))
      break;
    t2 = t3.value;
    J.$indexSet$ax(t2, i, 14 + 13 * Math.sin(0.1 * i + t1));
    ++i;
  }
  t3.needsUpdate = true;
  $.renderer._render$2($.scene, $.camera);
}},
1],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Static function getters
init.globalFunctions.IsolateNatives__processWorkerMessage$closure = H.IsolateNatives__processWorkerMessage$closure = new H.Closure$2(H.IsolateNatives__processWorkerMessage, "IsolateNatives__processWorkerMessage$closure");
init.globalFunctions.Primitives__throwFormatException$closure = H.Primitives__throwFormatException$closure = new H.Closure$1(H.Primitives__throwFormatException, "Primitives__throwFormatException$closure");
init.globalFunctions.toStringWrapper$closure = H.toStringWrapper$closure = new H.Closure$0(H.toStringWrapper, "toStringWrapper$closure");
init.globalFunctions.invokeClosure$closure = H.invokeClosure$closure = new H.Closure$7(H.invokeClosure, "invokeClosure$closure");
init.globalFunctions.isAssignable$closure = H.isAssignable$closure = new H.Closure$2(H.isAssignable, "isAssignable$closure");
init.globalFunctions._asyncRunCallback$closure = P._asyncRunCallback$closure = new H.Closure$0(P._asyncRunCallback, "_asyncRunCallback$closure");
init.globalFunctions._nullDataHandler$closure = P._nullDataHandler$closure = new H.Closure$1(P._nullDataHandler, "_nullDataHandler$closure");
init.globalFunctions._nullErrorHandler$closure = P._nullErrorHandler$closure = new P.Closure$21(P._nullErrorHandler, "_nullErrorHandler$closure");
init.globalFunctions._nullDoneHandler$closure = P._nullDoneHandler$closure = new H.Closure$0(P._nullDoneHandler, "_nullDoneHandler$closure");
init.globalFunctions._defaultEquals$closure = P._defaultEquals$closure = new H.Closure$2(P._defaultEquals, "_defaultEquals$closure");
init.globalFunctions._defaultHashCode$closure = P._defaultHashCode$closure = new H.Closure$1(P._defaultHashCode, "_defaultHashCode$closure");
init.globalFunctions.Comparable_compare$closure = P.Comparable_compare$closure = new H.Closure$2(P.Comparable_compare, "Comparable_compare$closure");
init.globalFunctions.identical$closure = P.identical$closure = new H.Closure$2(P.identical, "identical$closure");
init.globalFunctions.identityHashCode$closure = P.identityHashCode$closure = new H.Closure$1(P.identityHashCode, "identityHashCode$closure");
init.globalFunctions.main$closure = B.main$closure = new H.Closure$0(B.main, "main$closure");
init.globalFunctions.onWindowResize$closure = B.onWindowResize$closure = new H.Closure$1(B.onWindowResize, "onWindowResize$closure");
init.globalFunctions.animate$closure = B.animate$closure = new H.Closure$1(B.animate, "animate$closure");
// Runtime type support
J.JSInt.$isint = true;
J.JSInt.$isnum = true;
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isObject = true;
J.JSDouble.$isdouble = true;
J.JSDouble.$isnum = true;
J.JSDouble.$isComparable = true;
J.JSDouble.$asComparable = [J.JSNumber];
J.JSDouble.$isComparable = true;
J.JSDouble.$asComparable = [J.JSNumber];
J.JSDouble.$isObject = true;
W.Node.$isNode = true;
W.Node.$isObject = true;
W._CSSValue.$isObject = true;
W.StyleSheet.$isObject = true;
W.SpeechRecognitionResult.$isObject = true;
W.SpeechInputResult.$isObject = true;
W.Gamepad.$isObject = true;
W.CssRule.$isObject = true;
P.Rectangle.$isObject = true;
W.Touch.$isObject = true;
W.TextTrack.$isObject = true;
W.TextTrackCue.$isObject = true;
J.JSString.$isString = true;
J.JSString.$isComparable = true;
J.JSString.$asComparable = [J.JSString];
J.JSString.$isObject = true;
W.SpeechGrammar.$isObject = true;
W.SourceBuffer.$isObject = true;
W.Plugin.$isObject = true;
W.MimeType.$isObject = true;
W.File.$isObject = true;
W.Entry.$isObject = true;
P.ElementInstance.$isObject = true;
P.Transform.$isObject = true;
P.PathSeg.$isObject = true;
P.Number.$isObject = true;
P.Length.$isObject = true;
P.Map.$isMap = true;
P.Map.$isObject = true;
J.JSNumber.$isnum = true;
J.JSNumber.$isComparable = true;
J.JSNumber.$asComparable = [J.JSNumber];
J.JSNumber.$isObject = true;
P.Duration.$isComparable = true;
P.Duration.$asComparable = [P.Duration];
P.Duration.$isObject = true;
S.Color.$isObject = true;
S.Texture.$isObject = true;
W.Event.$isObject = true;
J.JSArray.$isList = true;
J.JSArray.$isIterable = true;
J.JSArray.$isObject = true;
T.Vector3.$isVector3 = true;
T.Vector3.$isObject = true;
T.Vector4.$isVector4 = true;
T.Vector4.$isObject = true;
T.Vector2.$isVector2 = true;
T.Vector2.$isObject = true;
T.Matrix4.$isMatrix4 = true;
T.Matrix4.$isObject = true;
P.ReceivePort.$isStream = true;
P.ReceivePort.$asStream = [null];
P.ReceivePort.$isObject = true;
H._IsolateEvent.$isObject = true;
H._IsolateContext.$isObject = true;
P.Symbol.$isSymbol = true;
P.Symbol.$isObject = true;
P.StackTrace.$isStackTrace = true;
P.StackTrace.$isObject = true;
S.Uniform.$isUniform = true;
S.Uniform.$isObject = true;
P.Object.$isObject = true;
J.JSBool.$isbool = true;
J.JSBool.$isObject = true;
P.Function.$isFunction = true;
P.Function.$isObject = true;
P.Comparable.$isComparable = true;
P.Comparable.$isObject = true;
P._EventSink.$is_EventSink = true;
P._EventSink.$isObject = true;
P.Future.$isFuture = true;
P.Future.$isObject = true;
P.StreamSubscription.$isStreamSubscription = true;
P.StreamSubscription.$isObject = true;
S.Scene.$isScene = true;
S.Scene.$isObject = true;
S.Camera.$isCamera = true;
S.Camera.$isObject = true;
P.Iterable.$isIterable = true;
P.Iterable.$isObject = true;
P.Stream.$isStream = true;
P.Stream.$isObject = true;
T.Quaternion.$isQuaternion = true;
T.Quaternion.$isObject = true;
P.Index.$isIndex = true;
P.Index.$isObject = true;
P.Matrix.$isMatrix = true;
P.Matrix.$isObject = true;
W.RtcStatsReport.$isRtcStatsReport = true;
W.RtcStatsReport.$isObject = true;
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
C.C__DelayedDone = new P._DelayedDone();
C.C__Random = new P._Random();
C.C__RootZone = new P._RootZone();
C.Duration_0 = new P.Duration(0);
C.EventStreamProvider_error = new W.EventStreamProvider("error");
C.EventStreamProvider_load = new W.EventStreamProvider("load");
C.EventStreamProvider_resize = new W.EventStreamProvider("resize");
C.EventStreamProvider_success = new W.EventStreamProvider("success");
C.Float32List_methods = P.Float32List.prototype;
C.JSArray_methods = J.JSArray.prototype;
C.JSDouble_methods = J.JSDouble.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNull_methods = J.JSNull.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
C.JS_CONST_6qb = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
C.JS_CONST_86y = function getTagFallback(o) {
  if (o == null) return "Null";
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.builtin$cls;
    if (typeof name == "string") return name;
    name = constructor.name;
    if (typeof name == "string"
        && name !== ""
        && name !== "Object"
        && name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
C.JS_CONST_Cbr = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var userAgent = navigator.userAgent;
    if (userAgent.indexOf("Chrome") >= 0 ||
        userAgent.indexOf("DumpRenderTree") >= 0) {
      return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
C.JS_CONST_TtD = function() {
  function typeNameInChrome(obj) { return obj.constructor.name; }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
C.JS_CONST_ZYJ =     ((typeof version == "function" && typeof os == "object" && "system" in os)
    || (typeof navigator == "object"
        && navigator.userAgent.indexOf('Chrome') != -1))
        ? function(x) { return x.$dartCachedLength || x.length; }
        : function(x) { return x.length; };
;
C.JS_CONST_rD3 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    if (tag == "Document") return null;
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
C.List_empty = Isolate.makeConstantList([]);
C.NodeList_methods = W.NodeList.prototype;
C.Type_oqh = H.createRuntimeType('Uint64List');
C.Type_qxd = H.createRuntimeType('Int64List');
C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
C.Window_methods = W.Window.prototype;
$.crossOrigin = "anonymous";
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.getTagFunction = null;
$.alternateTagFunction = null;
$.prototypeForTagFunction = null;
$.dispatchRecordsForInstanceTags = null;
$.interceptorsForUncacheableTags = null;
$.initNativeDispatchFlag = null;
$.printToZone = null;
$._callbacksAreEnqueued = false;
$.Zone__current = C.C__RootZone;
$.Expando__keyCount = 0;
$.Device__isOpera = null;
$.Device__isWebKit = null;
$.__ShaderChunk = null;
$.__UniformsLib = null;
$.__ShaderLib = null;
$.GeometryCount = 0;
$.Object3DCount = 0;
$.MaterialCount = 0;
$.TextureCount = 0;
$.container = null;
$.camera = null;
$.scene = null;
$.renderer = null;
$.sphere = null;
$.uniforms = null;
$.amplitude = null;
$.color = null;
$.attributes = null;
$.size = null;
$.customColor = null;
$.start_time = null;
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return J.getInterceptor$n(receiver).$ge(receiver, a0);
};
J.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return J.getInterceptor$n(receiver).$gt(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
J.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return J.getInterceptor$n(receiver).$lt(receiver, a0);
};
J.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return J.getInterceptor$n(receiver).$mul(receiver, a0);
};
J.$negate$n = function(receiver) {
  if (typeof receiver == "number")
    return -receiver;
  return J.getInterceptor$n(receiver).$negate(receiver);
};
J.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return J.getInterceptor$n(receiver).$sub(receiver, a0);
};
J._async$_add$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver)._async$_add$1(receiver, a0);
};
J.abs$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).abs$0(receiver);
};
J.activeTexture$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).activeTexture$1(receiver, a0);
};
J.add$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).add$1(receiver, a0);
};
J.addEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
};
J.any$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).any$1(receiver, a0);
};
J.attachShader$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).attachShader$2(receiver, a0, a1);
};
J.bindBuffer$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).bindBuffer$2(receiver, a0, a1);
};
J.bindFramebuffer$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).bindFramebuffer$2(receiver, a0, a1);
};
J.bindRenderbuffer$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).bindRenderbuffer$2(receiver, a0, a1);
};
J.bindTexture$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).bindTexture$2(receiver, a0, a1);
};
J.blendEquation$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).blendEquation$1(receiver, a0);
};
J.blendEquationSeparate$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).blendEquationSeparate$2(receiver, a0, a1);
};
J.blendFunc$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).blendFunc$2(receiver, a0, a1);
};
J.blendFuncSeparate$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).blendFuncSeparate$4(receiver, a0, a1, a2, a3);
};
J.bufferDataTyped$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).bufferDataTyped$3(receiver, a0, a1, a2);
};
J.clear$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).clear$1(receiver, a0);
};
J.clearColor$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).clearColor$4(receiver, a0, a1, a2, a3);
};
J.clearDepth$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).clearDepth$1(receiver, a0);
};
J.clearStencil$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).clearStencil$1(receiver, a0);
};
J.clone$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).clone$0(receiver);
};
J.compareTo$1$ns = function(receiver, a0) {
  return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
J.compileShader$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).compileShader$1(receiver, a0);
};
J.createBuffer$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createBuffer$0(receiver);
};
J.createFramebuffer$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createFramebuffer$0(receiver);
};
J.createProgram$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createProgram$0(receiver);
};
J.createRenderbuffer$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createRenderbuffer$0(receiver);
};
J.createShader$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).createShader$1(receiver, a0);
};
J.createTexture$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createTexture$0(receiver);
};
J.cullFace$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).cullFace$1(receiver, a0);
};
J.deleteProgram$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).deleteProgram$1(receiver, a0);
};
J.deleteShader$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).deleteShader$1(receiver, a0);
};
J.depthFunc$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).depthFunc$1(receiver, a0);
};
J.depthMask$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).depthMask$1(receiver, a0);
};
J.disable$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).disable$1(receiver, a0);
};
J.disableVertexAttribArray$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).disableVertexAttribArray$1(receiver, a0);
};
J.drawArrays$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).drawArrays$3(receiver, a0, a1, a2);
};
J.elementAt$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
J.enable$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).enable$1(receiver, a0);
};
J.enableVertexAttribArray$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).enableVertexAttribArray$1(receiver, a0);
};
J.fold$2$ax = function(receiver, a0, a1) {
  return J.getInterceptor$ax(receiver).fold$2(receiver, a0, a1);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.framebufferRenderbuffer$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).framebufferRenderbuffer$4(receiver, a0, a1, a2, a3);
};
J.framebufferTexture2D$5$x = function(receiver, a0, a1, a2, a3, a4) {
  return J.getInterceptor$x(receiver).framebufferTexture2D$5(receiver, a0, a1, a2, a3, a4);
};
J.frontFace$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).frontFace$1(receiver, a0);
};
J.generateMipmap$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).generateMipmap$1(receiver, a0);
};
J.get$_key$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_key(receiver);
};
J.get$attributes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$attributes(receiver);
};
J.get$color$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$color(receiver);
};
J.get$content$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$content(receiver);
};
J.get$error$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$error(receiver);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$height$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$height(receiver);
};
J.get$id$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$id(receiver);
};
J.get$isInfinite$n = function(receiver) {
  return J.getInterceptor$n(receiver).get$isInfinite(receiver);
};
J.get$isNaN$n = function(receiver) {
  return J.getInterceptor$n(receiver).get$isNaN(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$map$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$map(receiver);
};
J.get$name$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$name(receiver);
};
J.get$next$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$next(receiver);
};
J.get$nodes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$nodes(receiver);
};
J.get$onError$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onError(receiver);
};
J.get$onLoad$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onLoad(receiver);
};
J.get$parent$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$parent(receiver);
};
J.get$r$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$r(receiver);
};
J.get$type$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$type(receiver);
};
J.get$value$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$value(receiver);
};
J.get$values$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$values(receiver);
};
J.get$visible$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$visible(receiver);
};
J.get$width$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$width(receiver);
};
J.get$x$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$x(receiver);
};
J.get$y$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$y(receiver);
};
J.get$z$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$z(receiver);
};
J.getAttribLocation$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getAttribLocation$2(receiver, a0, a1);
};
J.getContext3d$5$alpha$antialias$premultipliedAlpha$preserveDrawingBuffer$stencil$x = function(receiver, a0, a1, a2, a3, a4) {
  return J.getInterceptor$x(receiver).getContext3d$5$alpha$antialias$premultipliedAlpha$preserveDrawingBuffer$stencil(receiver, a0, a1, a2, a3, a4);
};
J.getError$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).getError$0(receiver);
};
J.getExtension$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getExtension$1(receiver, a0);
};
J.getParameter$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getParameter$1(receiver, a0);
};
J.getProgramParameter$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getProgramParameter$2(receiver, a0, a1);
};
J.getShaderInfoLog$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getShaderInfoLog$1(receiver, a0);
};
J.getShaderParameter$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getShaderParameter$2(receiver, a0, a1);
};
J.getShaderPrecisionFormat$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getShaderPrecisionFormat$2(receiver, a0, a1);
};
J.getUniformLocation$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getUniformLocation$2(receiver, a0, a1);
};
J.indexOf$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).indexOf$1(receiver, a0);
};
J.lineWidth$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).lineWidth$1(receiver, a0);
};
J.linkProgram$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).linkProgram$1(receiver, a0);
};
J.map$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).map$1(receiver, a0);
};
J.pixelStorei$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).pixelStorei$2(receiver, a0, a1);
};
J.polygonOffset$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).polygonOffset$2(receiver, a0, a1);
};
J.remove$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
};
J.removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
};
J.renderbufferStorage$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).renderbufferStorage$4(receiver, a0, a1, a2, a3);
};
J.send$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).send$1(receiver, a0);
};
J.set$crossOrigin$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$crossOrigin(receiver, value);
};
J.set$height$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$height(receiver, value);
};
J.set$length$asx = function(receiver, value) {
  return J.getInterceptor$asx(receiver).set$length(receiver, value);
};
J.set$next$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$next(receiver, value);
};
J.set$parent$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$parent(receiver, value);
};
J.set$src$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$src(receiver, value);
};
J.set$value$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$value(receiver, value);
};
J.set$width$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$width(receiver, value);
};
J.shaderSource$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).shaderSource$2(receiver, a0, a1);
};
J.texImage2D$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return J.getInterceptor$x(receiver).texImage2D$6(receiver, a0, a1, a2, a3, a4, a5);
};
J.texImage2DCanvas$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return J.getInterceptor$x(receiver).texImage2DCanvas$6(receiver, a0, a1, a2, a3, a4, a5);
};
J.texImage2DImage$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return J.getInterceptor$x(receiver).texImage2DImage$6(receiver, a0, a1, a2, a3, a4, a5);
};
J.texImage2DTyped$9$x = function(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8) {
  return J.getInterceptor$x(receiver).texImage2DTyped$9(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8);
};
J.texImage2DVideo$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return J.getInterceptor$x(receiver).texImage2DVideo$6(receiver, a0, a1, a2, a3, a4, a5);
};
J.texParameterf$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).texParameterf$3(receiver, a0, a1, a2);
};
J.texParameteri$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).texParameteri$3(receiver, a0, a1, a2);
};
J.then$2$onError$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).then$2$onError(receiver, a0, a1);
};
J.toDouble$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).toDouble$0(receiver);
};
J.toInt$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).toInt$0(receiver);
};
J.toList$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).toList$0(receiver);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
J.uniform1f$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform1f$2(receiver, a0, a1);
};
J.uniform1fv$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform1fv$2(receiver, a0, a1);
};
J.uniform1i$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform1i$2(receiver, a0, a1);
};
J.uniform1iv$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform1iv$2(receiver, a0, a1);
};
J.uniform2f$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).uniform2f$3(receiver, a0, a1, a2);
};
J.uniform2fv$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform2fv$2(receiver, a0, a1);
};
J.uniform3f$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).uniform3f$4(receiver, a0, a1, a2, a3);
};
J.uniform3fv$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform3fv$2(receiver, a0, a1);
};
J.uniform3iv$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform3iv$2(receiver, a0, a1);
};
J.uniform4f$5$x = function(receiver, a0, a1, a2, a3, a4) {
  return J.getInterceptor$x(receiver).uniform4f$5(receiver, a0, a1, a2, a3, a4);
};
J.uniform4fv$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).uniform4fv$2(receiver, a0, a1);
};
J.uniformMatrix2fv$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).uniformMatrix2fv$3(receiver, a0, a1, a2);
};
J.uniformMatrix3fv$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).uniformMatrix3fv$3(receiver, a0, a1, a2);
};
J.uniformMatrix4fv$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).uniformMatrix4fv$3(receiver, a0, a1, a2);
};
J.useProgram$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).useProgram$1(receiver, a0);
};
J.vertexAttribPointer$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return J.getInterceptor$x(receiver).vertexAttribPointer$6(receiver, a0, a1, a2, a3, a4, a5);
};
J.viewport$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).viewport$4(receiver, a0, a1, a2, a3);
};
J.write$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).write$1(receiver, a0);
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() { return this; }();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return new P.Expando(null);
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ $method$: null, toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnNull());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnUndefined());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnNull());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnUndefined());
});
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  return P.ListQueue$(null, {func: "void_", void: true});
});
Isolate.$lazy($, "_toStringVisiting", "_toStringVisiting", "get$_toStringVisiting", function() {
  return P.HashSet_HashSet$identity(null);
});
Isolate.$lazy($, "_toStringList", "Maps__toStringList", "get$Maps__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "__projector", "CameraHelper___projector", "get$CameraHelper___projector", function() {
  return S.Projector$();
});
Isolate.$lazy($, "__v", "CameraHelper___v", "get$CameraHelper___v", function() {
  var t1 = new Float32Array(3);
  t1.$dartCachedLength = t1.length;
  return new T.Vector3(t1);
});
Isolate.$lazy($, "__c", "CameraHelper___c", "get$CameraHelper___c", function() {
  return S.Camera$(0, 0);
});
Isolate.$lazy($, "rnd", "rnd", "get$rnd", function() {
  return C.C__Random;
});
// Native classes

init.functionAliases = {};
;
init.metadata = [];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {};
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
!function() {
  var objectProto = Object.prototype;
  for (var i = 0;; i++) {
    var property = "___dart_dispatch_record_ZxYxX_0_";
    if (i > 0)
      property = rootProperty + "_" + i;
    if (!(property in objectProto))
      return init.dispatchPropertyName = property;
  }
}();
// BEGIN invoke [main].
;(function (callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }

  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;

  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { H.startRootIsolate(B.main$closure); });
  } else {
    H.startRootIsolate(B.main$closure);
  }
});
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, accessors, cls) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable = false;
    if (code == 45) {
      len--;
      code = field.charCodeAt(len - 1);
      field = field.substring(0, len);
      reflectable = true;
    }
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields) {
    var accessors = [];
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, cls);
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += cls + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + cls + ";\n";
    str += "if($desc instanceof Array) $desc = $desc[1];\n";
    str += cls + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string") {
      str += cls + ".name=\"" + cls + "\";\n";
    }
    str += accessors.join("");
    return str;
  }
  var inheritFrom = function() {
    function tmp() {
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      for (var member in properties)
        if (hasOwnProperty.call(properties, member))
          object[member] = properties[member];
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    if (!init.allClasses)
      init.allClasses = {};
    var allClasses = init.allClasses;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (typeof dart_precompiled == "function") {
      var constructors = dart_precompiled(collectedClasses);
    } else {
      var combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
      var constructorsList = [];
    }
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        if (desc instanceof Array)
          desc = desc[1];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        var s = fields.split(";");
        fields = s[1] == "" ? [] : s[1].split(",");
        supr = s[0];
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          if (mixin instanceof Array)
            mixin = mixin[1];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        if (typeof dart_precompiled != "function") {
          combinedConstructorFunction += defineClass(name, cls, fields);
          constructorsList.push(cls);
        }
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    if (typeof dart_precompiled != "function") {
      combinedConstructorFunction += "return [\n  " + constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", combinedConstructorFunction)(collectedClasses);
      combinedConstructorFunction = null;
    }
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = collectedClasses[cls];
      var globalObject = isolateProperties;
      if (desc instanceof Array) {
        globalObject = desc[0] || isolateProperties;
        desc = desc[1];
      }
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = {};
    init.interceptorsByTag = Object.create(null);
    init.leafTags = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = inheritFrom(constructor, superConstructor);
      if (hasOwnProperty.call(prototype, "%")) {
        var nativeSpec = prototype["%"].split(";");
        if (nativeSpec[0]) {
          var tags = nativeSpec[0].split("|");
          for (var i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = true;
          }
        }
        if (nativeSpec[1]) {
          tags = nativeSpec[1].split("|");
          if (nativeSpec[2]) {
            var subclasses = nativeSpec[2].split("|");
            for (var i = 0; i < subclasses.length; i++) {
              var subclass = allClasses[subclasses[i]];
              subclass.$nativeSuperclassTag = tags[0];
            }
          }
          for (i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = false;
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.$finishClasses = oldIsolate.$finishClasses;
    Isolate.makeConstantList = oldIsolate.makeConstantList;
    return Isolate;
  };
}
})()

//# sourceMappingURL=web_gl_custom_attributes_particles.dart.js.map
//@ sourceMappingURL=web_gl_custom_attributes_particles.dart.js.map
